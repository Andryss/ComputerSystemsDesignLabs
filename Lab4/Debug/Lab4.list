
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d60  08005d60  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00001184  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000122c  2000122c  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124e8  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000295b  00000000  00000000  000325c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00034f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  00035f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f97  00000000  00000000  00036e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015222  00000000  00000000  0003add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db6a6  00000000  00000000  0004fff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b69f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004714  00000000  00000000  0012b6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005970 	.word	0x08005970

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08005970 	.word	0x08005970

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <is_buf_full>:

bool is_buf_empty(struct Buffer* buf) {
	return buf->isEmpty;
}

bool is_buf_full(struct Buffer* buf) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == 2048 - 1));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80005e4:	3301      	adds	r3, #1
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d00b      	beq.n	8000608 <is_buf_full+0x32>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d108      	bne.n	800060c <is_buf_full+0x36>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000600:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000604:	4293      	cmp	r3, r2
 8000606:	d101      	bne.n	800060c <is_buf_full+0x36>
 8000608:	2301      	movs	r3, #1
 800060a:	e000      	b.n	800060e <is_buf_full+0x38>
 800060c:	2300      	movs	r3, #0
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000630:	e01e      	b.n	8000670 <buf_push+0x50>
		if (is_buf_full(buf)) {
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f7ff ffcf 	bl	80005d6 <is_buf_full>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d11d      	bne.n	800067a <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000644:	3301      	adds	r3, #1
 8000646:	b29b      	uxth	r3, r3
 8000648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800064c:	b29a      	uxth	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800065a:	461a      	mov	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	5499      	strb	r1, [r3, r2]
		data++;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3301      	adds	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
		written++;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3dc      	bcc.n	8000632 <buf_push+0x12>
 8000678:	e000      	b.n	800067c <buf_push+0x5c>
			break;
 800067a:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ffaa 	bl	80005d6 <is_buf_full>
 8000682:	4603      	mov	r3, r0
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000694:	3301      	adds	r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800069c:	b29a      	uxth	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2100      	movs	r1, #0
 80006b0:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <buf_push_itsafe>:
	data[read + (read == size ? -1 : 0)] = '\0';
	buf->isEmpty = (buf->begin == buf->end);
	return true;
}

void buf_push_itsafe(struct Buffer* buf, uint8_t* data, size_t size) {
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b088      	sub	sp, #32
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006ce:	f3ef 8310 	mrs	r3, PRIMASK
 80006d2:	617b      	str	r3, [r7, #20]
  return(result);
 80006d4:	697b      	ldr	r3, [r7, #20]
	uint32_t pmask = __get_PRIMASK();
 80006d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
	__disable_irq();
	buf_push(buf, data, size);
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff ff9d 	bl	8000620 <buf_push>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	f383 8810 	msr	PRIMASK, r3
}
 80006f0:	bf00      	nop
	__set_PRIMASK(pmask);
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_GPIO_Init+0x84>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_GPIO_Init+0x84>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_GPIO_Init+0x84>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <MX_GPIO_Init+0x84>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_GPIO_Init+0x84>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <MX_GPIO_Init+0x84>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_GPIO_Init+0x84>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <MX_GPIO_Init+0x84>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f001 fdb9 	bl	8002338 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 ff66 	bl	800169c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f002 fd6f 	bl	80032b6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f000 ff5d 	bl	800169c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f002 fda2 	bl	800332e <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 ff54 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000c4 	.word	0x200000c4
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12b      	bne.n	800087e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000846:	2312      	movs	r3, #18
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000852:	2304      	movs	r3, #4
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 800085e:	f001 fbbf 	bl	8001fe0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <KBRD_Init>:
static uint32_t last_time = 0;
static uint32_t minimum_delay = 20;

static uint16_t prev_state = 0;

HAL_StatusTypeDef KBRD_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = PCA9538_SetDefaultConfig(KEYBOARD_I2C_ADDR);
 800089a:	20e2      	movs	r0, #226	; 0xe2
 800089c:	f000 ff5c 	bl	8001758 <PCA9538_SetDefaultConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <KBRD_Init+0x1a>
		// UART_Transmit("Can't set keyboard default config\n");
		return status;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	e00a      	b.n	80008c4 <KBRD_Init+0x30>
	}
	uint8_t out_def = 0x00;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71bb      	strb	r3, [r7, #6]
	status = PCA9538_Write_Register(KEYBOARD_I2C_ADDR, OUTPUT_PORT, &out_def);
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	461a      	mov	r2, r3
 80008b6:	2101      	movs	r1, #1
 80008b8:	20e2      	movs	r0, #226	; 0xe2
 80008ba:	f000 ff2b 	bl	8001714 <PCA9538_Write_Register>
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
		// UART_Transmit("Can't set keyboard output port\n");
	}
	return status;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <KBRD_IsSet>:

bool KBRD_IsSet(uint16_t* state, uint16_t bit) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
	return (*state & bit) > 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	4013      	ands	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <KBRD_Set>:

void KBRD_Set(uint16_t* state, uint16_t bit) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
	*state = (*state | bit);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	881a      	ldrh	r2, [r3, #0]
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	4313      	orrs	r3, r2
 800090c:	b29a      	uxth	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	801a      	strh	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <KBRD_ResetAll>:

void KBRD_Reset(uint16_t* state, uint16_t bit) {
	*state = (*state & (~bit));
}

void KBRD_ResetAll(uint16_t* state) {
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	*state = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	801a      	strh	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <KBRD_GetState>:

HAL_StatusTypeDef KBRD_GetState(uint16_t* state) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	KBRD_ResetAll(state);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ffec 	bl	800091e <KBRD_ResetAll>

	uint16_t cur_state;
	KBRD_ResetAll(state);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffe9 	bl	800091e <KBRD_ResetAll>

	while (HAL_GetTick() < last_time + minimum_delay) { }
 800094c:	bf00      	nop
 800094e:	f001 fa05 	bl	8001d5c <HAL_GetTick>
 8000952:	4601      	mov	r1, r0
 8000954:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <KBRD_GetState+0x140>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <KBRD_GetState+0x144>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4299      	cmp	r1, r3
 8000960:	d3f5      	bcc.n	800094e <KBRD_GetState+0x16>
	last_time = HAL_GetTick();
 8000962:	f001 f9fb 	bl	8001d5c <HAL_GetTick>
 8000966:	4603      	mov	r3, r0
 8000968:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <KBRD_GetState+0x140>)
 800096a:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef status;
	uint8_t input_port;

	for (uint8_t i = 0; i < 4; i++) { // row
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e06a      	b.n	8000a48 <KBRD_GetState+0x110>
		uint8_t conf = ~(0x01 << i);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2201      	movs	r2, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	72bb      	strb	r3, [r7, #10]

		status = PCA9538_Write_Register(KEYBOARD_I2C_ADDR, OUTPUT_PORT, &conf);
 8000982:	f107 030a 	add.w	r3, r7, #10
 8000986:	461a      	mov	r2, r3
 8000988:	2101      	movs	r1, #1
 800098a:	20e2      	movs	r0, #226	; 0xe2
 800098c:	f000 fec2 	bl	8001714 <PCA9538_Write_Register>
 8000990:	4603      	mov	r3, r0
 8000992:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK) {
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <KBRD_GetState+0x66>
			// UART_Transmit("Can't write keyboard config register\n");
			return status;
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	e067      	b.n	8000a6e <KBRD_GetState+0x136>
		}

		HAL_Delay(pull_delay);
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <KBRD_GetState+0x148>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 f9e6 	bl	8001d74 <HAL_Delay>

		status = PCA9538_Read_Inputs(KEYBOARD_I2C_ADDR, &input_port);
 80009a8:	f107 030b 	add.w	r3, r7, #11
 80009ac:	4619      	mov	r1, r3
 80009ae:	20e2      	movs	r0, #226	; 0xe2
 80009b0:	f000 fe9c 	bl	80016ec <PCA9538_Read_Inputs>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK) {
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <KBRD_GetState+0x8a>
			// UART_Transmit("Can't read keyboard input port\n");
			return status;
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	e055      	b.n	8000a6e <KBRD_GetState+0x136>
		}

		input_port = (input_port >> 4) & 0x7; // column
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	091b      	lsrs	r3, r3, #4
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	72fb      	strb	r3, [r7, #11]
		if (input_port != 0) {
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d030      	beq.n	8000a38 <KBRD_GetState+0x100>
			if ((input_port & 0x4) == 0) {
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10b      	bne.n	80009f8 <KBRD_GetState+0xc0>
				KBRD_Set(&cur_state, BTN_9 << i);
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff80 	bl	80008f8 <KBRD_Set>
			}
			if ((input_port & 0x2) == 0) {
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10a      	bne.n	8000a18 <KBRD_GetState+0xe0>
				KBRD_Set(&cur_state, BTN_5 << i);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2210      	movs	r2, #16
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff70 	bl	80008f8 <KBRD_Set>
			}
			if ((input_port & 0x1) == 0) {
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10a      	bne.n	8000a38 <KBRD_GetState+0x100>
				KBRD_Set(&cur_state, BTN_1 << i);
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2201      	movs	r2, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff60 	bl	80008f8 <KBRD_Set>
			}
		}

		HAL_Delay(pull_delay);
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <KBRD_GetState+0x148>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f999 	bl	8001d74 <HAL_Delay>
	for (uint8_t i = 0; i < 4; i++) { // row
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	3301      	adds	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d991      	bls.n	8000972 <KBRD_GetState+0x3a>
	}

	*state = cur_state & (~prev_state);
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <KBRD_GetState+0x14c>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	89bb      	ldrh	r3, [r7, #12]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	801a      	strh	r2, [r3, #0]
	prev_state = cur_state;
 8000a66:	89ba      	ldrh	r2, [r7, #12]
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <KBRD_GetState+0x14c>)
 8000a6a:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000118 	.word	0x20000118
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	20000000 	.word	0x20000000
 8000a84:	2000011c 	.word	0x2000011c

08000a88 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <transmit+0x30>)
 8000a9c:	f003 fffb 	bl	8004a96 <HAL_UART_Transmit_IT>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d104      	bne.n	8000ab0 <transmit+0x28>
		buf_push_itsafe(&transmitBuffer, data, size);
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <transmit+0x34>)
 8000aac:	f7ff fe09 	bl	80006c2 <buf_push_itsafe>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200011d4 	.word	0x200011d4
 8000abc:	20000928 	.word	0x20000928

08000ac0 <transmitc>:

void transmitc(char* data) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fb91 	bl	80001f0 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffd8 	bl	8000a88 <transmit>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_TIM_PeriodElapsedCallback>:

size_t edit_mode = 0;
uint16_t edit_mode_led = 0;
uint16_t edit_mode_brightness = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d15e      	bne.n	8000bb0 <HAL_TIM_PeriodElapsedCallback+0xd0>
		  if (cur_mode != -1) {
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000afa:	d059      	beq.n	8000bb0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			  if (cur_mode >= sizeof(mode_leds) / sizeof(uint16_t)) {
 8000afc:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d90c      	bls.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x3e>
				  htim4.Instance->CCR2 = 0;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
				  htim4.Instance->CCR3 = 0;
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	; 0x3c
				  htim4.Instance->CCR4 = 0;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b1c:	e044      	b.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0xc8>
			  } else {
				  uint16_t leds = mode_leds[cur_mode];
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b28:	81fb      	strh	r3, [r7, #14]
				  uint16_t brightness = mode_brightness[cur_mode];
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b34:	81bb      	strh	r3, [r7, #12]

				  if ((leds & 0x1) != 0) {
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d009      	beq.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x74>
					  htim4.Instance->CCR2 = brightness * 10;
 8000b40:	89ba      	ldrh	r2, [r7, #12]
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
 8000b52:	e003      	b.n	8000b5c <HAL_TIM_PeriodElapsedCallback+0x7c>
				  } else {
					  htim4.Instance->CCR2 = 0;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
				  }

				  if ((leds & 0x2) != 0) {
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d009      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x9a>
					  htim4.Instance->CCR3 = brightness * 10;
 8000b66:	89ba      	ldrh	r2, [r7, #12]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b78:	e003      	b.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xa2>
				  } else {
					  htim4.Instance->CCR3 = 0;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c
				  }

				  if ((leds & 0x4) != 0) {
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0xc0>
					  htim4.Instance->CCR4 = brightness * 10;
 8000b8c:	89ba      	ldrh	r2, [r7, #12]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b9e:	e003      	b.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0xc8>
				  } else {
					  htim4.Instance->CCR4 = 0;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
				  }
			  }

			  cur_mode = -1;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bae:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40001000 	.word	0x40001000
 8000bc0:	20000030 	.word	0x20000030
 8000bc4:	20001144 	.word	0x20001144
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000001c 	.word	0x2000001c

08000bd0 <leds_str.1>:
  MX_TIM6_Init();
  MX_USART6_UART_Init();
  MX_TIM4_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  char leds_str(uint16_t leds) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	f8c7 c000 	str.w	ip, [r7]
  	  if (leds == 0x1) return 'G';
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <leds_str.1+0x18>
 8000be4:	2347      	movs	r3, #71	; 0x47
 8000be6:	e00a      	b.n	8000bfe <leds_str.1+0x2e>
  	  if (leds == 0x2) return 'Y';
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d101      	bne.n	8000bf2 <leds_str.1+0x22>
 8000bee:	2359      	movs	r3, #89	; 0x59
 8000bf0:	e005      	b.n	8000bfe <leds_str.1+0x2e>
  	  if (leds == 0x4) return 'R';
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d101      	bne.n	8000bfc <leds_str.1+0x2c>
 8000bf8:	2352      	movs	r3, #82	; 0x52
 8000bfa:	e000      	b.n	8000bfe <leds_str.1+0x2e>
  	  return '?';
 8000bfc:	233f      	movs	r3, #63	; 0x3f
    }
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <main>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
int main(void)
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000c18:	f001 f83a 	bl	8001c90 <HAL_Init>
  buf_init(&receiveBuffer);
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <main+0xc8>)
 8000c1e:	f7ff fcc1 	bl	80005a4 <buf_init>
  buf_init(&transmitBuffer);
 8000c22:	482d      	ldr	r0, [pc, #180]	; (8000cd8 <main+0xcc>)
 8000c24:	f7ff fcbe 	bl	80005a4 <buf_init>
  SystemClock_Config();
 8000c28:	f000 fcd8 	bl	80015dc <SystemClock_Config>
  MX_GPIO_Init();
 8000c2c:	f7ff fd66 	bl	80006fc <MX_GPIO_Init>
  MX_TIM6_Init();
 8000c30:	f000 fed8 	bl	80019e4 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000c34:	f000 ff90 	bl	8001b58 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000c38:	f000 fe64 	bl	8001904 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000c3c:	f7ff fda2 	bl	8000784 <MX_I2C1_Init>
			return 0;
		}
    	return 0;
    }

    if (!hello_print) {
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <main+0xd0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f083 0301 	eor.w	r3, r3, #1
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d009      	beq.n	8000c62 <main+0x56>
  	  hello_print = true;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <main+0xd0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
  	  transmitc("\n\r\n\rProgramm started\n\r");
 8000c54:	4822      	ldr	r0, [pc, #136]	; (8000ce0 <main+0xd4>)
 8000c56:	f7ff ff33 	bl	8000ac0 <transmitc>
  	  print_mode_message();
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	f000 f84b 	bl	8000cf8 <print_mode_message.0>
    }

    cur_mode = 0;
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <main+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	481f      	ldr	r0, [pc, #124]	; (8000ce8 <main+0xdc>)
 8000c6c:	f003 f906 	bl	8003e7c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c70:	2108      	movs	r1, #8
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <main+0xdc>)
 8000c74:	f003 f902 	bl	8003e7c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c78:	210c      	movs	r1, #12
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <main+0xdc>)
 8000c7c:	f003 f8fe 	bl	8003e7c <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim6);
 8000c80:	481a      	ldr	r0, [pc, #104]	; (8000cec <main+0xe0>)
 8000c82:	f003 f83b 	bl	8003cfc <HAL_TIM_Base_Start_IT>
    KBRD_Init();
 8000c86:	f7ff fe05 	bl	8000894 <KBRD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KBRD_GetState(&kbrd_state);
 8000c8a:	1cbb      	adds	r3, r7, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe53 	bl	8000938 <KBRD_GetState>

	  char c = parse_pressed_button(&kbrd_state);
 8000c92:	1cbb      	adds	r3, r7, #2
 8000c94:	1d3a      	adds	r2, r7, #4
 8000c96:	4694      	mov	ip, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fab7 	bl	800120c <parse_pressed_button.2>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	707b      	strb	r3, [r7, #1]

	  if (c != 0) {
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f0      	beq.n	8000c8a <main+0x7e>
		  if (c == '\r') {
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	d103      	bne.n	8000cb6 <main+0xaa>
			  transmitc("Enter");
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <main+0xe4>)
 8000cb0:	f7ff ff06 	bl	8000ac0 <transmitc>
 8000cb4:	e004      	b.n	8000cc0 <main+0xb4>
		  } else {
			  transmit((uint8_t*) &c, 1);
 8000cb6:	1c7b      	adds	r3, r7, #1
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fee4 	bl	8000a88 <transmit>
		  }
		  transmitc("\n\r");
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <main+0xe8>)
 8000cc2:	f7ff fefd 	bl	8000ac0 <transmitc>
		  handle_command(c);
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	4694      	mov	ip, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f8d9 	bl	8000e84 <handle_command.3>
  {
 8000cd2:	e7da      	b.n	8000c8a <main+0x7e>
 8000cd4:	20000120 	.word	0x20000120
 8000cd8:	20000928 	.word	0x20000928
 8000cdc:	2000112e 	.word	0x2000112e
 8000ce0:	08005988 	.word	0x08005988
 8000ce4:	20000030 	.word	0x20000030
 8000ce8:	20001144 	.word	0x20001144
 8000cec:	2000118c 	.word	0x2000118c
 8000cf0:	080059a0 	.word	0x080059a0
 8000cf4:	080059a8 	.word	0x080059a8

08000cf8 <print_mode_message.0>:
    void print_mode_message() {
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b0fb      	sub	sp, #492	; 0x1ec
 8000cfc:	af12      	add	r7, sp, #72	; 0x48
 8000cfe:	4664      	mov	r4, ip
 8000d00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000d08:	f8c3 c000 	str.w	ip, [r3]
  	  char mode_leds_str[9] = {0};
 8000d0c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	711a      	strb	r2, [r3, #4]
  	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d26:	e018      	b.n	8000d5a <print_mode_message.0+0x62>
  		  mode_leds_str[i] = leds_str(mode_leds[i]);
 8000d28:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <print_mode_message.0+0x180>)
 8000d2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d32:	46a4      	mov	ip, r4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff4b 	bl	8000bd0 <leds_str.1>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d42:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000d46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d4a:	4413      	add	r3, r2
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
  	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000d50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d54:	3301      	adds	r3, #1
 8000d56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d5a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d9e2      	bls.n	8000d28 <print_mode_message.0+0x30>
  	  char format[] = "Modes:\n\r1-%c%d\n\r2-%c%d\n\r3-%c%d\n\r4-%c%d\n\r5-%c%d\n\r6-%c%d\n\r7-%c%d\n\r8-%c%d\n\r9-%c%d\n\r> ";
 8000d62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d66:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000d6a:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <print_mode_message.0+0x184>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4611      	mov	r1, r2
 8000d70:	2353      	movs	r3, #83	; 0x53
 8000d72:	461a      	mov	r2, r3
 8000d74:	f004 f972 	bl	800505c <memcpy>
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000d78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d80:	781b      	ldrb	r3, [r3, #0]
  	  snprintf(buf, sizeof(buf), format,
 8000d82:	469c      	mov	ip, r3
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000d84:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <print_mode_message.0+0x188>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
  	  snprintf(buf, sizeof(buf), format,
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000d8a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d92:	785b      	ldrb	r3, [r3, #1]
  	  snprintf(buf, sizeof(buf), format,
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <print_mode_message.0+0x188>)
 8000d98:	885b      	ldrh	r3, [r3, #2]
  	  snprintf(buf, sizeof(buf), format,
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000d9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000da4:	789b      	ldrb	r3, [r3, #2]
  	  snprintf(buf, sizeof(buf), format,
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <print_mode_message.0+0x188>)
 8000daa:	889b      	ldrh	r3, [r3, #4]
  	  snprintf(buf, sizeof(buf), format,
 8000dac:	623b      	str	r3, [r7, #32]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000db2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000db6:	78db      	ldrb	r3, [r3, #3]
  	  snprintf(buf, sizeof(buf), format,
 8000db8:	61fb      	str	r3, [r7, #28]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <print_mode_message.0+0x188>)
 8000dbc:	88db      	ldrh	r3, [r3, #6]
  	  snprintf(buf, sizeof(buf), format,
 8000dbe:	61bb      	str	r3, [r7, #24]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dc0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000dc8:	791b      	ldrb	r3, [r3, #4]
  	  snprintf(buf, sizeof(buf), format,
 8000dca:	617b      	str	r3, [r7, #20]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <print_mode_message.0+0x188>)
 8000dce:	891b      	ldrh	r3, [r3, #8]
  	  snprintf(buf, sizeof(buf), format,
 8000dd0:	613b      	str	r3, [r7, #16]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dd2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000dda:	795b      	ldrb	r3, [r3, #5]
  	  snprintf(buf, sizeof(buf), format,
 8000ddc:	60fb      	str	r3, [r7, #12]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <print_mode_message.0+0x188>)
 8000de0:	895b      	ldrh	r3, [r3, #10]
  	  snprintf(buf, sizeof(buf), format,
 8000de2:	60bb      	str	r3, [r7, #8]
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000de4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000de8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000dec:	799b      	ldrb	r3, [r3, #6]
  	  snprintf(buf, sizeof(buf), format,
 8000dee:	607b      	str	r3, [r7, #4]
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <print_mode_message.0+0x188>)
 8000df2:	899b      	ldrh	r3, [r3, #12]
  	  snprintf(buf, sizeof(buf), format,
 8000df4:	461e      	mov	r6, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000df6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000dfe:	79db      	ldrb	r3, [r3, #7]
  	  snprintf(buf, sizeof(buf), format,
 8000e00:	461d      	mov	r5, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <print_mode_message.0+0x188>)
 8000e04:	89db      	ldrh	r3, [r3, #14]
  	  snprintf(buf, sizeof(buf), format,
 8000e06:	461c      	mov	r4, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000e08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e10:	7a1b      	ldrb	r3, [r3, #8]
  	  snprintf(buf, sizeof(buf), format,
 8000e12:	4619      	mov	r1, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <print_mode_message.0+0x188>)
 8000e16:	8a1b      	ldrh	r3, [r3, #16]
  	  snprintf(buf, sizeof(buf), format,
 8000e18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e1c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000e20:	9310      	str	r3, [sp, #64]	; 0x40
 8000e22:	910f      	str	r1, [sp, #60]	; 0x3c
 8000e24:	940e      	str	r4, [sp, #56]	; 0x38
 8000e26:	950d      	str	r5, [sp, #52]	; 0x34
 8000e28:	960c      	str	r6, [sp, #48]	; 0x30
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	910a      	str	r1, [sp, #40]	; 0x28
 8000e32:	68f9      	ldr	r1, [r7, #12]
 8000e34:	9109      	str	r1, [sp, #36]	; 0x24
 8000e36:	6939      	ldr	r1, [r7, #16]
 8000e38:	9108      	str	r1, [sp, #32]
 8000e3a:	6979      	ldr	r1, [r7, #20]
 8000e3c:	9107      	str	r1, [sp, #28]
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	9106      	str	r1, [sp, #24]
 8000e42:	69f9      	ldr	r1, [r7, #28]
 8000e44:	9105      	str	r1, [sp, #20]
 8000e46:	6a39      	ldr	r1, [r7, #32]
 8000e48:	9104      	str	r1, [sp, #16]
 8000e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e4c:	9103      	str	r1, [sp, #12]
 8000e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e50:	9102      	str	r1, [sp, #8]
 8000e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e54:	9101      	str	r1, [sp, #4]
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4663      	mov	r3, ip
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	f004 f912 	bl	8005088 <sniprintf>
  	  transmitc(buf);
 8000e64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe29 	bl	8000ac0 <transmitc>
    }
 8000e6e:	bf00      	nop
 8000e70:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	080059ac 	.word	0x080059ac
 8000e80:	2000001c 	.word	0x2000001c

08000e84 <handle_command.3>:
    void handle_command(char cmd) {
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b0a5      	sub	sp, #148	; 0x94
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	4664      	mov	r4, ip
 8000e90:	f8c7 c000 	str.w	ip, [r7]
  	  if (state == ST_MAIN) {
 8000e94:	4b95      	ldr	r3, [pc, #596]	; (80010ec <handle_command.3+0x268>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d133      	bne.n	8000f04 <handle_command.3+0x80>
  		  if (cmd >= '1' && cmd <= '9') {
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b30      	cmp	r3, #48	; 0x30
 8000ea0:	d914      	bls.n	8000ecc <handle_command.3+0x48>
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b39      	cmp	r3, #57	; 0x39
 8000ea6:	d811      	bhi.n	8000ecc <handle_command.3+0x48>
  			  cur_mode = (cmd - '1');
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	3b31      	subs	r3, #49	; 0x31
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <handle_command.3+0x26c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f107 000c 	add.w	r0, r7, #12
 8000eb8:	4a8e      	ldr	r2, [pc, #568]	; (80010f4 <handle_command.3+0x270>)
 8000eba:	2120      	movs	r1, #32
 8000ebc:	f004 f8e4 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fdfb 	bl	8000ac0 <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 8000eca:	e188      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '0') {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b30      	cmp	r3, #48	; 0x30
 8000ed0:	d106      	bne.n	8000ee0 <handle_command.3+0x5c>
  			  cur_mode = 100;
 8000ed2:	4b87      	ldr	r3, [pc, #540]	; (80010f0 <handle_command.3+0x26c>)
 8000ed4:	2264      	movs	r2, #100	; 0x64
 8000ed6:	601a      	str	r2, [r3, #0]
  			  transmitc("All LEDs off\n\r> ");
 8000ed8:	4887      	ldr	r0, [pc, #540]	; (80010f8 <handle_command.3+0x274>)
 8000eda:	f7ff fdf1 	bl	8000ac0 <transmitc>
    }
 8000ede:	e17e      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '\r') {
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b0d      	cmp	r3, #13
 8000ee4:	d10a      	bne.n	8000efc <handle_command.3+0x78>
  			  state = ST_EDIT_WAIT_MODE;
 8000ee6:	4b81      	ldr	r3, [pc, #516]	; (80010ec <handle_command.3+0x268>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	801a      	strh	r2, [r3, #0]
  			  edit_mode = -1;
 8000eec:	4b83      	ldr	r3, [pc, #524]	; (80010fc <handle_command.3+0x278>)
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef2:	601a      	str	r2, [r3, #0]
  			  transmitc("Enter edit mode\n\rChoose mode to edit [1-9]: ");
 8000ef4:	4882      	ldr	r0, [pc, #520]	; (8001100 <handle_command.3+0x27c>)
 8000ef6:	f7ff fde3 	bl	8000ac0 <transmitc>
    }
 8000efa:	e170      	b.n	80011de <handle_command.3+0x35a>
  			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8000efc:	4881      	ldr	r0, [pc, #516]	; (8001104 <handle_command.3+0x280>)
 8000efe:	f7ff fddf 	bl	8000ac0 <transmitc>
    }
 8000f02:	e16c      	b.n	80011de <handle_command.3+0x35a>
  	  } else if (state == ST_EDIT_WAIT_MODE) {
 8000f04:	4b79      	ldr	r3, [pc, #484]	; (80010ec <handle_command.3+0x268>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d147      	bne.n	8000f9c <handle_command.3+0x118>
  		  if (cmd >= '1' && cmd <= '9') {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b30      	cmp	r3, #48	; 0x30
 8000f10:	d916      	bls.n	8000f40 <handle_command.3+0xbc>
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b39      	cmp	r3, #57	; 0x39
 8000f16:	d813      	bhi.n	8000f40 <handle_command.3+0xbc>
  			  edit_mode = (cmd - '1');
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	3b31      	subs	r3, #49	; 0x31
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <handle_command.3+0x278>)
 8000f20:	601a      	str	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000f22:	4b76      	ldr	r3, [pc, #472]	; (80010fc <handle_command.3+0x278>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3331      	adds	r3, #49	; 0x31
 8000f28:	f107 000c 	add.w	r0, r7, #12
 8000f2c:	4a76      	ldr	r2, [pc, #472]	; (8001108 <handle_command.3+0x284>)
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	f004 f8aa 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fdc1 	bl	8000ac0 <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 8000f3e:	e14e      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '\r') {
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b0d      	cmp	r3, #13
 8000f44:	d112      	bne.n	8000f6c <handle_command.3+0xe8>
  			  if (edit_mode == -1) {
 8000f46:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <handle_command.3+0x278>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f4e:	d103      	bne.n	8000f58 <handle_command.3+0xd4>
  				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 8000f50:	486e      	ldr	r0, [pc, #440]	; (800110c <handle_command.3+0x288>)
 8000f52:	f7ff fdb5 	bl	8000ac0 <transmitc>
    }
 8000f56:	e142      	b.n	80011de <handle_command.3+0x35a>
  				  state = ST_EDIT_WAIT_LED;
 8000f58:	4b64      	ldr	r3, [pc, #400]	; (80010ec <handle_command.3+0x268>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	801a      	strh	r2, [r3, #0]
  				  edit_mode_led = 0;
 8000f5e:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <handle_command.3+0x28c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
  				  transmitc("Choose led for mode [g,y,r]: ");
 8000f64:	486b      	ldr	r0, [pc, #428]	; (8001114 <handle_command.3+0x290>)
 8000f66:	f7ff fdab 	bl	8000ac0 <transmitc>
    }
 8000f6a:	e138      	b.n	80011de <handle_command.3+0x35a>
  			  if (edit_mode == -1) {
 8000f6c:	4b63      	ldr	r3, [pc, #396]	; (80010fc <handle_command.3+0x278>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d103      	bne.n	8000f7e <handle_command.3+0xfa>
  				  transmitc("Unknown. Choose mode to edit [1-9]: ");
 8000f76:	4868      	ldr	r0, [pc, #416]	; (8001118 <handle_command.3+0x294>)
 8000f78:	f7ff fda2 	bl	8000ac0 <transmitc>
    }
 8000f7c:	e12f      	b.n	80011de <handle_command.3+0x35a>
  				  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <handle_command.3+0x278>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3331      	adds	r3, #49	; 0x31
 8000f84:	f107 000c 	add.w	r0, r7, #12
 8000f88:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <handle_command.3+0x284>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	f004 f87c 	bl	8005088 <sniprintf>
  				  transmitc(buf);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fd93 	bl	8000ac0 <transmitc>
    }
 8000f9a:	e120      	b.n	80011de <handle_command.3+0x35a>
  	  } else if (state == ST_EDIT_WAIT_LED) {
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <handle_command.3+0x268>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d157      	bne.n	8001054 <handle_command.3+0x1d0>
  		  if (cmd == 'g') {
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b67      	cmp	r3, #103	; 0x67
 8000fa8:	d106      	bne.n	8000fb8 <handle_command.3+0x134>
  			  edit_mode_led = 0x1;
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <handle_command.3+0x28c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	801a      	strh	r2, [r3, #0]
  			  transmitc("Green led. Enter or choose another led [g,y,r]: ");
 8000fb0:	485a      	ldr	r0, [pc, #360]	; (800111c <handle_command.3+0x298>)
 8000fb2:	f7ff fd85 	bl	8000ac0 <transmitc>
    }
 8000fb6:	e112      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == 'y') {
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b79      	cmp	r3, #121	; 0x79
 8000fbc:	d106      	bne.n	8000fcc <handle_command.3+0x148>
  			  edit_mode_led = 0x2;
 8000fbe:	4b54      	ldr	r3, [pc, #336]	; (8001110 <handle_command.3+0x28c>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	801a      	strh	r2, [r3, #0]
  			  transmitc("Yellow led. Enter or choose another led [g,y,r]: ");
 8000fc4:	4856      	ldr	r0, [pc, #344]	; (8001120 <handle_command.3+0x29c>)
 8000fc6:	f7ff fd7b 	bl	8000ac0 <transmitc>
    }
 8000fca:	e108      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == 'r') {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b72      	cmp	r3, #114	; 0x72
 8000fd0:	d106      	bne.n	8000fe0 <handle_command.3+0x15c>
  			  edit_mode_led = 0x4;
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <handle_command.3+0x28c>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	801a      	strh	r2, [r3, #0]
  			  transmitc("Red led. Enter or choose another led [g,y,r]: ");
 8000fd8:	4852      	ldr	r0, [pc, #328]	; (8001124 <handle_command.3+0x2a0>)
 8000fda:	f7ff fd71 	bl	8000ac0 <transmitc>
    }
 8000fde:	e0fe      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '\r') {
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b0d      	cmp	r3, #13
 8000fe4:	d111      	bne.n	800100a <handle_command.3+0x186>
  			  if (edit_mode_led == 0) {
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <handle_command.3+0x28c>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <handle_command.3+0x172>
  				  transmitc("No led. Choose led for mode [g,y,r]: ");
 8000fee:	484e      	ldr	r0, [pc, #312]	; (8001128 <handle_command.3+0x2a4>)
 8000ff0:	f7ff fd66 	bl	8000ac0 <transmitc>
    }
 8000ff4:	e0f3      	b.n	80011de <handle_command.3+0x35a>
  				  state = ST_EDIT_WAIT_BRIGHT;
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <handle_command.3+0x268>)
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	801a      	strh	r2, [r3, #0]
  				  edit_mode_brightness = 40;
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <handle_command.3+0x2a8>)
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	801a      	strh	r2, [r3, #0]
  				  transmitc("40%. Enter or choose another brightness: ");
 8001002:	484b      	ldr	r0, [pc, #300]	; (8001130 <handle_command.3+0x2ac>)
 8001004:	f7ff fd5c 	bl	8000ac0 <transmitc>
    }
 8001008:	e0e9      	b.n	80011de <handle_command.3+0x35a>
  			  if (edit_mode_led == 0) {
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <handle_command.3+0x28c>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <handle_command.3+0x196>
  				  transmitc("Unknown. Choose led for mode [g,y,r]: ");
 8001012:	4848      	ldr	r0, [pc, #288]	; (8001134 <handle_command.3+0x2b0>)
 8001014:	f7ff fd54 	bl	8000ac0 <transmitc>
    }
 8001018:	e0e1      	b.n	80011de <handle_command.3+0x35a>
  				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <handle_command.3+0x28c>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d007      	beq.n	8001032 <handle_command.3+0x1ae>
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <handle_command.3+0x28c>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d101      	bne.n	800102e <handle_command.3+0x1aa>
 800102a:	4b43      	ldr	r3, [pc, #268]	; (8001138 <handle_command.3+0x2b4>)
 800102c:	e002      	b.n	8001034 <handle_command.3+0x1b0>
 800102e:	4b43      	ldr	r3, [pc, #268]	; (800113c <handle_command.3+0x2b8>)
 8001030:	e000      	b.n	8001034 <handle_command.3+0x1b0>
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <handle_command.3+0x2bc>)
 8001034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  				  snprintf(buf, sizeof(buf), "%s led. Enter or choose another led [g,y,r]: ", led);
 8001038:	f107 000c 	add.w	r0, r7, #12
 800103c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <handle_command.3+0x2c0>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	f004 f820 	bl	8005088 <sniprintf>
  				  transmitc(buf);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fd37 	bl	8000ac0 <transmitc>
    }
 8001052:	e0c4      	b.n	80011de <handle_command.3+0x35a>
  	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <handle_command.3+0x268>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	f040 80c0 	bne.w	80011de <handle_command.3+0x35a>
  		  if (cmd >= '1' && cmd <= '9') {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b30      	cmp	r3, #48	; 0x30
 8001062:	d91a      	bls.n	800109a <handle_command.3+0x216>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b39      	cmp	r3, #57	; 0x39
 8001068:	d817      	bhi.n	800109a <handle_command.3+0x216>
  			  edit_mode_brightness = (cmd - '0') * 10;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	3b30      	subs	r3, #48	; 0x30
 800106e:	b29b      	uxth	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <handle_command.3+0x2a8>)
 800107c:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <handle_command.3+0x2a8>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	f107 000c 	add.w	r0, r7, #12
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <handle_command.3+0x2c4>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	f003 fffd 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fd14 	bl	8000ac0 <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 8001098:	e0a1      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '0') {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b30      	cmp	r3, #48	; 0x30
 800109e:	d106      	bne.n	80010ae <handle_command.3+0x22a>
  			  edit_mode_brightness = 100;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <handle_command.3+0x2a8>)
 80010a2:	2264      	movs	r2, #100	; 0x64
 80010a4:	801a      	strh	r2, [r3, #0]
  			  transmitc("100%. Enter or choose another: ");
 80010a6:	4829      	ldr	r0, [pc, #164]	; (800114c <handle_command.3+0x2c8>)
 80010a8:	f7ff fd0a 	bl	8000ac0 <transmitc>
    }
 80010ac:	e097      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '+') {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b2b      	cmp	r3, #43	; 0x2b
 80010b2:	d14d      	bne.n	8001150 <handle_command.3+0x2cc>
  			  edit_mode_brightness += 10;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <handle_command.3+0x2a8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	330a      	adds	r3, #10
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <handle_command.3+0x2a8>)
 80010be:	801a      	strh	r2, [r3, #0]
  			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <handle_command.3+0x2a8>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d902      	bls.n	80010ce <handle_command.3+0x24a>
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <handle_command.3+0x2a8>)
 80010ca:	2264      	movs	r2, #100	; 0x64
 80010cc:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <handle_command.3+0x2a8>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	f107 000c 	add.w	r0, r7, #12
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <handle_command.3+0x2c4>)
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	f003 ffd5 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fcec 	bl	8000ac0 <transmitc>
    }
 80010e8:	e079      	b.n	80011de <handle_command.3+0x35a>
 80010ea:	bf00      	nop
 80010ec:	20001130 	.word	0x20001130
 80010f0:	20000030 	.word	0x20000030
 80010f4:	08005a00 	.word	0x08005a00
 80010f8:	08005a18 	.word	0x08005a18
 80010fc:	20001134 	.word	0x20001134
 8001100:	08005a2c 	.word	0x08005a2c
 8001104:	08005a5c 	.word	0x08005a5c
 8001108:	08005a8c 	.word	0x08005a8c
 800110c:	08005ac0 	.word	0x08005ac0
 8001110:	20001138 	.word	0x20001138
 8001114:	08005af0 	.word	0x08005af0
 8001118:	08005b10 	.word	0x08005b10
 800111c:	08005b38 	.word	0x08005b38
 8001120:	08005b6c 	.word	0x08005b6c
 8001124:	08005ba0 	.word	0x08005ba0
 8001128:	08005bd0 	.word	0x08005bd0
 800112c:	2000113a 	.word	0x2000113a
 8001130:	08005bf8 	.word	0x08005bf8
 8001134:	08005c24 	.word	0x08005c24
 8001138:	08005c4c 	.word	0x08005c4c
 800113c:	08005c54 	.word	0x08005c54
 8001140:	08005c58 	.word	0x08005c58
 8001144:	08005c60 	.word	0x08005c60
 8001148:	08005c90 	.word	0x08005c90
 800114c:	08005cb0 	.word	0x08005cb0
  		  } else if (cmd == '-') {
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b2d      	cmp	r3, #45	; 0x2d
 8001154:	d11a      	bne.n	800118c <handle_command.3+0x308>
  			  edit_mode_brightness -= 10;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <handle_command.3+0x364>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	3b0a      	subs	r3, #10
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <handle_command.3+0x364>)
 8001160:	801a      	strh	r2, [r3, #0]
  			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <handle_command.3+0x364>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2b09      	cmp	r3, #9
 8001168:	d802      	bhi.n	8001170 <handle_command.3+0x2ec>
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <handle_command.3+0x364>)
 800116c:	220a      	movs	r2, #10
 800116e:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <handle_command.3+0x364>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	f107 000c 	add.w	r0, r7, #12
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <handle_command.3+0x368>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	f003 ff84 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fc9b 	bl	8000ac0 <transmitc>
    }
 800118a:	e028      	b.n	80011de <handle_command.3+0x35a>
  		  } else if (cmd == '\r') {
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b0d      	cmp	r3, #13
 8001190:	d117      	bne.n	80011c2 <handle_command.3+0x33e>
  			  state = ST_MAIN;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <handle_command.3+0x36c>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
  			  mode_leds[edit_mode] = edit_mode_led;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <handle_command.3+0x370>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <handle_command.3+0x374>)
 800119e:	8811      	ldrh	r1, [r2, #0]
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <handle_command.3+0x378>)
 80011a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  			  mode_brightness[edit_mode] = edit_mode_brightness;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <handle_command.3+0x370>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <handle_command.3+0x364>)
 80011ac:	8811      	ldrh	r1, [r2, #0]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <handle_command.3+0x37c>)
 80011b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  			  transmitc("Exit edit mode");
 80011b4:	4813      	ldr	r0, [pc, #76]	; (8001204 <handle_command.3+0x380>)
 80011b6:	f7ff fc83 	bl	8000ac0 <transmitc>
  			  print_mode_message();
 80011ba:	46a4      	mov	ip, r4
 80011bc:	f7ff fd9c 	bl	8000cf8 <print_mode_message.0>
    }
 80011c0:	e00d      	b.n	80011de <handle_command.3+0x35a>
  			  snprintf(buf, sizeof(buf), "Unknown. %d%%. Enter or choose another: ", edit_mode_brightness);
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <handle_command.3+0x364>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	f107 000c 	add.w	r0, r7, #12
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <handle_command.3+0x384>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	f003 ff5b 	bl	8005088 <sniprintf>
  			  transmitc(buf);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fc72 	bl	8000ac0 <transmitc>
    }
 80011dc:	e7ff      	b.n	80011de <handle_command.3+0x35a>
 80011de:	bf00      	nop
 80011e0:	3794      	adds	r7, #148	; 0x94
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000113a 	.word	0x2000113a
 80011ec:	08005c90 	.word	0x08005c90
 80011f0:	20001130 	.word	0x20001130
 80011f4:	20001134 	.word	0x20001134
 80011f8:	20001138 	.word	0x20001138
 80011fc:	20000008 	.word	0x20000008
 8001200:	2000001c 	.word	0x2000001c
 8001204:	08005cd0 	.word	0x08005cd0
 8001208:	08005ce0 	.word	0x08005ce0

0800120c <parse_pressed_button.2>:
    char parse_pressed_button(uint16_t* keyboard) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	f8c7 c000 	str.w	ip, [r7]
    	if (state == ST_MAIN) {
 8001218:	4baa      	ldr	r3, [pc, #680]	; (80014c4 <parse_pressed_button.2+0x2b8>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d171      	bne.n	8001304 <parse_pressed_button.2+0xf8>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fb52 	bl	80008cc <KBRD_IsSet>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <parse_pressed_button.2+0x26>
 800122e:	2331      	movs	r3, #49	; 0x31
 8001230:	e1cd      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 8001232:	2102      	movs	r1, #2
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fb49 	bl	80008cc <KBRD_IsSet>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <parse_pressed_button.2+0x38>
 8001240:	2334      	movs	r3, #52	; 0x34
 8001242:	e1c4      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 8001244:	2104      	movs	r1, #4
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fb40 	bl	80008cc <KBRD_IsSet>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <parse_pressed_button.2+0x4a>
 8001252:	2337      	movs	r3, #55	; 0x37
 8001254:	e1bb      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 8001256:	2108      	movs	r1, #8
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fb37 	bl	80008cc <KBRD_IsSet>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <parse_pressed_button.2+0x5c>
 8001264:	2300      	movs	r3, #0
 8001266:	e1b2      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 8001268:	2110      	movs	r1, #16
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fb2e 	bl	80008cc <KBRD_IsSet>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <parse_pressed_button.2+0x6e>
 8001276:	2332      	movs	r3, #50	; 0x32
 8001278:	e1a9      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 800127a:	2120      	movs	r1, #32
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fb25 	bl	80008cc <KBRD_IsSet>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <parse_pressed_button.2+0x80>
 8001288:	2335      	movs	r3, #53	; 0x35
 800128a:	e1a0      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fb1c 	bl	80008cc <KBRD_IsSet>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <parse_pressed_button.2+0x92>
 800129a:	2338      	movs	r3, #56	; 0x38
 800129c:	e197      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_8)) return '0';
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fb13 	bl	80008cc <KBRD_IsSet>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <parse_pressed_button.2+0xa4>
 80012ac:	2330      	movs	r3, #48	; 0x30
 80012ae:	e18e      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 80012b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fb09 	bl	80008cc <KBRD_IsSet>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <parse_pressed_button.2+0xb8>
 80012c0:	2333      	movs	r3, #51	; 0x33
 80012c2:	e184      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff faff 	bl	80008cc <KBRD_IsSet>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <parse_pressed_button.2+0xcc>
 80012d4:	2336      	movs	r3, #54	; 0x36
 80012d6:	e17a      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 80012d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff faf5 	bl	80008cc <KBRD_IsSet>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <parse_pressed_button.2+0xe0>
 80012e8:	2339      	movs	r3, #57	; 0x39
 80012ea:	e170      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 80012ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff faeb 	bl	80008cc <KBRD_IsSet>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <parse_pressed_button.2+0xf4>
 80012fc:	230d      	movs	r3, #13
 80012fe:	e166      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			return 0;
 8001300:	2300      	movs	r3, #0
 8001302:	e164      	b.n	80015ce <parse_pressed_button.2+0x3c2>
		} else if (state == ST_EDIT_WAIT_MODE) {
 8001304:	4b6f      	ldr	r3, [pc, #444]	; (80014c4 <parse_pressed_button.2+0x2b8>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d171      	bne.n	80013f0 <parse_pressed_button.2+0x1e4>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 800130c:	2101      	movs	r1, #1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fadc 	bl	80008cc <KBRD_IsSet>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <parse_pressed_button.2+0x112>
 800131a:	2331      	movs	r3, #49	; 0x31
 800131c:	e157      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 800131e:	2102      	movs	r1, #2
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fad3 	bl	80008cc <KBRD_IsSet>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <parse_pressed_button.2+0x124>
 800132c:	2334      	movs	r3, #52	; 0x34
 800132e:	e14e      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 8001330:	2104      	movs	r1, #4
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff faca 	bl	80008cc <KBRD_IsSet>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <parse_pressed_button.2+0x136>
 800133e:	2337      	movs	r3, #55	; 0x37
 8001340:	e145      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 8001342:	2108      	movs	r1, #8
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fac1 	bl	80008cc <KBRD_IsSet>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <parse_pressed_button.2+0x148>
 8001350:	2300      	movs	r3, #0
 8001352:	e13c      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 8001354:	2110      	movs	r1, #16
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fab8 	bl	80008cc <KBRD_IsSet>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <parse_pressed_button.2+0x15a>
 8001362:	2332      	movs	r3, #50	; 0x32
 8001364:	e133      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 8001366:	2120      	movs	r1, #32
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff faaf 	bl	80008cc <KBRD_IsSet>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <parse_pressed_button.2+0x16c>
 8001374:	2335      	movs	r3, #53	; 0x35
 8001376:	e12a      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff faa6 	bl	80008cc <KBRD_IsSet>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <parse_pressed_button.2+0x17e>
 8001386:	2338      	movs	r3, #56	; 0x38
 8001388:	e121      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_8)) return 0;
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fa9d 	bl	80008cc <KBRD_IsSet>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <parse_pressed_button.2+0x190>
 8001398:	2300      	movs	r3, #0
 800139a:	e118      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 800139c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fa93 	bl	80008cc <KBRD_IsSet>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <parse_pressed_button.2+0x1a4>
 80013ac:	2333      	movs	r3, #51	; 0x33
 80013ae:	e10e      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fa89 	bl	80008cc <KBRD_IsSet>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <parse_pressed_button.2+0x1b8>
 80013c0:	2336      	movs	r3, #54	; 0x36
 80013c2:	e104      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fa7f 	bl	80008cc <KBRD_IsSet>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <parse_pressed_button.2+0x1cc>
 80013d4:	2339      	movs	r3, #57	; 0x39
 80013d6:	e0fa      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 80013d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fa75 	bl	80008cc <KBRD_IsSet>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <parse_pressed_button.2+0x1e0>
 80013e8:	230d      	movs	r3, #13
 80013ea:	e0f0      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			return 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e0ee      	b.n	80015ce <parse_pressed_button.2+0x3c2>
		} else if (state == ST_EDIT_WAIT_LED) {
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <parse_pressed_button.2+0x2b8>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d173      	bne.n	80014e0 <parse_pressed_button.2+0x2d4>
			if (KBRD_IsSet(keyboard, BTN_1)) return 'g';
 80013f8:	2101      	movs	r1, #1
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fa66 	bl	80008cc <KBRD_IsSet>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <parse_pressed_button.2+0x1fe>
 8001406:	2367      	movs	r3, #103	; 0x67
 8001408:	e0e1      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_2)) return 0;
 800140a:	2102      	movs	r1, #2
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fa5d 	bl	80008cc <KBRD_IsSet>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <parse_pressed_button.2+0x210>
 8001418:	2300      	movs	r3, #0
 800141a:	e0d8      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_3)) return 0;
 800141c:	2104      	movs	r1, #4
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fa54 	bl	80008cc <KBRD_IsSet>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <parse_pressed_button.2+0x222>
 800142a:	2300      	movs	r3, #0
 800142c:	e0cf      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 800142e:	2108      	movs	r1, #8
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fa4b 	bl	80008cc <KBRD_IsSet>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <parse_pressed_button.2+0x234>
 800143c:	2300      	movs	r3, #0
 800143e:	e0c6      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_5)) return 'y';
 8001440:	2110      	movs	r1, #16
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fa42 	bl	80008cc <KBRD_IsSet>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <parse_pressed_button.2+0x246>
 800144e:	2379      	movs	r3, #121	; 0x79
 8001450:	e0bd      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_6)) return 0;
 8001452:	2120      	movs	r1, #32
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fa39 	bl	80008cc <KBRD_IsSet>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <parse_pressed_button.2+0x258>
 8001460:	2300      	movs	r3, #0
 8001462:	e0b4      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_7)) return 0;
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fa30 	bl	80008cc <KBRD_IsSet>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <parse_pressed_button.2+0x26a>
 8001472:	2300      	movs	r3, #0
 8001474:	e0ab      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_8)) return 0;
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fa27 	bl	80008cc <KBRD_IsSet>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <parse_pressed_button.2+0x27c>
 8001484:	2300      	movs	r3, #0
 8001486:	e0a2      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_9)) return 'r';
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fa1d 	bl	80008cc <KBRD_IsSet>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <parse_pressed_button.2+0x290>
 8001498:	2372      	movs	r3, #114	; 0x72
 800149a:	e098      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_10)) return 0;
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fa13 	bl	80008cc <KBRD_IsSet>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <parse_pressed_button.2+0x2a4>
 80014ac:	2300      	movs	r3, #0
 80014ae:	e08e      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_11)) return 0;
 80014b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fa09 	bl	80008cc <KBRD_IsSet>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <parse_pressed_button.2+0x2bc>
 80014c0:	2300      	movs	r3, #0
 80014c2:	e084      	b.n	80015ce <parse_pressed_button.2+0x3c2>
 80014c4:	20001130 	.word	0x20001130
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff f9fd 	bl	80008cc <KBRD_IsSet>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <parse_pressed_button.2+0x2d0>
 80014d8:	230d      	movs	r3, #13
 80014da:	e078      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e076      	b.n	80015ce <parse_pressed_button.2+0x3c2>
		} else if (state == ST_EDIT_WAIT_BRIGHT) {
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <parse_pressed_button.2+0x3cc>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d171      	bne.n	80015cc <parse_pressed_button.2+0x3c0>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 80014e8:	2101      	movs	r1, #1
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff f9ee 	bl	80008cc <KBRD_IsSet>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <parse_pressed_button.2+0x2ee>
 80014f6:	2331      	movs	r3, #49	; 0x31
 80014f8:	e069      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 80014fa:	2102      	movs	r1, #2
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f9e5 	bl	80008cc <KBRD_IsSet>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <parse_pressed_button.2+0x300>
 8001508:	2334      	movs	r3, #52	; 0x34
 800150a:	e060      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 800150c:	2104      	movs	r1, #4
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff f9dc 	bl	80008cc <KBRD_IsSet>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <parse_pressed_button.2+0x312>
 800151a:	2337      	movs	r3, #55	; 0x37
 800151c:	e057      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_4)) return '-';
 800151e:	2108      	movs	r1, #8
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff f9d3 	bl	80008cc <KBRD_IsSet>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <parse_pressed_button.2+0x324>
 800152c:	232d      	movs	r3, #45	; 0x2d
 800152e:	e04e      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 8001530:	2110      	movs	r1, #16
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff f9ca 	bl	80008cc <KBRD_IsSet>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <parse_pressed_button.2+0x336>
 800153e:	2332      	movs	r3, #50	; 0x32
 8001540:	e045      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 8001542:	2120      	movs	r1, #32
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff f9c1 	bl	80008cc <KBRD_IsSet>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <parse_pressed_button.2+0x348>
 8001550:	2335      	movs	r3, #53	; 0x35
 8001552:	e03c      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff f9b8 	bl	80008cc <KBRD_IsSet>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <parse_pressed_button.2+0x35a>
 8001562:	2338      	movs	r3, #56	; 0x38
 8001564:	e033      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_8)) return '+';
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff f9af 	bl	80008cc <KBRD_IsSet>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <parse_pressed_button.2+0x36c>
 8001574:	232b      	movs	r3, #43	; 0x2b
 8001576:	e02a      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 8001578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff f9a5 	bl	80008cc <KBRD_IsSet>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <parse_pressed_button.2+0x380>
 8001588:	2333      	movs	r3, #51	; 0x33
 800158a:	e020      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff f99b 	bl	80008cc <KBRD_IsSet>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <parse_pressed_button.2+0x394>
 800159c:	2336      	movs	r3, #54	; 0x36
 800159e:	e016      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 80015a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f991 	bl	80008cc <KBRD_IsSet>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <parse_pressed_button.2+0x3a8>
 80015b0:	2339      	movs	r3, #57	; 0x39
 80015b2:	e00c      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff f987 	bl	80008cc <KBRD_IsSet>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <parse_pressed_button.2+0x3bc>
 80015c4:	230d      	movs	r3, #13
 80015c6:	e002      	b.n	80015ce <parse_pressed_button.2+0x3c2>
			return 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <parse_pressed_button.2+0x3c2>
    	return 0;
 80015cc:	2300      	movs	r3, #0
    }
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20001130 	.word	0x20001130

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fd44 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <SystemClock_Config+0xb8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <SystemClock_Config+0xb8>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <SystemClock_Config+0xb8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <SystemClock_Config+0xbc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <SystemClock_Config+0xbc>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <SystemClock_Config+0xbc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001644:	2310      	movs	r3, #16
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f001 feab 	bl	80033ac <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800165c:	f000 f81e 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f002 f90e 	bl	800389c <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001686:	f000 f809 	bl	800169c <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <PCA9538_Read_Register>:
 *      Author: andryssssss
 */

#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	4603      	mov	r3, r0
 80016b0:	603a      	str	r2, [r7, #0]
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	460b      	mov	r3, r1
 80016b6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	b299      	uxth	r1, r3
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2301      	movs	r3, #1
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <PCA9538_Read_Register+0x40>)
 80016d4:	f001 f86e 	bl	80027b4 <HAL_I2C_Mem_Read>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't read from PCA9538 register\n");
	}
	return status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000c4 	.word	0x200000c4

080016ec <PCA9538_Read_Inputs>:

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffd2 	bl	80016a8 <PCA9538_Read_Register>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't read from PCA9538 input port\n");
	}
	return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <PCA9538_Write_Register>:
	}
	return status;
}


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af04      	add	r7, sp, #16
 800171a:	4603      	mov	r3, r0
 800171c:	603a      	str	r2, [r7, #0]
 800171e:	80fb      	strh	r3, [r7, #6]
 8001720:	460b      	mov	r3, r1
 8001722:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	b299      	uxth	r1, r3
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2301      	movs	r3, #1
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <PCA9538_Write_Register+0x40>)
 8001740:	f000 ff3e 	bl	80025c0 <HAL_I2C_Mem_Write>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't write to PCA9538 register\n");
	}
	return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000c4 	.word	0x200000c4

08001758 <PCA9538_SetDefaultConfig>:

static uint8_t OUTPUT_PORT_DEFAULT = 0xFF;
static uint8_t POLARITY_INVERSION_DEFAULT = 0x00;
static uint8_t CONFIG_DEFAULT = 0xF0;

HAL_StatusTypeDef PCA9538_SetDefaultConfig(uint16_t addr) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = PCA9538_Write_Register(addr, OUTPUT_PORT, &OUTPUT_PORT_DEFAULT);
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <PCA9538_SetDefaultConfig+0x58>)
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ffd3 	bl	8001714 <PCA9538_Write_Register>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <PCA9538_SetDefaultConfig+0x24>
		// UART_Transmit("Can't write to PCA9538 output port\n");
		return status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	e015      	b.n	80017a8 <PCA9538_SetDefaultConfig+0x50>
	}

	status = PCA9538_Write_Register(addr, POLARITY_INVERSION, &POLARITY_INVERSION_DEFAULT);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <PCA9538_SetDefaultConfig+0x5c>)
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffc6 	bl	8001714 <PCA9538_Write_Register>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <PCA9538_SetDefaultConfig+0x3e>
		// UART_Transmit("Can't write to PCA9538 polarity inversion\n");
		return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	e008      	b.n	80017a8 <PCA9538_SetDefaultConfig+0x50>
	}

	status = PCA9538_Write_Register(addr, CONFIG, &CONFIG_DEFAULT);
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <PCA9538_SetDefaultConfig+0x60>)
 800179a:	2103      	movs	r1, #3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ffb9 	bl	8001714 <PCA9538_Write_Register>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
		// UART_Transmit("Can't write to PCA9538 config\n");
	}
	return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000034 	.word	0x20000034
 80017b4:	2000113c 	.word	0x2000113c
 80017b8:	20000035 	.word	0x20000035

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_MspInit+0x4c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler+0x4>

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 fa6c 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM6_DAC_IRQHandler+0x10>)
 8001866:	f002 fbd1 	bl	800400c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000118c 	.word	0x2000118c

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f003 fbb0 	bl	8005008 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20030000 	.word	0x20030000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	20001140 	.word	0x20001140
 80018dc:	20001230 	.word	0x20001230

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <MX_TIM4_Init+0xd8>)
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <MX_TIM4_Init+0xdc>)
 800192a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_TIM4_Init+0xd8>)
 800192e:	220f      	movs	r2, #15
 8001930:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_TIM4_Init+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <MX_TIM4_Init+0xd8>)
 800193a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_TIM4_Init+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <MX_TIM4_Init+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800194c:	4823      	ldr	r0, [pc, #140]	; (80019dc <MX_TIM4_Init+0xd8>)
 800194e:	f002 fa45 	bl	8003ddc <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001958:	f7ff fea0 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4619      	mov	r1, r3
 800196a:	481c      	ldr	r0, [pc, #112]	; (80019dc <MX_TIM4_Init+0xd8>)
 800196c:	f002 ffb6 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001976:	f7ff fe91 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197a:	2360      	movs	r3, #96	; 0x60
 800197c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4812      	ldr	r0, [pc, #72]	; (80019dc <MX_TIM4_Init+0xd8>)
 8001992:	f002 fc43 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800199c:	f7ff fe7e 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2208      	movs	r2, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_TIM4_Init+0xd8>)
 80019a8:	f002 fc38 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019b2:	f7ff fe73 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	220c      	movs	r2, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_TIM4_Init+0xd8>)
 80019be:	f002 fc2d 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80019c8:	f7ff fe68 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <MX_TIM4_Init+0xd8>)
 80019ce:	f000 f889 	bl	8001ae4 <HAL_TIM_MspPostInit>

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20001144 	.word	0x20001144
 80019e0:	40000800 	.word	0x40000800

080019e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <MX_TIM6_Init+0x68>)
 80019f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a14:	f002 f922 	bl	8003c5c <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a1e:	f7ff fe3d 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a30:	f002 ff54 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a3a:	f7ff fe2f 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000118c 	.word	0x2000118c
 8001a4c:	40001000 	.word	0x40001000

08001a50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10d      	bne.n	8001a7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40000800 	.word	0x40000800
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_TIM_Base_MspInit+0x48>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d115      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2036      	movs	r0, #54	; 0x36
 8001ac8:	f000 fa53 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001acc:	2036      	movs	r0, #54	; 0x36
 8001ace:	f000 fa6c 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40001000 	.word	0x40001000
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_TIM_MspPostInit+0x68>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d11e      	bne.n	8001b44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_TIM_MspPostInit+0x6c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_TIM_MspPostInit+0x6c>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_TIM_MspPostInit+0x6c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_TIM_MspPostInit+0x70>)
 8001b40:	f000 fa4e 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART6_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b90:	f002 ff34 	bl	80049fc <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f7ff fd7f 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200011d4 	.word	0x200011d4
 8001ba8:	40011400 	.word	0x40011400

08001bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c16:	2308      	movs	r3, #8
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x8c>)
 8001c22:	f000 f9dd 	bl	8001fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800

08001c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c42:	490e      	ldr	r1, [pc, #56]	; (8001c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c58:	4c0b      	ldr	r4, [pc, #44]	; (8001c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c66:	f7ff fe3b 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f003 f9d3 	bl	8005014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7fe ffcd 	bl	8000c0c <main>
  bx  lr    
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001c80:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8001c84:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001c88:	2000122c 	.word	0x2000122c

08001c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_Init+0x40>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_Init+0x40>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_Init+0x40>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f94f 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fd7a 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f967 	bl	8001fc6 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d10:	f000 f92f 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000038 	.word	0x20000038
 8001d2c:	20000040 	.word	0x20000040
 8001d30:	2000003c 	.word	0x2000003c

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000040 	.word	0x20000040
 8001d58:	20001218 	.word	0x20001218

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20001218 	.word	0x20001218

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000040 	.word	0x20000040

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f3c:	f7ff ff8e 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff29 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff3e 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff8e 	bl	8001eb0 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5d 	bl	8001e5c <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff31 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffa2 	bl	8001f18 <SysTick_Config>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e177      	b.n	80022ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 8166 	bne.w	80022e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	2b02      	cmp	r3, #2
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d017      	beq.n	80020d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d123      	bne.n	8002124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80c0 	beq.w	80022e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_GPIO_Init+0x324>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a61      	ldr	r2, [pc, #388]	; (8002308 <HAL_GPIO_Init+0x328>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d037      	beq.n	800221e <HAL_GPIO_Init+0x23e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_GPIO_Init+0x23a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_GPIO_Init+0x334>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <HAL_GPIO_Init+0x236>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_GPIO_Init+0x338>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d025      	beq.n	8002212 <HAL_GPIO_Init+0x232>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a54      	ldr	r2, [pc, #336]	; (800231c <HAL_GPIO_Init+0x33c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a53      	ldr	r2, [pc, #332]	; (8002320 <HAL_GPIO_Init+0x340>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x22a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x344>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x348>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x34c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x350>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x21a>
 80021f6:	2309      	movs	r3, #9
 80021f8:	e012      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fa:	230a      	movs	r3, #10
 80021fc:	e010      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fe:	2308      	movs	r3, #8
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002202:	2307      	movs	r3, #7
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	; (8002308 <HAL_GPIO_Init+0x328>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_GPIO_Init+0x354>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae84 	bls.w	8001ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40022000 	.word	0x40022000
 8002330:	40022400 	.word	0x40022400
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e12b      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fa50 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800239c:	f001 fc36 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80023a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a81      	ldr	r2, [pc, #516]	; (80025ac <HAL_I2C_Init+0x274>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d807      	bhi.n	80023bc <HAL_I2C_Init+0x84>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a80      	ldr	r2, [pc, #512]	; (80025b0 <HAL_I2C_Init+0x278>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e006      	b.n	80023ca <HAL_I2C_Init+0x92>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a7d      	ldr	r2, [pc, #500]	; (80025b4 <HAL_I2C_Init+0x27c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0e7      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <HAL_I2C_Init+0x280>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9b      	lsrs	r3, r3, #18
 80023dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_I2C_Init+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d802      	bhi.n	800240c <HAL_I2C_Init+0xd4>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	e009      	b.n	8002420 <HAL_I2C_Init+0xe8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_I2C_Init+0x284>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	3301      	adds	r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	495c      	ldr	r1, [pc, #368]	; (80025ac <HAL_I2C_Init+0x274>)
 800243c:	428b      	cmp	r3, r1
 800243e:	d819      	bhi.n	8002474 <HAL_I2C_Init+0x13c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fbb1 f3f3 	udiv	r3, r1, r3
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002454:	400b      	ands	r3, r1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_I2C_Init+0x138>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e59      	subs	r1, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	e051      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002470:	2304      	movs	r3, #4
 8002472:	e04f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_I2C_Init+0x168>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e012      	b.n	80024c6 <HAL_I2C_Init+0x18e>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Init+0x196>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e022      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10e      	bne.n	80024f4 <HAL_I2C_Init+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e58      	subs	r0, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	e00f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6809      	ldr	r1, [r1, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6911      	ldr	r1, [r2, #16]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	000186a0 	.word	0x000186a0
 80025b0:	001e847f 	.word	0x001e847f
 80025b4:	003d08ff 	.word	0x003d08ff
 80025b8:	431bde83 	.word	0x431bde83
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025da:	f7ff fbbf 	bl	8001d5c <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	f040 80d9 	bne.w	80027a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	496d      	ldr	r1, [pc, #436]	; (80027ac <HAL_I2C_Mem_Write+0x1ec>)
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fc7f 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	e0cc      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_I2C_Mem_Write+0x56>
 8002612:	2302      	movs	r3, #2
 8002614:	e0c5      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d007      	beq.n	800263c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2221      	movs	r2, #33	; 0x21
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_I2C_Mem_Write+0x1f0>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800267e:	88f8      	ldrh	r0, [r7, #6]
 8002680:	893a      	ldrh	r2, [r7, #8]
 8002682:	8979      	ldrh	r1, [r7, #10]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4603      	mov	r3, r0
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fab6 	bl	8002c00 <I2C_RequestMemoryWrite>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d052      	beq.n	8002740 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e081      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fd00 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d107      	bne.n	80026c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d11b      	bne.n	8002740 <HAL_I2C_Mem_Write+0x180>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1aa      	bne.n	800269e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fcec 	bl	800312a <I2C_WaitOnBTFFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e016      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	00100002 	.word	0x00100002
 80027b0:	ffff0000 	.word	0xffff0000

080027b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ce:	f7ff fac5 	bl	8001d5c <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	f040 8208 	bne.w	8002bf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	497b      	ldr	r1, [pc, #492]	; (80029d8 <HAL_I2C_Mem_Read+0x224>)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb85 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e1fb      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2C_Mem_Read+0x56>
 8002806:	2302      	movs	r3, #2
 8002808:	e1f4      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2222      	movs	r2, #34	; 0x22
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a5b      	ldr	r2, [pc, #364]	; (80029dc <HAL_I2C_Mem_Read+0x228>)
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002872:	88f8      	ldrh	r0, [r7, #6]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4603      	mov	r3, r0
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa52 	bl	8002d2c <I2C_RequestMemoryRead>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1b0      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e184      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d11b      	bne.n	8002902 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e164      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b02      	cmp	r3, #2
 8002908:	d11b      	bne.n	8002942 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	e144      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002958:	e138      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b03      	cmp	r3, #3
 8002960:	f200 80f1 	bhi.w	8002b46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	2b01      	cmp	r3, #1
 800296a:	d123      	bne.n	80029b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fc1b 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e139      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b2:	e10b      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d14e      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2200      	movs	r2, #0
 80029c4:	4906      	ldr	r1, [pc, #24]	; (80029e0 <HAL_I2C_Mem_Read+0x22c>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa98 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e10e      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
 80029d6:	bf00      	nop
 80029d8:	00100002 	.word	0x00100002
 80029dc:	ffff0000 	.word	0xffff0000
 80029e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a58:	e0b8      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2200      	movs	r2, #0
 8002a62:	4966      	ldr	r1, [pc, #408]	; (8002bfc <HAL_I2C_Mem_Read+0x448>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa49 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0bf      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	2200      	movs	r2, #0
 8002abe:	494f      	ldr	r1, [pc, #316]	; (8002bfc <HAL_I2C_Mem_Read+0x448>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa1b 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e091      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b44:	e042      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fb2e 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04c      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d118      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f aec2 	bne.w	800295a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00010004 	.word	0x00010004

08002c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f960 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c50:	d103      	bne.n	8002c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e05f      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	6a3a      	ldr	r2, [r7, #32]
 8002c72:	492d      	ldr	r1, [pc, #180]	; (8002d28 <I2C_RequestMemoryWrite+0x128>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f998 	bl	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04c      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa02 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02b      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	e021      	b.n	8002d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f9dc 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e005      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f8c2 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8c:	d103      	bne.n	8002d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0aa      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	4952      	ldr	r1, [pc, #328]	; (8002ef8 <I2C_RequestMemoryRead+0x1cc>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f8fa 	bl	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e097      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f964 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e076      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e08:	893b      	ldrh	r3, [r7, #8]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e021      	b.n	8002e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f93e 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e050      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4e:	893b      	ldrh	r3, [r7, #8]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	6a39      	ldr	r1, [r7, #32]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f923 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e035      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f82b 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eba:	d103      	bne.n	8002ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e013      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <I2C_RequestMemoryRead+0x1cc>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f863 	bl	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010002 	.word	0x00010002

08002efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f0c:	e025      	b.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f14:	d021      	beq.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe ff21 	bl	8001d5c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e023      	b.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10d      	bne.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	e00c      	b.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d0b6      	beq.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb8:	e051      	b.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d123      	bne.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e046      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003018:	d021      	beq.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe fe9f 	bl	8001d5c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e020      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10c      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e00b      	b.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	43da      	mvns	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d18d      	bne.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b4:	e02d      	b.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8ce 	bl	8003258 <I2C_IsAcknowledgeFailed>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e02d      	b.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030cc:	d021      	beq.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fe45 	bl	8001d5c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d116      	bne.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d1ca      	bne.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003136:	e02d      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f88d 	bl	8003258 <I2C_IsAcknowledgeFailed>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e02d      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314e:	d021      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fe fe04 	bl	8001d5c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d116      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d1ca      	bne.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	e042      	b.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d119      	bne.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0210 	mvn.w	r2, #16
 80031d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e029      	b.n	8003250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe fdae 	bl	8001d5c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d1b5      	bne.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d11b      	bne.n	80032a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d129      	bne.n	8003320 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0210 	bic.w	r2, r2, #16
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	d12a      	bne.n	800339e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	f023 030f 	bic.w	r3, r3, #15
 800336e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b29a      	uxth	r2, r3
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	4313      	orrs	r3, r2
 8003378:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	89fa      	ldrh	r2, [r7, #14]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e267      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d075      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b85      	ldr	r3, [pc, #532]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e242      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x74>
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a75      	ldr	r2, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6c      	ldr	r2, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003444:	4b69      	ldr	r3, [pc, #420]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fc7a 	bl	8001d5c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fc76 	bl	8001d5c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e207      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xc0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fc66 	bl	8001d5c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fc62 	bl	8001d5c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1f3      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c7      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e03a      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe fc1b 	bl	8001d5c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe fc17 	bl	8001d5c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1a8      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fbfa 	bl	8001d5c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe fbf6 	bl	8001d5c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e187      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d036      	beq.n	8003604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fbda 	bl	8001d5c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fbd6 	bl	8001d5c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e167      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80035c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x200>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fbc3 	bl	8001d5c <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	e00e      	b.n	80035f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035da:	f7fe fbbf 	bl	8001d5c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d907      	bls.n	80035f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e150      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470000 	.word	0x42470000
 80035f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b88      	ldr	r3, [pc, #544]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ea      	bne.n	80035da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8097 	beq.w	8003740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b81      	ldr	r3, [pc, #516]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b7a      	ldr	r3, [pc, #488]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b77      	ldr	r3, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe fb7f 	bl	8001d5c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe fb7b 	bl	8001d5c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e10c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x2ea>
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x30c>
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	4b5c      	ldr	r3, [pc, #368]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5b      	ldr	r2, [pc, #364]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a57      	ldr	r2, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	4b55      	ldr	r3, [pc, #340]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fb40 	bl	8001d5c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe fb3c 	bl	8001d5c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0cb      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <HAL_RCC_OscConfig+0x334>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fb2a 	bl	8001d5c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fb26 	bl	8001d5c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0b5      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a1 	beq.w	800388c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d05c      	beq.n	8003810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d141      	bne.n	80037e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fafa 	bl	8001d5c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe faf6 	bl	8001d5c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e087      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	491b      	ldr	r1, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe facf 	bl	8001d5c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe facb 	bl	8001d5c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e05c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x416>
 80037e0:	e054      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fab8 	bl	8001d5c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fab4 	bl	8001d5c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e045      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
 800380e:	e03d      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e038      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4ec>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d028      	beq.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d121      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d11a      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0cc      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b68      	ldr	r3, [pc, #416]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d90c      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b8      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d119      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	2b03      	cmp	r3, #3
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e067      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4934      	ldr	r1, [pc, #208]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7fe f9e6 	bl	8001d5c <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe f9e2 	bl	8001d5c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e04f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d20c      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e032      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a22:	f000 f821 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490a      	ldr	r1, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f946 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08005d0c 	.word	0x08005d0c
 8003a60:	20000038 	.word	0x20000038
 8003a64:	2000003c 	.word	0x2000003c

08003a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b090      	sub	sp, #64	; 0x40
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	2300      	movs	r3, #0
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	f200 80a1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x34>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9a:	e09b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003aa0:	e09b      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa6:	e098      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad4:	fb03 f201 	mul.w	r2, r3, r1
 8003ad8:	2300      	movs	r3, #0
 8003ada:	fb00 f303 	mul.w	r3, r0, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae8:	460a      	mov	r2, r1
 8003aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aee:	4413      	add	r3, r2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	2200      	movs	r2, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b02:	f7fc fbcd 	bl	80002a0 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	e053      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	617a      	str	r2, [r7, #20]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b22:	f04f 0b00 	mov.w	fp, #0
 8003b26:	4652      	mov	r2, sl
 8003b28:	465b      	mov	r3, fp
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b42:	eb63 090b 	sbc.w	r9, r3, fp
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	00eb      	lsls	r3, r5, #3
 8003b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b70:	00e2      	lsls	r2, r4, #3
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	eb14 030a 	adds.w	r3, r4, sl
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	eb45 030b 	adc.w	r3, r5, fp
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bac:	f7fc fb78 	bl	80002a0 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3740      	adds	r7, #64	; 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	017d7840 	.word	0x017d7840

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000038 	.word	0x20000038

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08005d1c 	.word	0x08005d1c

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08005d1c 	.word	0x08005d1c

08003c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e041      	b.n	8003cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd ff06 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fba8 	bl	80043f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d001      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e04e      	b.n	8003db2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d010      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	e007      	b.n	8003db0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40010400 	.word	0x40010400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40001800 	.word	0x40001800

08003ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e041      	b.n	8003e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fe24 	bl	8001a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 fae8 	bl	80043f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_PWM_Start+0x24>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e022      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x6a>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d109      	bne.n	8003eba <HAL_TIM_PWM_Start+0x3e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e015      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x6a>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d109      	bne.n	8003ed4 <HAL_TIM_PWM_Start+0x58>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e008      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x6a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07c      	b.n	8003fe8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0x82>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003efc:	e013      	b.n	8003f26 <HAL_TIM_PWM_Start+0xaa>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0x92>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	e00b      	b.n	8003f26 <HAL_TIM_PWM_Start+0xaa>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_PWM_Start+0xa2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1c:	e003      	b.n	8003f26 <HAL_TIM_PWM_Start+0xaa>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fcae 	bl	8004890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <HAL_TIM_PWM_Start+0x174>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIM_PWM_Start+0xcc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <HAL_TIM_PWM_Start+0x178>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_TIM_PWM_Start+0xd0>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_TIM_PWM_Start+0xd2>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_TIM_PWM_Start+0x174>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d01d      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_TIM_PWM_Start+0x17c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_TIM_PWM_Start+0x180>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_TIM_PWM_Start+0x184>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <HAL_TIM_PWM_Start+0x178>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_PWM_Start+0x188>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x136>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_TIM_PWM_Start+0x18c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d010      	beq.n	8003fe6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	e007      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40014000 	.word	0x40014000
 8004008:	40001800 	.word	0x40001800

0800400c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0202 	mvn.w	r2, #2
 8004038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9b0 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9a2 	bl	80043a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f9b3 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0204 	mvn.w	r2, #4
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f986 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f978 	bl	80043a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f989 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0208 	mvn.w	r2, #8
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2204      	movs	r2, #4
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f95c 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f94e 	bl	80043a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f95f 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0210 	mvn.w	r2, #16
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2208      	movs	r2, #8
 800413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f932 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f924 	bl	80043a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f935 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0201 	mvn.w	r2, #1
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fca8 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fc16 	bl	80049e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8fa 	bl	80043dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b20      	cmp	r3, #32
 8004202:	d107      	bne.n	8004214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0220 	mvn.w	r2, #32
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fbe0 	bl	80049d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004236:	2302      	movs	r3, #2
 8004238:	e0ae      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	f200 809f 	bhi.w	8004388 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004285 	.word	0x08004285
 8004254:	08004389 	.word	0x08004389
 8004258:	08004389 	.word	0x08004389
 800425c:	08004389 	.word	0x08004389
 8004260:	080042c5 	.word	0x080042c5
 8004264:	08004389 	.word	0x08004389
 8004268:	08004389 	.word	0x08004389
 800426c:	08004389 	.word	0x08004389
 8004270:	08004307 	.word	0x08004307
 8004274:	08004389 	.word	0x08004389
 8004278:	08004389 	.word	0x08004389
 800427c:	08004389 	.word	0x08004389
 8004280:	08004347 	.word	0x08004347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f950 	bl	8004530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	619a      	str	r2, [r3, #24]
      break;
 80042c2:	e064      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f9a0 	bl	8004610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6999      	ldr	r1, [r3, #24]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	619a      	str	r2, [r3, #24]
      break;
 8004304:	e043      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f9f5 	bl	80046fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0208 	orr.w	r2, r2, #8
 8004320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0204 	bic.w	r2, r2, #4
 8004330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69d9      	ldr	r1, [r3, #28]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	61da      	str	r2, [r3, #28]
      break;
 8004344:	e023      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fa49 	bl	80047e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69d9      	ldr	r1, [r3, #28]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	61da      	str	r2, [r3, #28]
      break;
 8004386:	e002      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	75fb      	strb	r3, [r7, #23]
      break;
 800438c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a40      	ldr	r2, [pc, #256]	; (8004504 <TIM_Base_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440e:	d00f      	beq.n	8004430 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3d      	ldr	r2, [pc, #244]	; (8004508 <TIM_Base_SetConfig+0x118>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00b      	beq.n	8004430 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3c      	ldr	r2, [pc, #240]	; (800450c <TIM_Base_SetConfig+0x11c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <TIM_Base_SetConfig+0x120>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <TIM_Base_SetConfig+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d108      	bne.n	8004442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2f      	ldr	r2, [pc, #188]	; (8004504 <TIM_Base_SetConfig+0x114>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d027      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <TIM_Base_SetConfig+0x118>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d023      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <TIM_Base_SetConfig+0x11c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01f      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <TIM_Base_SetConfig+0x120>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01b      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a29      	ldr	r2, [pc, #164]	; (8004514 <TIM_Base_SetConfig+0x124>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d017      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a28      	ldr	r2, [pc, #160]	; (8004518 <TIM_Base_SetConfig+0x128>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <TIM_Base_SetConfig+0x12c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00f      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a26      	ldr	r2, [pc, #152]	; (8004520 <TIM_Base_SetConfig+0x130>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00b      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <TIM_Base_SetConfig+0x134>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a24      	ldr	r2, [pc, #144]	; (8004528 <TIM_Base_SetConfig+0x138>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <TIM_Base_SetConfig+0x13c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d108      	bne.n	80044b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <TIM_Base_SetConfig+0x114>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0xf8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <TIM_Base_SetConfig+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40010400 	.word	0x40010400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800
 8004524:	40001800 	.word	0x40001800
 8004528:	40001c00 	.word	0x40001c00
 800452c:	40002000 	.word	0x40002000

08004530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 0302 	bic.w	r3, r3, #2
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a20      	ldr	r2, [pc, #128]	; (8004608 <TIM_OC1_SetConfig+0xd8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC1_SetConfig+0x64>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <TIM_OC1_SetConfig+0xdc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10c      	bne.n	80045ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0308 	bic.w	r3, r3, #8
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <TIM_OC1_SetConfig+0xd8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_OC1_SetConfig+0x8e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <TIM_OC1_SetConfig+0xdc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d111      	bne.n	80045e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40010000 	.word	0x40010000
 800460c:	40010400 	.word	0x40010400

08004610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0210 	bic.w	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <TIM_OC2_SetConfig+0xe4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC2_SetConfig+0x68>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <TIM_OC2_SetConfig+0xe8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10d      	bne.n	8004694 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <TIM_OC2_SetConfig+0xe4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC2_SetConfig+0x94>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <TIM_OC2_SetConfig+0xe8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40010400 	.word	0x40010400

080046fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <TIM_OC3_SetConfig+0xe0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC3_SetConfig+0x66>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <TIM_OC3_SetConfig+0xe4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10d      	bne.n	800477e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a16      	ldr	r2, [pc, #88]	; (80047dc <TIM_OC3_SetConfig+0xe0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_OC3_SetConfig+0x92>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <TIM_OC3_SetConfig+0xe4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400

080047e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	031b      	lsls	r3, r3, #12
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <TIM_OC4_SetConfig+0xa4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC4_SetConfig+0x68>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <TIM_OC4_SetConfig+0xa8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d109      	bne.n	8004860 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40010400 	.word	0x40010400

08004890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2201      	movs	r2, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e05a      	b.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d01d      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10c      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4313      	orrs	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e03f      	b.n	8004a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd f8c2 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	; 0x24
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f86d 	bl	8004b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d130      	bne.n	8004b12 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Transmit_IT+0x26>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e029      	b.n	8004b14 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Transmit_IT+0x38>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e022      	b.n	8004b14 <HAL_UART_Transmit_IT+0x7e>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2221      	movs	r2, #33	; 0x21
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b0c0      	sub	sp, #256	; 0x100
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	ea40 0301 	orr.w	r3, r0, r1
 8004b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b78:	f021 010c 	bic.w	r1, r1, #12
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b86:	430b      	orrs	r3, r1
 8004b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	ea40 0301 	orr.w	r3, r0, r1
 8004ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b8f      	ldr	r3, [pc, #572]	; (8004dec <UART_SetConfig+0x2cc>)
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d005      	beq.n	8004bc0 <UART_SetConfig+0xa0>
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b8d      	ldr	r3, [pc, #564]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d104      	bne.n	8004bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7ff f838 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bc8:	e003      	b.n	8004bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bca:	f7ff f81f 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	f040 810c 	bne.w	8004df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	1891      	adds	r1, r2, r2
 8004bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bfa:	415b      	adcs	r3, r3
 8004bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c02:	4621      	mov	r1, r4
 8004c04:	eb12 0801 	adds.w	r8, r2, r1
 8004c08:	4629      	mov	r1, r5
 8004c0a:	eb43 0901 	adc.w	r9, r3, r1
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c22:	4690      	mov	r8, r2
 8004c24:	4699      	mov	r9, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	eb18 0303 	adds.w	r3, r8, r3
 8004c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c30:	462b      	mov	r3, r5
 8004c32:	eb49 0303 	adc.w	r3, r9, r3
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c4e:	460b      	mov	r3, r1
 8004c50:	18db      	adds	r3, r3, r3
 8004c52:	653b      	str	r3, [r7, #80]	; 0x50
 8004c54:	4613      	mov	r3, r2
 8004c56:	eb42 0303 	adc.w	r3, r2, r3
 8004c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c64:	f7fb fb1c 	bl	80002a0 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b61      	ldr	r3, [pc, #388]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c90:	415b      	adcs	r3, r3
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c98:	4641      	mov	r1, r8
 8004c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb8:	4692      	mov	sl, r2
 8004cba:	469b      	mov	fp, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	18db      	adds	r3, r3, r3
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	4613      	mov	r3, r2
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cfa:	f7fb fad1 	bl	80002a0 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004d06:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2264      	movs	r2, #100	; 0x64
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	1acb      	subs	r3, r1, r3
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d1a:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d28:	441c      	add	r4, r3
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d44:	415b      	adcs	r3, r3
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6339      	str	r1, [r7, #48]	; 0x30
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004da0:	460b      	mov	r3, r1
 8004da2:	18db      	adds	r3, r3, r3
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da6:	4613      	mov	r3, r2
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004db6:	f7fb fa73 	bl	80002a0 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	; 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3332      	adds	r3, #50	; 0x32
 8004dd2:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4422      	add	r2, r4
 8004de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de8:	e105      	b.n	8004ff6 <UART_SetConfig+0x4d6>
 8004dea:	bf00      	nop
 8004dec:	40011000 	.word	0x40011000
 8004df0:	40011400 	.word	0x40011400
 8004df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	6239      	str	r1, [r7, #32]
 8004e12:	415b      	adcs	r3, r3
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb43 0501 	adc.w	r5, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	00eb      	lsls	r3, r5, #3
 8004e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e32:	00e2      	lsls	r2, r4, #3
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	18e3      	adds	r3, r4, r3
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e40:	464b      	mov	r3, r9
 8004e42:	eb45 0303 	adc.w	r3, r5, r3
 8004e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e66:	4629      	mov	r1, r5
 8004e68:	008b      	lsls	r3, r1, #2
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e70:	4621      	mov	r1, r4
 8004e72:	008a      	lsls	r2, r1, #2
 8004e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e78:	f7fb fa12 	bl	80002a0 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4b60      	ldr	r3, [pc, #384]	; (8005004 <UART_SetConfig+0x4e4>)
 8004e82:	fba3 2302 	umull	r2, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	011c      	lsls	r4, r3, #4
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	61b9      	str	r1, [r7, #24]
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eac:	4641      	mov	r1, r8
 8004eae:	1851      	adds	r1, r2, r1
 8004eb0:	6139      	str	r1, [r7, #16]
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	414b      	adcs	r3, r1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	00cb      	lsls	r3, r1, #3
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ece:	4651      	mov	r1, sl
 8004ed0:	00ca      	lsls	r2, r1, #3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	eb42 0303 	adc.w	r3, r2, r3
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f04:	4649      	mov	r1, r9
 8004f06:	008b      	lsls	r3, r1, #2
 8004f08:	4641      	mov	r1, r8
 8004f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0e:	4641      	mov	r1, r8
 8004f10:	008a      	lsls	r2, r1, #2
 8004f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f16:	f7fb f9c3 	bl	80002a0 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <UART_SetConfig+0x4e4>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	3332      	adds	r3, #50	; 0x32
 8004f32:	4a34      	ldr	r2, [pc, #208]	; (8005004 <UART_SetConfig+0x4e4>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3e:	441c      	add	r4, r3
 8004f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f44:	2200      	movs	r2, #0
 8004f46:	673b      	str	r3, [r7, #112]	; 0x70
 8004f48:	677a      	str	r2, [r7, #116]	; 0x74
 8004f4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f4e:	4642      	mov	r2, r8
 8004f50:	464b      	mov	r3, r9
 8004f52:	1891      	adds	r1, r2, r2
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	415b      	adcs	r3, r3
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5e:	4641      	mov	r1, r8
 8004f60:	1851      	adds	r1, r2, r1
 8004f62:	6039      	str	r1, [r7, #0]
 8004f64:	4649      	mov	r1, r9
 8004f66:	414b      	adcs	r3, r1
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f76:	4659      	mov	r1, fp
 8004f78:	00cb      	lsls	r3, r1, #3
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f80:	4651      	mov	r1, sl
 8004f82:	00ca      	lsls	r2, r1, #3
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4642      	mov	r2, r8
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f90:	464b      	mov	r3, r9
 8004f92:	460a      	mov	r2, r1
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	008b      	lsls	r3, r1, #2
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	008a      	lsls	r2, r1, #2
 8004fc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fc4:	f7fb f96c 	bl	80002a0 <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <UART_SetConfig+0x4e4>)
 8004fce:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2164      	movs	r1, #100	; 0x64
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	; 0x32
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <UART_SetConfig+0x4e4>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 020f 	and.w	r2, r3, #15
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4422      	add	r2, r4
 8004ff4:	609a      	str	r2, [r3, #8]
}
 8004ff6:	bf00      	nop
 8004ff8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005002:	bf00      	nop
 8005004:	51eb851f 	.word	0x51eb851f

08005008 <__errno>:
 8005008:	4b01      	ldr	r3, [pc, #4]	; (8005010 <__errno+0x8>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000044 	.word	0x20000044

08005014 <__libc_init_array>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4d0d      	ldr	r5, [pc, #52]	; (800504c <__libc_init_array+0x38>)
 8005018:	4c0d      	ldr	r4, [pc, #52]	; (8005050 <__libc_init_array+0x3c>)
 800501a:	1b64      	subs	r4, r4, r5
 800501c:	10a4      	asrs	r4, r4, #2
 800501e:	2600      	movs	r6, #0
 8005020:	42a6      	cmp	r6, r4
 8005022:	d109      	bne.n	8005038 <__libc_init_array+0x24>
 8005024:	4d0b      	ldr	r5, [pc, #44]	; (8005054 <__libc_init_array+0x40>)
 8005026:	4c0c      	ldr	r4, [pc, #48]	; (8005058 <__libc_init_array+0x44>)
 8005028:	f000 fca2 	bl	8005970 <_init>
 800502c:	1b64      	subs	r4, r4, r5
 800502e:	10a4      	asrs	r4, r4, #2
 8005030:	2600      	movs	r6, #0
 8005032:	42a6      	cmp	r6, r4
 8005034:	d105      	bne.n	8005042 <__libc_init_array+0x2e>
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	f855 3b04 	ldr.w	r3, [r5], #4
 800503c:	4798      	blx	r3
 800503e:	3601      	adds	r6, #1
 8005040:	e7ee      	b.n	8005020 <__libc_init_array+0xc>
 8005042:	f855 3b04 	ldr.w	r3, [r5], #4
 8005046:	4798      	blx	r3
 8005048:	3601      	adds	r6, #1
 800504a:	e7f2      	b.n	8005032 <__libc_init_array+0x1e>
 800504c:	08005d60 	.word	0x08005d60
 8005050:	08005d60 	.word	0x08005d60
 8005054:	08005d60 	.word	0x08005d60
 8005058:	08005d64 	.word	0x08005d64

0800505c <memcpy>:
 800505c:	440a      	add	r2, r1
 800505e:	4291      	cmp	r1, r2
 8005060:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005064:	d100      	bne.n	8005068 <memcpy+0xc>
 8005066:	4770      	bx	lr
 8005068:	b510      	push	{r4, lr}
 800506a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005072:	4291      	cmp	r1, r2
 8005074:	d1f9      	bne.n	800506a <memcpy+0xe>
 8005076:	bd10      	pop	{r4, pc}

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <sniprintf>:
 8005088:	b40c      	push	{r2, r3}
 800508a:	b530      	push	{r4, r5, lr}
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <sniprintf+0x64>)
 800508e:	1e0c      	subs	r4, r1, #0
 8005090:	681d      	ldr	r5, [r3, #0]
 8005092:	b09d      	sub	sp, #116	; 0x74
 8005094:	da08      	bge.n	80050a8 <sniprintf+0x20>
 8005096:	238b      	movs	r3, #139	; 0x8b
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509e:	b01d      	add	sp, #116	; 0x74
 80050a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050a4:	b002      	add	sp, #8
 80050a6:	4770      	bx	lr
 80050a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80050ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050b0:	bf14      	ite	ne
 80050b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80050b6:	4623      	moveq	r3, r4
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	9307      	str	r3, [sp, #28]
 80050bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050c0:	9002      	str	r0, [sp, #8]
 80050c2:	9006      	str	r0, [sp, #24]
 80050c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050ca:	ab21      	add	r3, sp, #132	; 0x84
 80050cc:	a902      	add	r1, sp, #8
 80050ce:	4628      	mov	r0, r5
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	f000 f869 	bl	80051a8 <_svfiprintf_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	bfbc      	itt	lt
 80050da:	238b      	movlt	r3, #139	; 0x8b
 80050dc:	602b      	strlt	r3, [r5, #0]
 80050de:	2c00      	cmp	r4, #0
 80050e0:	d0dd      	beq.n	800509e <sniprintf+0x16>
 80050e2:	9b02      	ldr	r3, [sp, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e7d9      	b.n	800509e <sniprintf+0x16>
 80050ea:	bf00      	nop
 80050ec:	20000044 	.word	0x20000044

080050f0 <__ssputs_r>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	688e      	ldr	r6, [r1, #8]
 80050f6:	429e      	cmp	r6, r3
 80050f8:	4682      	mov	sl, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	4690      	mov	r8, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	d838      	bhi.n	8005174 <__ssputs_r+0x84>
 8005102:	898a      	ldrh	r2, [r1, #12]
 8005104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005108:	d032      	beq.n	8005170 <__ssputs_r+0x80>
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	6909      	ldr	r1, [r1, #16]
 800510e:	eba5 0901 	sub.w	r9, r5, r1
 8005112:	6965      	ldr	r5, [r4, #20]
 8005114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800511c:	3301      	adds	r3, #1
 800511e:	444b      	add	r3, r9
 8005120:	106d      	asrs	r5, r5, #1
 8005122:	429d      	cmp	r5, r3
 8005124:	bf38      	it	cc
 8005126:	461d      	movcc	r5, r3
 8005128:	0553      	lsls	r3, r2, #21
 800512a:	d531      	bpl.n	8005190 <__ssputs_r+0xa0>
 800512c:	4629      	mov	r1, r5
 800512e:	f000 fb55 	bl	80057dc <_malloc_r>
 8005132:	4606      	mov	r6, r0
 8005134:	b950      	cbnz	r0, 800514c <__ssputs_r+0x5c>
 8005136:	230c      	movs	r3, #12
 8005138:	f8ca 3000 	str.w	r3, [sl]
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	6921      	ldr	r1, [r4, #16]
 800514e:	464a      	mov	r2, r9
 8005150:	f7ff ff84 	bl	800505c <memcpy>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	6126      	str	r6, [r4, #16]
 8005162:	6165      	str	r5, [r4, #20]
 8005164:	444e      	add	r6, r9
 8005166:	eba5 0509 	sub.w	r5, r5, r9
 800516a:	6026      	str	r6, [r4, #0]
 800516c:	60a5      	str	r5, [r4, #8]
 800516e:	463e      	mov	r6, r7
 8005170:	42be      	cmp	r6, r7
 8005172:	d900      	bls.n	8005176 <__ssputs_r+0x86>
 8005174:	463e      	mov	r6, r7
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	4632      	mov	r2, r6
 800517a:	4641      	mov	r1, r8
 800517c:	f000 faa8 	bl	80056d0 <memmove>
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	1b9b      	subs	r3, r3, r6
 8005184:	60a3      	str	r3, [r4, #8]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	4433      	add	r3, r6
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	2000      	movs	r0, #0
 800518e:	e7db      	b.n	8005148 <__ssputs_r+0x58>
 8005190:	462a      	mov	r2, r5
 8005192:	f000 fb97 	bl	80058c4 <_realloc_r>
 8005196:	4606      	mov	r6, r0
 8005198:	2800      	cmp	r0, #0
 800519a:	d1e1      	bne.n	8005160 <__ssputs_r+0x70>
 800519c:	6921      	ldr	r1, [r4, #16]
 800519e:	4650      	mov	r0, sl
 80051a0:	f000 fab0 	bl	8005704 <_free_r>
 80051a4:	e7c7      	b.n	8005136 <__ssputs_r+0x46>
	...

080051a8 <_svfiprintf_r>:
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	4698      	mov	r8, r3
 80051ae:	898b      	ldrh	r3, [r1, #12]
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	b09d      	sub	sp, #116	; 0x74
 80051b4:	4607      	mov	r7, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	d50e      	bpl.n	80051da <_svfiprintf_r+0x32>
 80051bc:	690b      	ldr	r3, [r1, #16]
 80051be:	b963      	cbnz	r3, 80051da <_svfiprintf_r+0x32>
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	f000 fb0b 	bl	80057dc <_malloc_r>
 80051c6:	6028      	str	r0, [r5, #0]
 80051c8:	6128      	str	r0, [r5, #16]
 80051ca:	b920      	cbnz	r0, 80051d6 <_svfiprintf_r+0x2e>
 80051cc:	230c      	movs	r3, #12
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d4:	e0d1      	b.n	800537a <_svfiprintf_r+0x1d2>
 80051d6:	2340      	movs	r3, #64	; 0x40
 80051d8:	616b      	str	r3, [r5, #20]
 80051da:	2300      	movs	r3, #0
 80051dc:	9309      	str	r3, [sp, #36]	; 0x24
 80051de:	2320      	movs	r3, #32
 80051e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e8:	2330      	movs	r3, #48	; 0x30
 80051ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005394 <_svfiprintf_r+0x1ec>
 80051ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f2:	f04f 0901 	mov.w	r9, #1
 80051f6:	4623      	mov	r3, r4
 80051f8:	469a      	mov	sl, r3
 80051fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fe:	b10a      	cbz	r2, 8005204 <_svfiprintf_r+0x5c>
 8005200:	2a25      	cmp	r2, #37	; 0x25
 8005202:	d1f9      	bne.n	80051f8 <_svfiprintf_r+0x50>
 8005204:	ebba 0b04 	subs.w	fp, sl, r4
 8005208:	d00b      	beq.n	8005222 <_svfiprintf_r+0x7a>
 800520a:	465b      	mov	r3, fp
 800520c:	4622      	mov	r2, r4
 800520e:	4629      	mov	r1, r5
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff ff6d 	bl	80050f0 <__ssputs_r>
 8005216:	3001      	adds	r0, #1
 8005218:	f000 80aa 	beq.w	8005370 <_svfiprintf_r+0x1c8>
 800521c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521e:	445a      	add	r2, fp
 8005220:	9209      	str	r2, [sp, #36]	; 0x24
 8005222:	f89a 3000 	ldrb.w	r3, [sl]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80a2 	beq.w	8005370 <_svfiprintf_r+0x1c8>
 800522c:	2300      	movs	r3, #0
 800522e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005236:	f10a 0a01 	add.w	sl, sl, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	9307      	str	r3, [sp, #28]
 800523e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005242:	931a      	str	r3, [sp, #104]	; 0x68
 8005244:	4654      	mov	r4, sl
 8005246:	2205      	movs	r2, #5
 8005248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524c:	4851      	ldr	r0, [pc, #324]	; (8005394 <_svfiprintf_r+0x1ec>)
 800524e:	f7fa ffd7 	bl	8000200 <memchr>
 8005252:	9a04      	ldr	r2, [sp, #16]
 8005254:	b9d8      	cbnz	r0, 800528e <_svfiprintf_r+0xe6>
 8005256:	06d0      	lsls	r0, r2, #27
 8005258:	bf44      	itt	mi
 800525a:	2320      	movmi	r3, #32
 800525c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005260:	0711      	lsls	r1, r2, #28
 8005262:	bf44      	itt	mi
 8005264:	232b      	movmi	r3, #43	; 0x2b
 8005266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526a:	f89a 3000 	ldrb.w	r3, [sl]
 800526e:	2b2a      	cmp	r3, #42	; 0x2a
 8005270:	d015      	beq.n	800529e <_svfiprintf_r+0xf6>
 8005272:	9a07      	ldr	r2, [sp, #28]
 8005274:	4654      	mov	r4, sl
 8005276:	2000      	movs	r0, #0
 8005278:	f04f 0c0a 	mov.w	ip, #10
 800527c:	4621      	mov	r1, r4
 800527e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005282:	3b30      	subs	r3, #48	; 0x30
 8005284:	2b09      	cmp	r3, #9
 8005286:	d94e      	bls.n	8005326 <_svfiprintf_r+0x17e>
 8005288:	b1b0      	cbz	r0, 80052b8 <_svfiprintf_r+0x110>
 800528a:	9207      	str	r2, [sp, #28]
 800528c:	e014      	b.n	80052b8 <_svfiprintf_r+0x110>
 800528e:	eba0 0308 	sub.w	r3, r0, r8
 8005292:	fa09 f303 	lsl.w	r3, r9, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	46a2      	mov	sl, r4
 800529c:	e7d2      	b.n	8005244 <_svfiprintf_r+0x9c>
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	1d19      	adds	r1, r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	9103      	str	r1, [sp, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfbb      	ittet	lt
 80052aa:	425b      	neglt	r3, r3
 80052ac:	f042 0202 	orrlt.w	r2, r2, #2
 80052b0:	9307      	strge	r3, [sp, #28]
 80052b2:	9307      	strlt	r3, [sp, #28]
 80052b4:	bfb8      	it	lt
 80052b6:	9204      	strlt	r2, [sp, #16]
 80052b8:	7823      	ldrb	r3, [r4, #0]
 80052ba:	2b2e      	cmp	r3, #46	; 0x2e
 80052bc:	d10c      	bne.n	80052d8 <_svfiprintf_r+0x130>
 80052be:	7863      	ldrb	r3, [r4, #1]
 80052c0:	2b2a      	cmp	r3, #42	; 0x2a
 80052c2:	d135      	bne.n	8005330 <_svfiprintf_r+0x188>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	9203      	str	r2, [sp, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfb8      	it	lt
 80052d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052d4:	3402      	adds	r4, #2
 80052d6:	9305      	str	r3, [sp, #20]
 80052d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053a4 <_svfiprintf_r+0x1fc>
 80052dc:	7821      	ldrb	r1, [r4, #0]
 80052de:	2203      	movs	r2, #3
 80052e0:	4650      	mov	r0, sl
 80052e2:	f7fa ff8d 	bl	8000200 <memchr>
 80052e6:	b140      	cbz	r0, 80052fa <_svfiprintf_r+0x152>
 80052e8:	2340      	movs	r3, #64	; 0x40
 80052ea:	eba0 000a 	sub.w	r0, r0, sl
 80052ee:	fa03 f000 	lsl.w	r0, r3, r0
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	4303      	orrs	r3, r0
 80052f6:	3401      	adds	r4, #1
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fe:	4826      	ldr	r0, [pc, #152]	; (8005398 <_svfiprintf_r+0x1f0>)
 8005300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005304:	2206      	movs	r2, #6
 8005306:	f7fa ff7b 	bl	8000200 <memchr>
 800530a:	2800      	cmp	r0, #0
 800530c:	d038      	beq.n	8005380 <_svfiprintf_r+0x1d8>
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <_svfiprintf_r+0x1f4>)
 8005310:	bb1b      	cbnz	r3, 800535a <_svfiprintf_r+0x1b2>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	3308      	adds	r3, #8
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	4433      	add	r3, r6
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	e767      	b.n	80051f6 <_svfiprintf_r+0x4e>
 8005326:	fb0c 3202 	mla	r2, ip, r2, r3
 800532a:	460c      	mov	r4, r1
 800532c:	2001      	movs	r0, #1
 800532e:	e7a5      	b.n	800527c <_svfiprintf_r+0xd4>
 8005330:	2300      	movs	r3, #0
 8005332:	3401      	adds	r4, #1
 8005334:	9305      	str	r3, [sp, #20]
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0c0a 	mov.w	ip, #10
 800533c:	4620      	mov	r0, r4
 800533e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005342:	3a30      	subs	r2, #48	; 0x30
 8005344:	2a09      	cmp	r2, #9
 8005346:	d903      	bls.n	8005350 <_svfiprintf_r+0x1a8>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0c5      	beq.n	80052d8 <_svfiprintf_r+0x130>
 800534c:	9105      	str	r1, [sp, #20]
 800534e:	e7c3      	b.n	80052d8 <_svfiprintf_r+0x130>
 8005350:	fb0c 2101 	mla	r1, ip, r1, r2
 8005354:	4604      	mov	r4, r0
 8005356:	2301      	movs	r3, #1
 8005358:	e7f0      	b.n	800533c <_svfiprintf_r+0x194>
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	462a      	mov	r2, r5
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <_svfiprintf_r+0x1f8>)
 8005362:	a904      	add	r1, sp, #16
 8005364:	4638      	mov	r0, r7
 8005366:	f3af 8000 	nop.w
 800536a:	1c42      	adds	r2, r0, #1
 800536c:	4606      	mov	r6, r0
 800536e:	d1d6      	bne.n	800531e <_svfiprintf_r+0x176>
 8005370:	89ab      	ldrh	r3, [r5, #12]
 8005372:	065b      	lsls	r3, r3, #25
 8005374:	f53f af2c 	bmi.w	80051d0 <_svfiprintf_r+0x28>
 8005378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800537a:	b01d      	add	sp, #116	; 0x74
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	ab03      	add	r3, sp, #12
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	462a      	mov	r2, r5
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <_svfiprintf_r+0x1f8>)
 8005388:	a904      	add	r1, sp, #16
 800538a:	4638      	mov	r0, r7
 800538c:	f000 f87a 	bl	8005484 <_printf_i>
 8005390:	e7eb      	b.n	800536a <_svfiprintf_r+0x1c2>
 8005392:	bf00      	nop
 8005394:	08005d24 	.word	0x08005d24
 8005398:	08005d2e 	.word	0x08005d2e
 800539c:	00000000 	.word	0x00000000
 80053a0:	080050f1 	.word	0x080050f1
 80053a4:	08005d2a 	.word	0x08005d2a

080053a8 <_printf_common>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	4616      	mov	r6, r2
 80053ae:	4699      	mov	r9, r3
 80053b0:	688a      	ldr	r2, [r1, #8]
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	bfb8      	it	lt
 80053bc:	4613      	movlt	r3, r2
 80053be:	6033      	str	r3, [r6, #0]
 80053c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c4:	4607      	mov	r7, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b10a      	cbz	r2, 80053ce <_printf_common+0x26>
 80053ca:	3301      	adds	r3, #1
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	0699      	lsls	r1, r3, #26
 80053d2:	bf42      	ittt	mi
 80053d4:	6833      	ldrmi	r3, [r6, #0]
 80053d6:	3302      	addmi	r3, #2
 80053d8:	6033      	strmi	r3, [r6, #0]
 80053da:	6825      	ldr	r5, [r4, #0]
 80053dc:	f015 0506 	ands.w	r5, r5, #6
 80053e0:	d106      	bne.n	80053f0 <_printf_common+0x48>
 80053e2:	f104 0a19 	add.w	sl, r4, #25
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	6832      	ldr	r2, [r6, #0]
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	42ab      	cmp	r3, r5
 80053ee:	dc26      	bgt.n	800543e <_printf_common+0x96>
 80053f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f4:	1e13      	subs	r3, r2, #0
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	bf18      	it	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	0692      	lsls	r2, r2, #26
 80053fe:	d42b      	bmi.n	8005458 <_printf_common+0xb0>
 8005400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005404:	4649      	mov	r1, r9
 8005406:	4638      	mov	r0, r7
 8005408:	47c0      	blx	r8
 800540a:	3001      	adds	r0, #1
 800540c:	d01e      	beq.n	800544c <_printf_common+0xa4>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	68e5      	ldr	r5, [r4, #12]
 8005412:	6832      	ldr	r2, [r6, #0]
 8005414:	f003 0306 	and.w	r3, r3, #6
 8005418:	2b04      	cmp	r3, #4
 800541a:	bf08      	it	eq
 800541c:	1aad      	subeq	r5, r5, r2
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	bf0c      	ite	eq
 8005424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005428:	2500      	movne	r5, #0
 800542a:	4293      	cmp	r3, r2
 800542c:	bfc4      	itt	gt
 800542e:	1a9b      	subgt	r3, r3, r2
 8005430:	18ed      	addgt	r5, r5, r3
 8005432:	2600      	movs	r6, #0
 8005434:	341a      	adds	r4, #26
 8005436:	42b5      	cmp	r5, r6
 8005438:	d11a      	bne.n	8005470 <_printf_common+0xc8>
 800543a:	2000      	movs	r0, #0
 800543c:	e008      	b.n	8005450 <_printf_common+0xa8>
 800543e:	2301      	movs	r3, #1
 8005440:	4652      	mov	r2, sl
 8005442:	4649      	mov	r1, r9
 8005444:	4638      	mov	r0, r7
 8005446:	47c0      	blx	r8
 8005448:	3001      	adds	r0, #1
 800544a:	d103      	bne.n	8005454 <_printf_common+0xac>
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005454:	3501      	adds	r5, #1
 8005456:	e7c6      	b.n	80053e6 <_printf_common+0x3e>
 8005458:	18e1      	adds	r1, r4, r3
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	2030      	movs	r0, #48	; 0x30
 800545e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005462:	4422      	add	r2, r4
 8005464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800546c:	3302      	adds	r3, #2
 800546e:	e7c7      	b.n	8005400 <_printf_common+0x58>
 8005470:	2301      	movs	r3, #1
 8005472:	4622      	mov	r2, r4
 8005474:	4649      	mov	r1, r9
 8005476:	4638      	mov	r0, r7
 8005478:	47c0      	blx	r8
 800547a:	3001      	adds	r0, #1
 800547c:	d0e6      	beq.n	800544c <_printf_common+0xa4>
 800547e:	3601      	adds	r6, #1
 8005480:	e7d9      	b.n	8005436 <_printf_common+0x8e>
	...

08005484 <_printf_i>:
 8005484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	7e0f      	ldrb	r7, [r1, #24]
 800548a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800548c:	2f78      	cmp	r7, #120	; 0x78
 800548e:	4691      	mov	r9, r2
 8005490:	4680      	mov	r8, r0
 8005492:	460c      	mov	r4, r1
 8005494:	469a      	mov	sl, r3
 8005496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800549a:	d807      	bhi.n	80054ac <_printf_i+0x28>
 800549c:	2f62      	cmp	r7, #98	; 0x62
 800549e:	d80a      	bhi.n	80054b6 <_printf_i+0x32>
 80054a0:	2f00      	cmp	r7, #0
 80054a2:	f000 80d8 	beq.w	8005656 <_printf_i+0x1d2>
 80054a6:	2f58      	cmp	r7, #88	; 0x58
 80054a8:	f000 80a3 	beq.w	80055f2 <_printf_i+0x16e>
 80054ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b4:	e03a      	b.n	800552c <_printf_i+0xa8>
 80054b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ba:	2b15      	cmp	r3, #21
 80054bc:	d8f6      	bhi.n	80054ac <_printf_i+0x28>
 80054be:	a101      	add	r1, pc, #4	; (adr r1, 80054c4 <_printf_i+0x40>)
 80054c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c4:	0800551d 	.word	0x0800551d
 80054c8:	08005531 	.word	0x08005531
 80054cc:	080054ad 	.word	0x080054ad
 80054d0:	080054ad 	.word	0x080054ad
 80054d4:	080054ad 	.word	0x080054ad
 80054d8:	080054ad 	.word	0x080054ad
 80054dc:	08005531 	.word	0x08005531
 80054e0:	080054ad 	.word	0x080054ad
 80054e4:	080054ad 	.word	0x080054ad
 80054e8:	080054ad 	.word	0x080054ad
 80054ec:	080054ad 	.word	0x080054ad
 80054f0:	0800563d 	.word	0x0800563d
 80054f4:	08005561 	.word	0x08005561
 80054f8:	0800561f 	.word	0x0800561f
 80054fc:	080054ad 	.word	0x080054ad
 8005500:	080054ad 	.word	0x080054ad
 8005504:	0800565f 	.word	0x0800565f
 8005508:	080054ad 	.word	0x080054ad
 800550c:	08005561 	.word	0x08005561
 8005510:	080054ad 	.word	0x080054ad
 8005514:	080054ad 	.word	0x080054ad
 8005518:	08005627 	.word	0x08005627
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	1d1a      	adds	r2, r3, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	602a      	str	r2, [r5, #0]
 8005524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800552c:	2301      	movs	r3, #1
 800552e:	e0a3      	b.n	8005678 <_printf_i+0x1f4>
 8005530:	6820      	ldr	r0, [r4, #0]
 8005532:	6829      	ldr	r1, [r5, #0]
 8005534:	0606      	lsls	r6, r0, #24
 8005536:	f101 0304 	add.w	r3, r1, #4
 800553a:	d50a      	bpl.n	8005552 <_printf_i+0xce>
 800553c:	680e      	ldr	r6, [r1, #0]
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	2e00      	cmp	r6, #0
 8005542:	da03      	bge.n	800554c <_printf_i+0xc8>
 8005544:	232d      	movs	r3, #45	; 0x2d
 8005546:	4276      	negs	r6, r6
 8005548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554c:	485e      	ldr	r0, [pc, #376]	; (80056c8 <_printf_i+0x244>)
 800554e:	230a      	movs	r3, #10
 8005550:	e019      	b.n	8005586 <_printf_i+0x102>
 8005552:	680e      	ldr	r6, [r1, #0]
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800555a:	bf18      	it	ne
 800555c:	b236      	sxthne	r6, r6
 800555e:	e7ef      	b.n	8005540 <_printf_i+0xbc>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	6820      	ldr	r0, [r4, #0]
 8005564:	1d19      	adds	r1, r3, #4
 8005566:	6029      	str	r1, [r5, #0]
 8005568:	0601      	lsls	r1, r0, #24
 800556a:	d501      	bpl.n	8005570 <_printf_i+0xec>
 800556c:	681e      	ldr	r6, [r3, #0]
 800556e:	e002      	b.n	8005576 <_printf_i+0xf2>
 8005570:	0646      	lsls	r6, r0, #25
 8005572:	d5fb      	bpl.n	800556c <_printf_i+0xe8>
 8005574:	881e      	ldrh	r6, [r3, #0]
 8005576:	4854      	ldr	r0, [pc, #336]	; (80056c8 <_printf_i+0x244>)
 8005578:	2f6f      	cmp	r7, #111	; 0x6f
 800557a:	bf0c      	ite	eq
 800557c:	2308      	moveq	r3, #8
 800557e:	230a      	movne	r3, #10
 8005580:	2100      	movs	r1, #0
 8005582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005586:	6865      	ldr	r5, [r4, #4]
 8005588:	60a5      	str	r5, [r4, #8]
 800558a:	2d00      	cmp	r5, #0
 800558c:	bfa2      	ittt	ge
 800558e:	6821      	ldrge	r1, [r4, #0]
 8005590:	f021 0104 	bicge.w	r1, r1, #4
 8005594:	6021      	strge	r1, [r4, #0]
 8005596:	b90e      	cbnz	r6, 800559c <_printf_i+0x118>
 8005598:	2d00      	cmp	r5, #0
 800559a:	d04d      	beq.n	8005638 <_printf_i+0x1b4>
 800559c:	4615      	mov	r5, r2
 800559e:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a2:	fb03 6711 	mls	r7, r3, r1, r6
 80055a6:	5dc7      	ldrb	r7, [r0, r7]
 80055a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055ac:	4637      	mov	r7, r6
 80055ae:	42bb      	cmp	r3, r7
 80055b0:	460e      	mov	r6, r1
 80055b2:	d9f4      	bls.n	800559e <_printf_i+0x11a>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10b      	bne.n	80055d0 <_printf_i+0x14c>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07de      	lsls	r6, r3, #31
 80055bc:	d508      	bpl.n	80055d0 <_printf_i+0x14c>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6861      	ldr	r1, [r4, #4]
 80055c2:	4299      	cmp	r1, r3
 80055c4:	bfde      	ittt	le
 80055c6:	2330      	movle	r3, #48	; 0x30
 80055c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80055d0:	1b52      	subs	r2, r2, r5
 80055d2:	6122      	str	r2, [r4, #16]
 80055d4:	f8cd a000 	str.w	sl, [sp]
 80055d8:	464b      	mov	r3, r9
 80055da:	aa03      	add	r2, sp, #12
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fee2 	bl	80053a8 <_printf_common>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d14c      	bne.n	8005682 <_printf_i+0x1fe>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ec:	b004      	add	sp, #16
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	4835      	ldr	r0, [pc, #212]	; (80056c8 <_printf_i+0x244>)
 80055f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055f8:	6829      	ldr	r1, [r5, #0]
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005600:	6029      	str	r1, [r5, #0]
 8005602:	061d      	lsls	r5, r3, #24
 8005604:	d514      	bpl.n	8005630 <_printf_i+0x1ac>
 8005606:	07df      	lsls	r7, r3, #31
 8005608:	bf44      	itt	mi
 800560a:	f043 0320 	orrmi.w	r3, r3, #32
 800560e:	6023      	strmi	r3, [r4, #0]
 8005610:	b91e      	cbnz	r6, 800561a <_printf_i+0x196>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	f023 0320 	bic.w	r3, r3, #32
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	2310      	movs	r3, #16
 800561c:	e7b0      	b.n	8005580 <_printf_i+0xfc>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	f043 0320 	orr.w	r3, r3, #32
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	2378      	movs	r3, #120	; 0x78
 8005628:	4828      	ldr	r0, [pc, #160]	; (80056cc <_printf_i+0x248>)
 800562a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800562e:	e7e3      	b.n	80055f8 <_printf_i+0x174>
 8005630:	0659      	lsls	r1, r3, #25
 8005632:	bf48      	it	mi
 8005634:	b2b6      	uxthmi	r6, r6
 8005636:	e7e6      	b.n	8005606 <_printf_i+0x182>
 8005638:	4615      	mov	r5, r2
 800563a:	e7bb      	b.n	80055b4 <_printf_i+0x130>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	6826      	ldr	r6, [r4, #0]
 8005640:	6961      	ldr	r1, [r4, #20]
 8005642:	1d18      	adds	r0, r3, #4
 8005644:	6028      	str	r0, [r5, #0]
 8005646:	0635      	lsls	r5, r6, #24
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	d501      	bpl.n	8005650 <_printf_i+0x1cc>
 800564c:	6019      	str	r1, [r3, #0]
 800564e:	e002      	b.n	8005656 <_printf_i+0x1d2>
 8005650:	0670      	lsls	r0, r6, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0x1c8>
 8005654:	8019      	strh	r1, [r3, #0]
 8005656:	2300      	movs	r3, #0
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	4615      	mov	r5, r2
 800565c:	e7ba      	b.n	80055d4 <_printf_i+0x150>
 800565e:	682b      	ldr	r3, [r5, #0]
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	602a      	str	r2, [r5, #0]
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	2100      	movs	r1, #0
 800566a:	4628      	mov	r0, r5
 800566c:	f7fa fdc8 	bl	8000200 <memchr>
 8005670:	b108      	cbz	r0, 8005676 <_printf_i+0x1f2>
 8005672:	1b40      	subs	r0, r0, r5
 8005674:	6060      	str	r0, [r4, #4]
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	2300      	movs	r3, #0
 800567c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005680:	e7a8      	b.n	80055d4 <_printf_i+0x150>
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	462a      	mov	r2, r5
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	47d0      	blx	sl
 800568c:	3001      	adds	r0, #1
 800568e:	d0ab      	beq.n	80055e8 <_printf_i+0x164>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	079b      	lsls	r3, r3, #30
 8005694:	d413      	bmi.n	80056be <_printf_i+0x23a>
 8005696:	68e0      	ldr	r0, [r4, #12]
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	4298      	cmp	r0, r3
 800569c:	bfb8      	it	lt
 800569e:	4618      	movlt	r0, r3
 80056a0:	e7a4      	b.n	80055ec <_printf_i+0x168>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4632      	mov	r2, r6
 80056a6:	4649      	mov	r1, r9
 80056a8:	4640      	mov	r0, r8
 80056aa:	47d0      	blx	sl
 80056ac:	3001      	adds	r0, #1
 80056ae:	d09b      	beq.n	80055e8 <_printf_i+0x164>
 80056b0:	3501      	adds	r5, #1
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	9903      	ldr	r1, [sp, #12]
 80056b6:	1a5b      	subs	r3, r3, r1
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	dcf2      	bgt.n	80056a2 <_printf_i+0x21e>
 80056bc:	e7eb      	b.n	8005696 <_printf_i+0x212>
 80056be:	2500      	movs	r5, #0
 80056c0:	f104 0619 	add.w	r6, r4, #25
 80056c4:	e7f5      	b.n	80056b2 <_printf_i+0x22e>
 80056c6:	bf00      	nop
 80056c8:	08005d35 	.word	0x08005d35
 80056cc:	08005d46 	.word	0x08005d46

080056d0 <memmove>:
 80056d0:	4288      	cmp	r0, r1
 80056d2:	b510      	push	{r4, lr}
 80056d4:	eb01 0402 	add.w	r4, r1, r2
 80056d8:	d902      	bls.n	80056e0 <memmove+0x10>
 80056da:	4284      	cmp	r4, r0
 80056dc:	4623      	mov	r3, r4
 80056de:	d807      	bhi.n	80056f0 <memmove+0x20>
 80056e0:	1e43      	subs	r3, r0, #1
 80056e2:	42a1      	cmp	r1, r4
 80056e4:	d008      	beq.n	80056f8 <memmove+0x28>
 80056e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ee:	e7f8      	b.n	80056e2 <memmove+0x12>
 80056f0:	4402      	add	r2, r0
 80056f2:	4601      	mov	r1, r0
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d100      	bne.n	80056fa <memmove+0x2a>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005702:	e7f7      	b.n	80056f4 <memmove+0x24>

08005704 <_free_r>:
 8005704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005706:	2900      	cmp	r1, #0
 8005708:	d044      	beq.n	8005794 <_free_r+0x90>
 800570a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800570e:	9001      	str	r0, [sp, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f1a1 0404 	sub.w	r4, r1, #4
 8005716:	bfb8      	it	lt
 8005718:	18e4      	addlt	r4, r4, r3
 800571a:	f000 f913 	bl	8005944 <__malloc_lock>
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <_free_r+0x94>)
 8005720:	9801      	ldr	r0, [sp, #4]
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	b933      	cbnz	r3, 8005734 <_free_r+0x30>
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	6014      	str	r4, [r2, #0]
 800572a:	b003      	add	sp, #12
 800572c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005730:	f000 b90e 	b.w	8005950 <__malloc_unlock>
 8005734:	42a3      	cmp	r3, r4
 8005736:	d908      	bls.n	800574a <_free_r+0x46>
 8005738:	6825      	ldr	r5, [r4, #0]
 800573a:	1961      	adds	r1, r4, r5
 800573c:	428b      	cmp	r3, r1
 800573e:	bf01      	itttt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	1949      	addeq	r1, r1, r5
 8005746:	6021      	streq	r1, [r4, #0]
 8005748:	e7ed      	b.n	8005726 <_free_r+0x22>
 800574a:	461a      	mov	r2, r3
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b10b      	cbz	r3, 8005754 <_free_r+0x50>
 8005750:	42a3      	cmp	r3, r4
 8005752:	d9fa      	bls.n	800574a <_free_r+0x46>
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	1855      	adds	r5, r2, r1
 8005758:	42a5      	cmp	r5, r4
 800575a:	d10b      	bne.n	8005774 <_free_r+0x70>
 800575c:	6824      	ldr	r4, [r4, #0]
 800575e:	4421      	add	r1, r4
 8005760:	1854      	adds	r4, r2, r1
 8005762:	42a3      	cmp	r3, r4
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	d1e0      	bne.n	800572a <_free_r+0x26>
 8005768:	681c      	ldr	r4, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	6053      	str	r3, [r2, #4]
 800576e:	4421      	add	r1, r4
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	e7da      	b.n	800572a <_free_r+0x26>
 8005774:	d902      	bls.n	800577c <_free_r+0x78>
 8005776:	230c      	movs	r3, #12
 8005778:	6003      	str	r3, [r0, #0]
 800577a:	e7d6      	b.n	800572a <_free_r+0x26>
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1961      	adds	r1, r4, r5
 8005780:	428b      	cmp	r3, r1
 8005782:	bf04      	itt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	bf04      	itt	eq
 800578c:	1949      	addeq	r1, r1, r5
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	6054      	str	r4, [r2, #4]
 8005792:	e7ca      	b.n	800572a <_free_r+0x26>
 8005794:	b003      	add	sp, #12
 8005796:	bd30      	pop	{r4, r5, pc}
 8005798:	2000121c 	.word	0x2000121c

0800579c <sbrk_aligned>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4e0e      	ldr	r6, [pc, #56]	; (80057d8 <sbrk_aligned+0x3c>)
 80057a0:	460c      	mov	r4, r1
 80057a2:	6831      	ldr	r1, [r6, #0]
 80057a4:	4605      	mov	r5, r0
 80057a6:	b911      	cbnz	r1, 80057ae <sbrk_aligned+0x12>
 80057a8:	f000 f8bc 	bl	8005924 <_sbrk_r>
 80057ac:	6030      	str	r0, [r6, #0]
 80057ae:	4621      	mov	r1, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	f000 f8b7 	bl	8005924 <_sbrk_r>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d00a      	beq.n	80057d0 <sbrk_aligned+0x34>
 80057ba:	1cc4      	adds	r4, r0, #3
 80057bc:	f024 0403 	bic.w	r4, r4, #3
 80057c0:	42a0      	cmp	r0, r4
 80057c2:	d007      	beq.n	80057d4 <sbrk_aligned+0x38>
 80057c4:	1a21      	subs	r1, r4, r0
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f8ac 	bl	8005924 <_sbrk_r>
 80057cc:	3001      	adds	r0, #1
 80057ce:	d101      	bne.n	80057d4 <sbrk_aligned+0x38>
 80057d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80057d4:	4620      	mov	r0, r4
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	20001220 	.word	0x20001220

080057dc <_malloc_r>:
 80057dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e0:	1ccd      	adds	r5, r1, #3
 80057e2:	f025 0503 	bic.w	r5, r5, #3
 80057e6:	3508      	adds	r5, #8
 80057e8:	2d0c      	cmp	r5, #12
 80057ea:	bf38      	it	cc
 80057ec:	250c      	movcc	r5, #12
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	4607      	mov	r7, r0
 80057f2:	db01      	blt.n	80057f8 <_malloc_r+0x1c>
 80057f4:	42a9      	cmp	r1, r5
 80057f6:	d905      	bls.n	8005804 <_malloc_r+0x28>
 80057f8:	230c      	movs	r3, #12
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	2600      	movs	r6, #0
 80057fe:	4630      	mov	r0, r6
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005804:	4e2e      	ldr	r6, [pc, #184]	; (80058c0 <_malloc_r+0xe4>)
 8005806:	f000 f89d 	bl	8005944 <__malloc_lock>
 800580a:	6833      	ldr	r3, [r6, #0]
 800580c:	461c      	mov	r4, r3
 800580e:	bb34      	cbnz	r4, 800585e <_malloc_r+0x82>
 8005810:	4629      	mov	r1, r5
 8005812:	4638      	mov	r0, r7
 8005814:	f7ff ffc2 	bl	800579c <sbrk_aligned>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	4604      	mov	r4, r0
 800581c:	d14d      	bne.n	80058ba <_malloc_r+0xde>
 800581e:	6834      	ldr	r4, [r6, #0]
 8005820:	4626      	mov	r6, r4
 8005822:	2e00      	cmp	r6, #0
 8005824:	d140      	bne.n	80058a8 <_malloc_r+0xcc>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	4631      	mov	r1, r6
 800582a:	4638      	mov	r0, r7
 800582c:	eb04 0803 	add.w	r8, r4, r3
 8005830:	f000 f878 	bl	8005924 <_sbrk_r>
 8005834:	4580      	cmp	r8, r0
 8005836:	d13a      	bne.n	80058ae <_malloc_r+0xd2>
 8005838:	6821      	ldr	r1, [r4, #0]
 800583a:	3503      	adds	r5, #3
 800583c:	1a6d      	subs	r5, r5, r1
 800583e:	f025 0503 	bic.w	r5, r5, #3
 8005842:	3508      	adds	r5, #8
 8005844:	2d0c      	cmp	r5, #12
 8005846:	bf38      	it	cc
 8005848:	250c      	movcc	r5, #12
 800584a:	4629      	mov	r1, r5
 800584c:	4638      	mov	r0, r7
 800584e:	f7ff ffa5 	bl	800579c <sbrk_aligned>
 8005852:	3001      	adds	r0, #1
 8005854:	d02b      	beq.n	80058ae <_malloc_r+0xd2>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	442b      	add	r3, r5
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	e00e      	b.n	800587c <_malloc_r+0xa0>
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	1b52      	subs	r2, r2, r5
 8005862:	d41e      	bmi.n	80058a2 <_malloc_r+0xc6>
 8005864:	2a0b      	cmp	r2, #11
 8005866:	d916      	bls.n	8005896 <_malloc_r+0xba>
 8005868:	1961      	adds	r1, r4, r5
 800586a:	42a3      	cmp	r3, r4
 800586c:	6025      	str	r5, [r4, #0]
 800586e:	bf18      	it	ne
 8005870:	6059      	strne	r1, [r3, #4]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	bf08      	it	eq
 8005876:	6031      	streq	r1, [r6, #0]
 8005878:	5162      	str	r2, [r4, r5]
 800587a:	604b      	str	r3, [r1, #4]
 800587c:	4638      	mov	r0, r7
 800587e:	f104 060b 	add.w	r6, r4, #11
 8005882:	f000 f865 	bl	8005950 <__malloc_unlock>
 8005886:	f026 0607 	bic.w	r6, r6, #7
 800588a:	1d23      	adds	r3, r4, #4
 800588c:	1af2      	subs	r2, r6, r3
 800588e:	d0b6      	beq.n	80057fe <_malloc_r+0x22>
 8005890:	1b9b      	subs	r3, r3, r6
 8005892:	50a3      	str	r3, [r4, r2]
 8005894:	e7b3      	b.n	80057fe <_malloc_r+0x22>
 8005896:	6862      	ldr	r2, [r4, #4]
 8005898:	42a3      	cmp	r3, r4
 800589a:	bf0c      	ite	eq
 800589c:	6032      	streq	r2, [r6, #0]
 800589e:	605a      	strne	r2, [r3, #4]
 80058a0:	e7ec      	b.n	800587c <_malloc_r+0xa0>
 80058a2:	4623      	mov	r3, r4
 80058a4:	6864      	ldr	r4, [r4, #4]
 80058a6:	e7b2      	b.n	800580e <_malloc_r+0x32>
 80058a8:	4634      	mov	r4, r6
 80058aa:	6876      	ldr	r6, [r6, #4]
 80058ac:	e7b9      	b.n	8005822 <_malloc_r+0x46>
 80058ae:	230c      	movs	r3, #12
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4638      	mov	r0, r7
 80058b4:	f000 f84c 	bl	8005950 <__malloc_unlock>
 80058b8:	e7a1      	b.n	80057fe <_malloc_r+0x22>
 80058ba:	6025      	str	r5, [r4, #0]
 80058bc:	e7de      	b.n	800587c <_malloc_r+0xa0>
 80058be:	bf00      	nop
 80058c0:	2000121c 	.word	0x2000121c

080058c4 <_realloc_r>:
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4680      	mov	r8, r0
 80058ca:	4614      	mov	r4, r2
 80058cc:	460e      	mov	r6, r1
 80058ce:	b921      	cbnz	r1, 80058da <_realloc_r+0x16>
 80058d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d4:	4611      	mov	r1, r2
 80058d6:	f7ff bf81 	b.w	80057dc <_malloc_r>
 80058da:	b92a      	cbnz	r2, 80058e8 <_realloc_r+0x24>
 80058dc:	f7ff ff12 	bl	8005704 <_free_r>
 80058e0:	4625      	mov	r5, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	f000 f838 	bl	800595c <_malloc_usable_size_r>
 80058ec:	4284      	cmp	r4, r0
 80058ee:	4607      	mov	r7, r0
 80058f0:	d802      	bhi.n	80058f8 <_realloc_r+0x34>
 80058f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058f6:	d812      	bhi.n	800591e <_realloc_r+0x5a>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff ff6e 	bl	80057dc <_malloc_r>
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0ed      	beq.n	80058e2 <_realloc_r+0x1e>
 8005906:	42bc      	cmp	r4, r7
 8005908:	4622      	mov	r2, r4
 800590a:	4631      	mov	r1, r6
 800590c:	bf28      	it	cs
 800590e:	463a      	movcs	r2, r7
 8005910:	f7ff fba4 	bl	800505c <memcpy>
 8005914:	4631      	mov	r1, r6
 8005916:	4640      	mov	r0, r8
 8005918:	f7ff fef4 	bl	8005704 <_free_r>
 800591c:	e7e1      	b.n	80058e2 <_realloc_r+0x1e>
 800591e:	4635      	mov	r5, r6
 8005920:	e7df      	b.n	80058e2 <_realloc_r+0x1e>
	...

08005924 <_sbrk_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_sbrk_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fb ffa0 	bl	8001874 <_sbrk>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_sbrk_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_sbrk_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	20001224 	.word	0x20001224

08005944 <__malloc_lock>:
 8005944:	4801      	ldr	r0, [pc, #4]	; (800594c <__malloc_lock+0x8>)
 8005946:	f000 b811 	b.w	800596c <__retarget_lock_acquire_recursive>
 800594a:	bf00      	nop
 800594c:	20001228 	.word	0x20001228

08005950 <__malloc_unlock>:
 8005950:	4801      	ldr	r0, [pc, #4]	; (8005958 <__malloc_unlock+0x8>)
 8005952:	f000 b80c 	b.w	800596e <__retarget_lock_release_recursive>
 8005956:	bf00      	nop
 8005958:	20001228 	.word	0x20001228

0800595c <_malloc_usable_size_r>:
 800595c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005960:	1f18      	subs	r0, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	bfbc      	itt	lt
 8005966:	580b      	ldrlt	r3, [r1, r0]
 8005968:	18c0      	addlt	r0, r0, r3
 800596a:	4770      	bx	lr

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
