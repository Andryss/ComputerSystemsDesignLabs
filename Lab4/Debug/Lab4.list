
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00000984  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a3c  20000a3c  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013618  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc0  00000000  00000000  00033700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  000374a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251b5  00000000  00000000  00038450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a6f  00000000  00000000  0005d605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dba06  00000000  00000000  00074074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fa7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a14  00000000  00000000  0014facc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067dc 	.word	0x080067dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	080067dc 	.word	0x080067dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <BTN_IsSet>:
 *      Author: andryssssss
 */

#include "btn.h"

bool BTN_IsSet(uint16_t* state, uint16_t bit) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	return (*state & bit) > 0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	4013      	ands	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <BTN_Set>:

void BTN_Set(uint16_t* state, uint16_t bit) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	*state = (*state | bit);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	801a      	strh	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <BTN_ResetAll>:

void BTN_Reset(uint16_t* state, uint16_t bit) {
	*state = (*state & (~bit));
}

void BTN_ResetAll(uint16_t* state) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	*state = 0;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <BTN_GetState>:

void BTN_GetState(uint16_t* state) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	static uint32_t minimum_delay = 20;

	static uint32_t reset_time = 1;
	static uint32_t set_time = 0;

	BTN_ResetAll(state);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffec 	bl	80005f6 <BTN_ResetAll>

	while (HAL_GetTick() < last_time + minimum_delay) { }
 800061e:	bf00      	nop
 8000620:	f001 fde0 	bl	80021e4 <HAL_GetTick>
 8000624:	4601      	mov	r1, r0
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <BTN_GetState+0xe8>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <BTN_GetState+0xec>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4299      	cmp	r1, r3
 8000632:	d3f5      	bcc.n	8000620 <BTN_GetState+0x10>
	last_time = HAL_GetTick();
 8000634:	f001 fdd6 	bl	80021e4 <HAL_GetTick>
 8000638:	4603      	mov	r3, r0
 800063a:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <BTN_GetState+0xe8>)
 800063c:	6013      	str	r3, [r2, #0]

	int current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	482f      	ldr	r0, [pc, #188]	; (8000700 <BTN_GetState+0xf0>)
 8000644:	f002 f94e 	bl	80028e4 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	617b      	str	r3, [r7, #20]

	if (current_state == 0) {
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d114      	bne.n	800067c <BTN_GetState+0x6c>
		BTN_Set(state, BTN_DOWN);
 8000652:	2101      	movs	r1, #1
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffbb 	bl	80005d0 <BTN_Set>

		if (reset_time != 0) {
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <BTN_GetState+0xf4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d046      	beq.n	80006f0 <BTN_GetState+0xe0>
			BTN_Set(state, BTN_DOWN_EVENT);
 8000662:	2104      	movs	r1, #4
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffb3 	bl	80005d0 <BTN_Set>

			reset_time = 0;
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <BTN_GetState+0xf4>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
			set_time = HAL_GetTick();
 8000670:	f001 fdb8 	bl	80021e4 <HAL_GetTick>
 8000674:	4603      	mov	r3, r0
 8000676:	4a24      	ldr	r2, [pc, #144]	; (8000708 <BTN_GetState+0xf8>)
 8000678:	6013      	str	r3, [r2, #0]

			set_time = 0;
			reset_time = HAL_GetTick();
		}
	}
}
 800067a:	e039      	b.n	80006f0 <BTN_GetState+0xe0>
		BTN_Set(state, BTN_UP);
 800067c:	2102      	movs	r1, #2
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffa6 	bl	80005d0 <BTN_Set>
		if (set_time == 0) {
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <BTN_GetState+0xf8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d110      	bne.n	80006ae <BTN_GetState+0x9e>
			uint32_t up_time = HAL_GetTick() - reset_time;
 800068c:	f001 fdaa 	bl	80021e4 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <BTN_GetState+0xf4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	60fb      	str	r3, [r7, #12]
			if (up_time > up_threshold) {
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <BTN_GetState+0xfc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d925      	bls.n	80006f0 <BTN_GetState+0xe0>
				BTN_Set(state, BTN_EOF);
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff92 	bl	80005d0 <BTN_Set>
}
 80006ac:	e020      	b.n	80006f0 <BTN_GetState+0xe0>
			BTN_Set(state, BTN_UP_EVENT);
 80006ae:	2108      	movs	r1, #8
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff8d 	bl	80005d0 <BTN_Set>
			uint32_t down_time = HAL_GetTick() - set_time;
 80006b6:	f001 fd95 	bl	80021e4 <HAL_GetTick>
 80006ba:	4602      	mov	r2, r0
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <BTN_GetState+0xf8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	613b      	str	r3, [r7, #16]
			if (down_time < down_threshold) {
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <BTN_GetState+0x100>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d204      	bcs.n	80006d8 <BTN_GetState+0xc8>
				BTN_Set(state, BTN_SHORT_PRESS);
 80006ce:	2110      	movs	r1, #16
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff7d 	bl	80005d0 <BTN_Set>
 80006d6:	e003      	b.n	80006e0 <BTN_GetState+0xd0>
				BTN_Set(state, BTN_LONG_PRESS);
 80006d8:	2120      	movs	r1, #32
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ff78 	bl	80005d0 <BTN_Set>
			set_time = 0;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <BTN_GetState+0xf8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
			reset_time = HAL_GetTick();
 80006e6:	f001 fd7d 	bl	80021e4 <HAL_GetTick>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <BTN_GetState+0xf4>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000d4 	.word	0x200000d4
 80006fc:	20000000 	.word	0x20000000
 8000700:	40020800 	.word	0x40020800
 8000704:	20000004 	.word	0x20000004
 8000708:	200000d8 	.word	0x200000d8
 800070c:	20000008 	.word	0x20000008
 8000710:	2000000c 	.word	0x2000000c

08000714 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <is_buf_empty>:

bool is_buf_empty(struct Buffer* buf) {
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <is_buf_full>:

bool is_buf_full(struct Buffer* buf) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == 2048 - 1));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800076e:	3301      	adds	r3, #1
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8000776:	4293      	cmp	r3, r2
 8000778:	d00b      	beq.n	8000792 <is_buf_full+0x32>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000780:	2b00      	cmp	r3, #0
 8000782:	d108      	bne.n	8000796 <is_buf_full+0x36>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800078a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <is_buf_full+0x36>
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <is_buf_full+0x38>
 8000796:	2300      	movs	r3, #0
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
	while (written < size) {
 80007ba:	e01e      	b.n	80007fa <buf_push+0x50>
		if (is_buf_full(buf)) {
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ffcf 	bl	8000760 <is_buf_full>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d11d      	bne.n	8000804 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80007ce:	3301      	adds	r3, #1
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80007e4:	461a      	mov	r2, r3
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	7819      	ldrb	r1, [r3, #0]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	5499      	strb	r1, [r3, r2]
		data++;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
		written++;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
	while (written < size) {
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3dc      	bcc.n	80007bc <buf_push+0x12>
 8000802:	e000      	b.n	8000806 <buf_push+0x5c>
			break;
 8000804:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ffaa 	bl	8000760 <is_buf_full>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800081e:	3301      	adds	r3, #1
 8000820:	b29b      	uxth	r3, r3
 8000822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000826:	b29a      	uxth	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2100      	movs	r1, #0
 800083a:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <buf_pop>:

bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff ff74 	bl	8000746 <is_buf_empty>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <buf_pop+0x1c>
		return false;
 8000864:	2300      	movs	r3, #0
 8000866:	e04e      	b.n	8000906 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800086e:	3301      	adds	r3, #1
 8000870:	b29b      	uxth	r3, r3
 8000872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000876:	b29a      	uxth	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 8000882:	e01b      	b.n	80008bc <buf_pop+0x70>
		if (read < size) {
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	d20c      	bcs.n	80008a6 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000892:	4619      	mov	r1, r3
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	4413      	add	r3, r2
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	5c52      	ldrb	r2, [r2, r1]
 800089e:	701a      	strb	r2, [r3, #0]
			read++;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80008ac:	3301      	adds	r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	5c9b      	ldrb	r3, [r3, r2]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1db      	bne.n	8000884 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d102      	bne.n	80008da <buf_pop+0x8e>
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d8:	e000      	b.n	80008dc <buf_pop+0x90>
 80008da:	2200      	movs	r2, #0
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	4413      	add	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80008f4:	429a      	cmp	r2, r3
 80008f6:	bf0c      	ite	eq
 80008f8:	2301      	moveq	r3, #1
 80008fa:	2300      	movne	r3, #0
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000904:	2301      	movs	r3, #1
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <buf_push_itsafe>:

void buf_push_itsafe(struct Buffer* buf, uint8_t* data, size_t size) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b088      	sub	sp, #32
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800091a:	f3ef 8310 	mrs	r3, PRIMASK
 800091e:	617b      	str	r3, [r7, #20]
  return(result);
 8000920:	697b      	ldr	r3, [r7, #20]
	uint32_t pmask = __get_PRIMASK();
 8000922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
	__disable_irq();
	buf_push(buf, data, size);
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff ff3c 	bl	80007aa <buf_push>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	f383 8810 	msr	PRIMASK, r3
}
 800093c:	bf00      	nop
	__set_PRIMASK(pmask);
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <buf_pop_itsafe>:

bool buf_pop_itsafe(struct Buffer* buf, uint8_t* data, size_t size) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b088      	sub	sp, #32
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000952:	f3ef 8310 	mrs	r3, PRIMASK
 8000956:	613b      	str	r3, [r7, #16]
  return(result);
 8000958:	693b      	ldr	r3, [r7, #16]
	uint32_t pmask = __get_PRIMASK();
 800095a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
	__disable_irq();
	bool result = buf_pop(buf, data, size);
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff ff71 	bl	800084c <buf_pop>
 800096a:	4603      	mov	r3, r0
 800096c:	76fb      	strb	r3, [r7, #27]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	f383 8810 	msr	PRIMASK, r3
}
 8000978:	bf00      	nop
	__set_PRIMASK(pmask);
	return result;
 800097a:	7efb      	ldrb	r3, [r7, #27]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x84>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x84>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x84>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x84>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_I2C1_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a4a:	f001 ff63 	bl	8002914 <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f001 f854 	bl	8001b00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a5c:	f002 ff19 	bl	8003892 <HAL_I2CEx_ConfigAnalogFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a66:	f001 f84b 	bl	8001b00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a6e:	f002 ff4c 	bl	800390a <HAL_I2CEx_ConfigDigitalFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a78:	f001 f842 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000dc 	.word	0x200000dc
 8000a84:	40005400 	.word	0x40005400
 8000a88:	00061a80 	.word	0x00061a80

08000a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12c      	bne.n	8000b08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000adc:	2304      	movs	r3, #4
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <HAL_I2C_MspInit+0x8c>)
 8000ae8:	f001 fd50 	bl	800258c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <KBRD_Init>:
 *      Author: andryssssss
 */

#include "keyboard.h"

HAL_StatusTypeDef KBRD_Init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = PCA9538_SetDefaultConfig(KEYBOARD_I2C_ADDR);
 8000b22:	20e2      	movs	r0, #226	; 0xe2
 8000b24:	f001 f84a 	bl	8001bbc <PCA9538_SetDefaultConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <KBRD_Init+0x1a>
		// UART_Transmit("Can't set keyboard default config\n");
		return status;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	e00a      	b.n	8000b4c <KBRD_Init+0x30>
	}
	uint8_t out_def = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71bb      	strb	r3, [r7, #6]
	status = PCA9538_Write_Register(KEYBOARD_I2C_ADDR, OUTPUT_PORT, &out_def);
 8000b3a:	1dbb      	adds	r3, r7, #6
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2101      	movs	r1, #1
 8000b40:	20e2      	movs	r0, #226	; 0xe2
 8000b42:	f001 f819 	bl	8001b78 <PCA9538_Write_Register>
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
		// UART_Transmit("Can't set keyboard output port\n");
	}
	return status;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <KBRD_IsSet>:

bool KBRD_IsSet(uint16_t* state, uint16_t bit) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
	return (*state & bit) > 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4013      	ands	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <KBRD_Set>:

void KBRD_Set(uint16_t* state, uint16_t bit) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
	*state = (*state | bit);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	801a      	strh	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <KBRD_ResetAll>:

void KBRD_Reset(uint16_t* state, uint16_t bit) {
	*state = (*state & (~bit));
}

void KBRD_ResetAll(uint16_t* state) {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	*state = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <KBRD_GetState>:

HAL_StatusTypeDef KBRD_GetState(uint16_t* state) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	static uint32_t last_time = 0;
	static uint32_t minimum_delay = 20;

	static uint16_t prev_state = 0;

	KBRD_ResetAll(state);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ffec 	bl	8000ba6 <KBRD_ResetAll>

	uint16_t cur_state;
	KBRD_ResetAll(&cur_state);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffe7 	bl	8000ba6 <KBRD_ResetAll>

	while (HAL_GetTick() < last_time + minimum_delay) { }
 8000bd8:	bf00      	nop
 8000bda:	f001 fb03 	bl	80021e4 <HAL_GetTick>
 8000bde:	4601      	mov	r1, r0
 8000be0:	4b48      	ldr	r3, [pc, #288]	; (8000d04 <KBRD_GetState+0x144>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <KBRD_GetState+0x148>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d3f5      	bcc.n	8000bda <KBRD_GetState+0x1a>
	last_time = HAL_GetTick();
 8000bee:	f001 faf9 	bl	80021e4 <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a43      	ldr	r2, [pc, #268]	; (8000d04 <KBRD_GetState+0x144>)
 8000bf6:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef status;
	uint8_t input_port;

	for (uint8_t i = 0; i < 4; i++) { // row
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e06a      	b.n	8000cd4 <KBRD_GetState+0x114>
		uint8_t conf = ~(0x01 << i);
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2201      	movs	r2, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72bb      	strb	r3, [r7, #10]

		status = PCA9538_Write_Register(KEYBOARD_I2C_ADDR, OUTPUT_PORT, &conf);
 8000c0e:	f107 030a 	add.w	r3, r7, #10
 8000c12:	461a      	mov	r2, r3
 8000c14:	2101      	movs	r1, #1
 8000c16:	20e2      	movs	r0, #226	; 0xe2
 8000c18:	f000 ffae 	bl	8001b78 <PCA9538_Write_Register>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK) {
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <KBRD_GetState+0x6a>
			// UART_Transmit("Can't write keyboard config register\n");
			return status;
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	e067      	b.n	8000cfa <KBRD_GetState+0x13a>
		}

		HAL_Delay(pull_delay);
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <KBRD_GetState+0x14c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fae4 	bl	80021fc <HAL_Delay>

		status = PCA9538_Read_Inputs(KEYBOARD_I2C_ADDR, &input_port);
 8000c34:	f107 030b 	add.w	r3, r7, #11
 8000c38:	4619      	mov	r1, r3
 8000c3a:	20e2      	movs	r0, #226	; 0xe2
 8000c3c:	f000 ff88 	bl	8001b50 <PCA9538_Read_Inputs>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK) {
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <KBRD_GetState+0x8e>
			// UART_Transmit("Can't read keyboard input port\n");
			return status;
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	e055      	b.n	8000cfa <KBRD_GetState+0x13a>
		}

		input_port = (input_port >> 4) & 0x7; // column
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	72fb      	strb	r3, [r7, #11]
		if (input_port != 0) {
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d030      	beq.n	8000cc4 <KBRD_GetState+0x104>
			if ((input_port & 0x4) == 0) {
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10b      	bne.n	8000c84 <KBRD_GetState+0xc4>
				KBRD_Set(&cur_state, BTN_9 << i);
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff7e 	bl	8000b80 <KBRD_Set>
			}
			if ((input_port & 0x2) == 0) {
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <KBRD_GetState+0xe4>
				KBRD_Set(&cur_state, BTN_5 << i);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2210      	movs	r2, #16
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff6e 	bl	8000b80 <KBRD_Set>
			}
			if ((input_port & 0x1) == 0) {
 8000ca4:	7afb      	ldrb	r3, [r7, #11]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10a      	bne.n	8000cc4 <KBRD_GetState+0x104>
				KBRD_Set(&cur_state, BTN_1 << i);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff5e 	bl	8000b80 <KBRD_Set>
			}
		}

		HAL_Delay(pull_delay);
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <KBRD_GetState+0x14c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fa97 	bl	80021fc <HAL_Delay>
	for (uint8_t i = 0; i < 4; i++) { // row
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d991      	bls.n	8000bfe <KBRD_GetState+0x3e>
	}

	*state = cur_state & (~prev_state);
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <KBRD_GetState+0x150>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	89bb      	ldrh	r3, [r7, #12]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	801a      	strh	r2, [r3, #0]
	prev_state = cur_state;
 8000cf2:	89ba      	ldrh	r2, [r7, #12]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <KBRD_GetState+0x150>)
 8000cf6:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000130 	.word	0x20000130
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	20000014 	.word	0x20000014
 8000d10:	20000134 	.word	0x20000134

08000d14 <transmit>:
/* USER CODE BEGIN 0 */
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <transmit+0x30>)
 8000d28:	f004 f9a3 	bl	8005072 <HAL_UART_Transmit_IT>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d104      	bne.n	8000d3c <transmit+0x28>
		buf_push_itsafe(&transmitBuffer, data, size);
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <transmit+0x34>)
 8000d38:	f7ff fde9 	bl	800090e <buf_push_itsafe>
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200009e4 	.word	0x200009e4
 8000d48:	20000138 	.word	0x20000138

08000d4c <transmitc>:

void transmitc(char* data) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fa4b 	bl	80001f0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffd8 	bl	8000d14 <transmit>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000d78:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000d7c:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  bool is_pop = buf_pop_itsafe(&transmitBuffer, buf, sizeof(buf));
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_UART_TxCpltCallback+0x54>)
 8000d8a:	f7ff fddc 	bl	8000946 <buf_pop_itsafe>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
  if (is_pop) {
 8000d94:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00c      	beq.n	8000db6 <HAL_UART_TxCpltCallback+0x4a>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa25 	bl	80001f0 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <HAL_UART_TxCpltCallback+0x58>)
 8000db2:	f004 f95e 	bl	8005072 <HAL_UART_Transmit_IT>
  }
}
 8000db6:	bf00      	nop
 8000db8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000138 	.word	0x20000138
 8000dc4:	200009e4 	.word	0x200009e4

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

size_t edit_mode = 0;
uint16_t edit_mode_led = 0;
uint16_t edit_mode_brightness = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d15e      	bne.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0xd0>
		  if (cur_mode != -1) {
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de2:	d059      	beq.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0xd0>
			  if (cur_mode >= sizeof(mode_leds) / sizeof(uint16_t)) {
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d90c      	bls.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x3e>
				  htim4.Instance->CCR2 = 0;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	639a      	str	r2, [r3, #56]	; 0x38
				  htim4.Instance->CCR3 = 0;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
				  htim4.Instance->CCR4 = 0;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
 8000e04:	e044      	b.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc8>
			  } else {
				  uint16_t leds = mode_leds[cur_mode];
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	81fb      	strh	r3, [r7, #14]
				  uint16_t brightness = mode_brightness[cur_mode];
 8000e12:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1c:	81bb      	strh	r3, [r7, #12]

				  if ((leds & 0x1) != 0) {
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x74>
					  htim4.Instance->CCR2 = brightness * 10;
 8000e28:	89ba      	ldrh	r2, [r7, #12]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3a:	e003      	b.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x7c>
				  } else {
					  htim4.Instance->CCR2 = 0;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
				  }

				  if ((leds & 0x2) != 0) {
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d009      	beq.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x9a>
					  htim4.Instance->CCR3 = brightness * 10;
 8000e4e:	89ba      	ldrh	r2, [r7, #12]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e60:	e003      	b.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0xa2>
				  } else {
					  htim4.Instance->CCR3 = 0;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c
				  }

				  if ((leds & 0x4) != 0) {
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0xc0>
					  htim4.Instance->CCR4 = brightness * 10;
 8000e74:	89ba      	ldrh	r2, [r7, #12]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
 8000e86:	e003      	b.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc8>
				  } else {
					  htim4.Instance->CCR4 = 0;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
				  }
			  }

			  cur_mode = -1;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e96:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40001000 	.word	0x40001000
 8000ea8:	20000040 	.word	0x20000040
 8000eac:	20000954 	.word	0x20000954
 8000eb0:	20000018 	.word	0x20000018
 8000eb4:	2000002c 	.word	0x2000002c

08000eb8 <leds_str.1>:
  MX_TIM6_Init();
  MX_USART6_UART_Init();
  MX_TIM4_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  char leds_str(uint16_t leds) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	f8c7 c000 	str.w	ip, [r7]
  	  if (leds == 0x1) return 'G';
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <leds_str.1+0x18>
 8000ecc:	2347      	movs	r3, #71	; 0x47
 8000ece:	e00a      	b.n	8000ee6 <leds_str.1+0x2e>
  	  if (leds == 0x2) return 'Y';
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d101      	bne.n	8000eda <leds_str.1+0x22>
 8000ed6:	2359      	movs	r3, #89	; 0x59
 8000ed8:	e005      	b.n	8000ee6 <leds_str.1+0x2e>
  	  if (leds == 0x4) return 'R';
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d101      	bne.n	8000ee4 <leds_str.1+0x2c>
 8000ee0:	2352      	movs	r3, #82	; 0x52
 8000ee2:	e000      	b.n	8000ee6 <leds_str.1+0x2e>
  	  return '?';
 8000ee4:	233f      	movs	r3, #63	; 0x3f
    }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <main>:
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
int main(void)
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 8000f00:	f001 f90a 	bl	8002118 <HAL_Init>
  buf_init(&transmitBuffer);
 8000f04:	4844      	ldr	r0, [pc, #272]	; (8001018 <main+0x124>)
 8000f06:	f7ff fc05 	bl	8000714 <buf_init>
  SystemClock_Config();
 8000f0a:	f000 fd99 	bl	8001a40 <SystemClock_Config>
  MX_GPIO_Init();
 8000f0e:	f7ff fd39 	bl	8000984 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000f12:	f000 ffa3 	bl	8001e5c <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000f16:	f001 f85b 	bl	8001fd0 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000f1a:	f000 ff2f 	bl	8001d7c <MX_TIM4_Init>
  MX_I2C1_Init();
 8000f1e:	f7ff fd75 	bl	8000a0c <MX_I2C1_Init>
			return 0;
		}
    	return 0;
    }

    if (!hello_print) {
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x128>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00a      	beq.n	8000f46 <main+0x52>
  	  hello_print = true;
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <main+0x128>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
  	  transmitc("\n\r\n\rProgramm started\n\r");
 8000f36:	483a      	ldr	r0, [pc, #232]	; (8001020 <main+0x12c>)
 8000f38:	f7ff ff08 	bl	8000d4c <transmitc>
  	  print_mode_message();
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	469c      	mov	ip, r3
 8000f42:	f000 f87f 	bl	8001044 <print_mode_message.0>
    }

    cur_mode = 0;
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <main+0x130>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4836      	ldr	r0, [pc, #216]	; (8001028 <main+0x134>)
 8000f50:	f003 fa82 	bl	8004458 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f54:	2108      	movs	r1, #8
 8000f56:	4834      	ldr	r0, [pc, #208]	; (8001028 <main+0x134>)
 8000f58:	f003 fa7e 	bl	8004458 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f5c:	210c      	movs	r1, #12
 8000f5e:	4832      	ldr	r0, [pc, #200]	; (8001028 <main+0x134>)
 8000f60:	f003 fa7a 	bl	8004458 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim6);
 8000f64:	4831      	ldr	r0, [pc, #196]	; (800102c <main+0x138>)
 8000f66:	f003 f9b7 	bl	80042d8 <HAL_TIM_Base_Start_IT>
    KBRD_Init();
 8000f6a:	f7ff fdd7 	bl	8000b1c <KBRD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BTN_GetState(&btn_state);
 8000f6e:	f107 030a 	add.w	r3, r7, #10
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fb4c 	bl	8000610 <BTN_GetState>

	  if (BTN_IsSet(&btn_state, BTN_DOWN_EVENT)) {
 8000f78:	f107 030a 	add.w	r3, r7, #10
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fb10 	bl	80005a4 <BTN_IsSet>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d01a      	beq.n	8000fc0 <main+0xcc>
		  if (state == ST_MAIN) {
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <main+0x13c>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <main+0xac>
			  state = ST_DEBUG;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <main+0x13c>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	801a      	strh	r2, [r3, #0]
			  transmitc("\n\rDebug mode entered\n\r> ");
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <main+0x140>)
 8000f9a:	f7ff fed7 	bl	8000d4c <transmitc>
		  } else if (state == ST_DEBUG) {
			  state = ST_MAIN;
			  transmitc("\n\rDebug mode exit\n\r");
		  	  print_mode_message();
		  }
		  continue;
 8000f9e:	e038      	b.n	8001012 <main+0x11e>
		  } else if (state == ST_DEBUG) {
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <main+0x13c>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d134      	bne.n	8001012 <main+0x11e>
			  state = ST_MAIN;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <main+0x13c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
			  transmitc("\n\rDebug mode exit\n\r");
 8000fae:	4822      	ldr	r0, [pc, #136]	; (8001038 <main+0x144>)
 8000fb0:	f7ff fecc 	bl	8000d4c <transmitc>
		  	  print_mode_message();
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	469c      	mov	ip, r3
 8000fba:	f000 f843 	bl	8001044 <print_mode_message.0>
 8000fbe:	e7d6      	b.n	8000f6e <main+0x7a>
	  }

	  KBRD_GetState(&kbrd_state);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fdfb 	bl	8000bc0 <KBRD_GetState>

	  char c = parse_pressed_button(&kbrd_state);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	f107 020c 	add.w	r2, r7, #12
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fad5 	bl	8001584 <parse_pressed_button.2>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]

	  if (c != 0) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0c4      	beq.n	8000f6e <main+0x7a>
		  if (c == '\r') {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b0d      	cmp	r3, #13
 8000fe8:	d103      	bne.n	8000ff2 <main+0xfe>
			  transmitc("Enter");
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <main+0x148>)
 8000fec:	f7ff feae 	bl	8000d4c <transmitc>
 8000ff0:	e004      	b.n	8000ffc <main+0x108>
		  } else {
			  transmit((uint8_t*) &c, 1);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe8c 	bl	8000d14 <transmit>
		  }
		  transmitc("\n\r");
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <main+0x14c>)
 8000ffe:	f7ff fea5 	bl	8000d4c <transmitc>
		  handle_command(c);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f107 020c 	add.w	r2, r7, #12
 8001008:	4694      	mov	ip, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f8e0 	bl	80011d0 <handle_command.3>
 8001010:	e7ad      	b.n	8000f6e <main+0x7a>
		  continue;
 8001012:	bf00      	nop
  {
 8001014:	e7ab      	b.n	8000f6e <main+0x7a>
 8001016:	bf00      	nop
 8001018:	20000138 	.word	0x20000138
 800101c:	2000093e 	.word	0x2000093e
 8001020:	080067f4 	.word	0x080067f4
 8001024:	20000040 	.word	0x20000040
 8001028:	20000954 	.word	0x20000954
 800102c:	2000099c 	.word	0x2000099c
 8001030:	20000940 	.word	0x20000940
 8001034:	0800680c 	.word	0x0800680c
 8001038:	08006828 	.word	0x08006828
 800103c:	0800683c 	.word	0x0800683c
 8001040:	08006844 	.word	0x08006844

08001044 <print_mode_message.0>:
    void print_mode_message() {
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b0fb      	sub	sp, #492	; 0x1ec
 8001048:	af12      	add	r7, sp, #72	; 0x48
 800104a:	4664      	mov	r4, ip
 800104c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001050:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001054:	f8c3 c000 	str.w	ip, [r3]
  	  char mode_leds_str[9] = {0};
 8001058:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800105c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	3304      	adds	r3, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	711a      	strb	r2, [r3, #4]
  	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001072:	e018      	b.n	80010a6 <print_mode_message.0+0x62>
  		  mode_leds_str[i] = leds_str(mode_leds[i]);
 8001074:	4a53      	ldr	r2, [pc, #332]	; (80011c4 <print_mode_message.0+0x180>)
 8001076:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800107a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107e:	46a4      	mov	ip, r4
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff19 	bl	8000eb8 <leds_str.1>
 8001086:	4603      	mov	r3, r0
 8001088:	4619      	mov	r1, r3
 800108a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800108e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001092:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001096:	4413      	add	r3, r2
 8001098:	460a      	mov	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
  	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 800109c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80010a0:	3301      	adds	r3, #1
 80010a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d9e2      	bls.n	8001074 <print_mode_message.0+0x30>
  	  char format[] = "Modes:\n\r1-%c%d\n\r2-%c%d\n\r3-%c%d\n\r4-%c%d\n\r5-%c%d\n\r6-%c%d\n\r7-%c%d\n\r8-%c%d\n\r9-%c%d\n\r> ";
 80010ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010b2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80010b6:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <print_mode_message.0+0x184>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	4611      	mov	r1, r2
 80010bc:	2353      	movs	r3, #83	; 0x53
 80010be:	461a      	mov	r2, r3
 80010c0:	f004 ff02 	bl	8005ec8 <memcpy>
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010cc:	781b      	ldrb	r3, [r3, #0]
  	  snprintf(buf, sizeof(buf), format,
 80010ce:	469c      	mov	ip, r3
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <print_mode_message.0+0x188>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
  	  snprintf(buf, sizeof(buf), format,
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010d6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010de:	785b      	ldrb	r3, [r3, #1]
  	  snprintf(buf, sizeof(buf), format,
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <print_mode_message.0+0x188>)
 80010e4:	885b      	ldrh	r3, [r3, #2]
  	  snprintf(buf, sizeof(buf), format,
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010f0:	789b      	ldrb	r3, [r3, #2]
  	  snprintf(buf, sizeof(buf), format,
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <print_mode_message.0+0x188>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
  	  snprintf(buf, sizeof(buf), format,
 80010f8:	623b      	str	r3, [r7, #32]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 80010fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001102:	78db      	ldrb	r3, [r3, #3]
  	  snprintf(buf, sizeof(buf), format,
 8001104:	61fb      	str	r3, [r7, #28]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <print_mode_message.0+0x188>)
 8001108:	88db      	ldrh	r3, [r3, #6]
  	  snprintf(buf, sizeof(buf), format,
 800110a:	61bb      	str	r3, [r7, #24]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 800110c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001114:	791b      	ldrb	r3, [r3, #4]
  	  snprintf(buf, sizeof(buf), format,
 8001116:	617b      	str	r3, [r7, #20]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <print_mode_message.0+0x188>)
 800111a:	891b      	ldrh	r3, [r3, #8]
  	  snprintf(buf, sizeof(buf), format,
 800111c:	613b      	str	r3, [r7, #16]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 800111e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001122:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001126:	795b      	ldrb	r3, [r3, #5]
  	  snprintf(buf, sizeof(buf), format,
 8001128:	60fb      	str	r3, [r7, #12]
  			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <print_mode_message.0+0x188>)
 800112c:	895b      	ldrh	r3, [r3, #10]
  	  snprintf(buf, sizeof(buf), format,
 800112e:	60bb      	str	r3, [r7, #8]
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8001130:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001134:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001138:	799b      	ldrb	r3, [r3, #6]
  	  snprintf(buf, sizeof(buf), format,
 800113a:	607b      	str	r3, [r7, #4]
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <print_mode_message.0+0x188>)
 800113e:	899b      	ldrh	r3, [r3, #12]
  	  snprintf(buf, sizeof(buf), format,
 8001140:	461e      	mov	r6, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8001142:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001146:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800114a:	79db      	ldrb	r3, [r3, #7]
  	  snprintf(buf, sizeof(buf), format,
 800114c:	461d      	mov	r5, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <print_mode_message.0+0x188>)
 8001150:	89db      	ldrh	r3, [r3, #14]
  	  snprintf(buf, sizeof(buf), format,
 8001152:	461c      	mov	r4, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8001154:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800115c:	7a1b      	ldrb	r3, [r3, #8]
  	  snprintf(buf, sizeof(buf), format,
 800115e:	4619      	mov	r1, r3
  			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <print_mode_message.0+0x188>)
 8001162:	8a1b      	ldrh	r3, [r3, #16]
  	  snprintf(buf, sizeof(buf), format,
 8001164:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001168:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800116c:	9310      	str	r3, [sp, #64]	; 0x40
 800116e:	910f      	str	r1, [sp, #60]	; 0x3c
 8001170:	940e      	str	r4, [sp, #56]	; 0x38
 8001172:	950d      	str	r5, [sp, #52]	; 0x34
 8001174:	960c      	str	r6, [sp, #48]	; 0x30
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	910b      	str	r1, [sp, #44]	; 0x2c
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	910a      	str	r1, [sp, #40]	; 0x28
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	9109      	str	r1, [sp, #36]	; 0x24
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	9108      	str	r1, [sp, #32]
 8001186:	6979      	ldr	r1, [r7, #20]
 8001188:	9107      	str	r1, [sp, #28]
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	9106      	str	r1, [sp, #24]
 800118e:	69f9      	ldr	r1, [r7, #28]
 8001190:	9105      	str	r1, [sp, #20]
 8001192:	6a39      	ldr	r1, [r7, #32]
 8001194:	9104      	str	r1, [sp, #16]
 8001196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001198:	9103      	str	r1, [sp, #12]
 800119a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800119c:	9102      	str	r1, [sp, #8]
 800119e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011a0:	9101      	str	r1, [sp, #4]
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4663      	mov	r3, ip
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	f004 fea2 	bl	8005ef4 <sniprintf>
  	  transmitc(buf);
 80011b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fdc9 	bl	8000d4c <transmitc>
    }
 80011ba:	bf00      	nop
 80011bc:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c4:	20000018 	.word	0x20000018
 80011c8:	08006848 	.word	0x08006848
 80011cc:	2000002c 	.word	0x2000002c

080011d0 <handle_command.3>:
    void handle_command(char cmd) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b0a5      	sub	sp, #148	; 0x94
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	4664      	mov	r4, ip
 80011dc:	f8c7 c000 	str.w	ip, [r7]
  	  if (state == ST_MAIN) {
 80011e0:	4b95      	ldr	r3, [pc, #596]	; (8001438 <handle_command.3+0x268>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d133      	bne.n	8001250 <handle_command.3+0x80>
  		  if (cmd >= '1' && cmd <= '9') {
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b30      	cmp	r3, #48	; 0x30
 80011ec:	d914      	bls.n	8001218 <handle_command.3+0x48>
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b39      	cmp	r3, #57	; 0x39
 80011f2:	d811      	bhi.n	8001218 <handle_command.3+0x48>
  			  cur_mode = (cmd - '1');
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3b31      	subs	r3, #49	; 0x31
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b90      	ldr	r3, [pc, #576]	; (800143c <handle_command.3+0x26c>)
 80011fc:	601a      	str	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f107 000c 	add.w	r0, r7, #12
 8001204:	4a8e      	ldr	r2, [pc, #568]	; (8001440 <handle_command.3+0x270>)
 8001206:	2120      	movs	r1, #32
 8001208:	f004 fe74 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd9b 	bl	8000d4c <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 8001216:	e19c      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '0') {
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b30      	cmp	r3, #48	; 0x30
 800121c:	d106      	bne.n	800122c <handle_command.3+0x5c>
  			  cur_mode = 100;
 800121e:	4b87      	ldr	r3, [pc, #540]	; (800143c <handle_command.3+0x26c>)
 8001220:	2264      	movs	r2, #100	; 0x64
 8001222:	601a      	str	r2, [r3, #0]
  			  transmitc("All LEDs off\n\r> ");
 8001224:	4887      	ldr	r0, [pc, #540]	; (8001444 <handle_command.3+0x274>)
 8001226:	f7ff fd91 	bl	8000d4c <transmitc>
    }
 800122a:	e192      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '\r') {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b0d      	cmp	r3, #13
 8001230:	d10a      	bne.n	8001248 <handle_command.3+0x78>
  			  state = ST_EDIT_WAIT_MODE;
 8001232:	4b81      	ldr	r3, [pc, #516]	; (8001438 <handle_command.3+0x268>)
 8001234:	2201      	movs	r2, #1
 8001236:	801a      	strh	r2, [r3, #0]
  			  edit_mode = -1;
 8001238:	4b83      	ldr	r3, [pc, #524]	; (8001448 <handle_command.3+0x278>)
 800123a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800123e:	601a      	str	r2, [r3, #0]
  			  transmitc("Enter edit mode\n\rChoose mode to edit [1-9]: ");
 8001240:	4882      	ldr	r0, [pc, #520]	; (800144c <handle_command.3+0x27c>)
 8001242:	f7ff fd83 	bl	8000d4c <transmitc>
    }
 8001246:	e184      	b.n	8001552 <handle_command.3+0x382>
  			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8001248:	4881      	ldr	r0, [pc, #516]	; (8001450 <handle_command.3+0x280>)
 800124a:	f7ff fd7f 	bl	8000d4c <transmitc>
    }
 800124e:	e180      	b.n	8001552 <handle_command.3+0x382>
  	  } else if (state == ST_EDIT_WAIT_MODE) {
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <handle_command.3+0x268>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d147      	bne.n	80012e8 <handle_command.3+0x118>
  		  if (cmd >= '1' && cmd <= '9') {
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b30      	cmp	r3, #48	; 0x30
 800125c:	d916      	bls.n	800128c <handle_command.3+0xbc>
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b39      	cmp	r3, #57	; 0x39
 8001262:	d813      	bhi.n	800128c <handle_command.3+0xbc>
  			  edit_mode = (cmd - '1');
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	3b31      	subs	r3, #49	; 0x31
 8001268:	461a      	mov	r2, r3
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <handle_command.3+0x278>)
 800126c:	601a      	str	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <handle_command.3+0x278>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3331      	adds	r3, #49	; 0x31
 8001274:	f107 000c 	add.w	r0, r7, #12
 8001278:	4a76      	ldr	r2, [pc, #472]	; (8001454 <handle_command.3+0x284>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	f004 fe3a 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd61 	bl	8000d4c <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 800128a:	e162      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '\r') {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b0d      	cmp	r3, #13
 8001290:	d112      	bne.n	80012b8 <handle_command.3+0xe8>
  			  if (edit_mode == -1) {
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <handle_command.3+0x278>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800129a:	d103      	bne.n	80012a4 <handle_command.3+0xd4>
  				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 800129c:	486e      	ldr	r0, [pc, #440]	; (8001458 <handle_command.3+0x288>)
 800129e:	f7ff fd55 	bl	8000d4c <transmitc>
    }
 80012a2:	e156      	b.n	8001552 <handle_command.3+0x382>
  				  state = ST_EDIT_WAIT_LED;
 80012a4:	4b64      	ldr	r3, [pc, #400]	; (8001438 <handle_command.3+0x268>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	801a      	strh	r2, [r3, #0]
  				  edit_mode_led = 0;
 80012aa:	4b6c      	ldr	r3, [pc, #432]	; (800145c <handle_command.3+0x28c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
  				  transmitc("Choose led for mode [g,y,r]: ");
 80012b0:	486b      	ldr	r0, [pc, #428]	; (8001460 <handle_command.3+0x290>)
 80012b2:	f7ff fd4b 	bl	8000d4c <transmitc>
    }
 80012b6:	e14c      	b.n	8001552 <handle_command.3+0x382>
  			  if (edit_mode == -1) {
 80012b8:	4b63      	ldr	r3, [pc, #396]	; (8001448 <handle_command.3+0x278>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c0:	d103      	bne.n	80012ca <handle_command.3+0xfa>
  				  transmitc("Unknown. Choose mode to edit [1-9]: ");
 80012c2:	4868      	ldr	r0, [pc, #416]	; (8001464 <handle_command.3+0x294>)
 80012c4:	f7ff fd42 	bl	8000d4c <transmitc>
    }
 80012c8:	e143      	b.n	8001552 <handle_command.3+0x382>
  				  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <handle_command.3+0x278>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3331      	adds	r3, #49	; 0x31
 80012d0:	f107 000c 	add.w	r0, r7, #12
 80012d4:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <handle_command.3+0x284>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	f004 fe0c 	bl	8005ef4 <sniprintf>
  				  transmitc(buf);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd33 	bl	8000d4c <transmitc>
    }
 80012e6:	e134      	b.n	8001552 <handle_command.3+0x382>
  	  } else if (state == ST_EDIT_WAIT_LED) {
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <handle_command.3+0x268>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d157      	bne.n	80013a0 <handle_command.3+0x1d0>
  		  if (cmd == 'g') {
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b67      	cmp	r3, #103	; 0x67
 80012f4:	d106      	bne.n	8001304 <handle_command.3+0x134>
  			  edit_mode_led = 0x1;
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <handle_command.3+0x28c>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	801a      	strh	r2, [r3, #0]
  			  transmitc("Green led. Enter or choose another led [g,y,r]: ");
 80012fc:	485a      	ldr	r0, [pc, #360]	; (8001468 <handle_command.3+0x298>)
 80012fe:	f7ff fd25 	bl	8000d4c <transmitc>
    }
 8001302:	e126      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == 'y') {
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b79      	cmp	r3, #121	; 0x79
 8001308:	d106      	bne.n	8001318 <handle_command.3+0x148>
  			  edit_mode_led = 0x2;
 800130a:	4b54      	ldr	r3, [pc, #336]	; (800145c <handle_command.3+0x28c>)
 800130c:	2202      	movs	r2, #2
 800130e:	801a      	strh	r2, [r3, #0]
  			  transmitc("Yellow led. Enter or choose another led [g,y,r]: ");
 8001310:	4856      	ldr	r0, [pc, #344]	; (800146c <handle_command.3+0x29c>)
 8001312:	f7ff fd1b 	bl	8000d4c <transmitc>
    }
 8001316:	e11c      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == 'r') {
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b72      	cmp	r3, #114	; 0x72
 800131c:	d106      	bne.n	800132c <handle_command.3+0x15c>
  			  edit_mode_led = 0x4;
 800131e:	4b4f      	ldr	r3, [pc, #316]	; (800145c <handle_command.3+0x28c>)
 8001320:	2204      	movs	r2, #4
 8001322:	801a      	strh	r2, [r3, #0]
  			  transmitc("Red led. Enter or choose another led [g,y,r]: ");
 8001324:	4852      	ldr	r0, [pc, #328]	; (8001470 <handle_command.3+0x2a0>)
 8001326:	f7ff fd11 	bl	8000d4c <transmitc>
    }
 800132a:	e112      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '\r') {
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b0d      	cmp	r3, #13
 8001330:	d111      	bne.n	8001356 <handle_command.3+0x186>
  			  if (edit_mode_led == 0) {
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <handle_command.3+0x28c>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <handle_command.3+0x172>
  				  transmitc("No led. Choose led for mode [g,y,r]: ");
 800133a:	484e      	ldr	r0, [pc, #312]	; (8001474 <handle_command.3+0x2a4>)
 800133c:	f7ff fd06 	bl	8000d4c <transmitc>
    }
 8001340:	e107      	b.n	8001552 <handle_command.3+0x382>
  				  state = ST_EDIT_WAIT_BRIGHT;
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <handle_command.3+0x268>)
 8001344:	2203      	movs	r2, #3
 8001346:	801a      	strh	r2, [r3, #0]
  				  edit_mode_brightness = 40;
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <handle_command.3+0x2a8>)
 800134a:	2228      	movs	r2, #40	; 0x28
 800134c:	801a      	strh	r2, [r3, #0]
  				  transmitc("40%. Enter or choose another brightness: ");
 800134e:	484b      	ldr	r0, [pc, #300]	; (800147c <handle_command.3+0x2ac>)
 8001350:	f7ff fcfc 	bl	8000d4c <transmitc>
    }
 8001354:	e0fd      	b.n	8001552 <handle_command.3+0x382>
  			  if (edit_mode_led == 0) {
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <handle_command.3+0x28c>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <handle_command.3+0x196>
  				  transmitc("Unknown. Choose led for mode [g,y,r]: ");
 800135e:	4848      	ldr	r0, [pc, #288]	; (8001480 <handle_command.3+0x2b0>)
 8001360:	f7ff fcf4 	bl	8000d4c <transmitc>
    }
 8001364:	e0f5      	b.n	8001552 <handle_command.3+0x382>
  				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <handle_command.3+0x28c>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d007      	beq.n	800137e <handle_command.3+0x1ae>
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <handle_command.3+0x28c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d101      	bne.n	800137a <handle_command.3+0x1aa>
 8001376:	4b43      	ldr	r3, [pc, #268]	; (8001484 <handle_command.3+0x2b4>)
 8001378:	e002      	b.n	8001380 <handle_command.3+0x1b0>
 800137a:	4b43      	ldr	r3, [pc, #268]	; (8001488 <handle_command.3+0x2b8>)
 800137c:	e000      	b.n	8001380 <handle_command.3+0x1b0>
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <handle_command.3+0x2bc>)
 8001380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  				  snprintf(buf, sizeof(buf), "%s led. Enter or choose another led [g,y,r]: ", led);
 8001384:	f107 000c 	add.w	r0, r7, #12
 8001388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800138c:	4a40      	ldr	r2, [pc, #256]	; (8001490 <handle_command.3+0x2c0>)
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	f004 fdb0 	bl	8005ef4 <sniprintf>
  				  transmitc(buf);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fcd7 	bl	8000d4c <transmitc>
    }
 800139e:	e0d8      	b.n	8001552 <handle_command.3+0x382>
  	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <handle_command.3+0x268>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	f040 80c0 	bne.w	800152a <handle_command.3+0x35a>
  		  if (cmd >= '1' && cmd <= '9') {
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b30      	cmp	r3, #48	; 0x30
 80013ae:	d91a      	bls.n	80013e6 <handle_command.3+0x216>
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b39      	cmp	r3, #57	; 0x39
 80013b4:	d817      	bhi.n	80013e6 <handle_command.3+0x216>
  			  edit_mode_brightness = (cmd - '0') * 10;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3b30      	subs	r3, #48	; 0x30
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <handle_command.3+0x2a8>)
 80013c8:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <handle_command.3+0x2a8>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f107 000c 	add.w	r0, r7, #12
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <handle_command.3+0x2c4>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	f004 fd8d 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcb4 	bl	8000d4c <transmitc>
  		  if (cmd >= '1' && cmd <= '9') {
 80013e4:	e0b5      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '0') {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b30      	cmp	r3, #48	; 0x30
 80013ea:	d106      	bne.n	80013fa <handle_command.3+0x22a>
  			  edit_mode_brightness = 100;
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <handle_command.3+0x2a8>)
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	801a      	strh	r2, [r3, #0]
  			  transmitc("100%. Enter or choose another: ");
 80013f2:	4829      	ldr	r0, [pc, #164]	; (8001498 <handle_command.3+0x2c8>)
 80013f4:	f7ff fcaa 	bl	8000d4c <transmitc>
    }
 80013f8:	e0ab      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '+') {
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b2b      	cmp	r3, #43	; 0x2b
 80013fe:	d14d      	bne.n	800149c <handle_command.3+0x2cc>
  			  edit_mode_brightness += 10;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <handle_command.3+0x2a8>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	330a      	adds	r3, #10
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <handle_command.3+0x2a8>)
 800140a:	801a      	strh	r2, [r3, #0]
  			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <handle_command.3+0x2a8>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d902      	bls.n	800141a <handle_command.3+0x24a>
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <handle_command.3+0x2a8>)
 8001416:	2264      	movs	r2, #100	; 0x64
 8001418:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <handle_command.3+0x2a8>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	f107 000c 	add.w	r0, r7, #12
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <handle_command.3+0x2c4>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	f004 fd65 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fc8c 	bl	8000d4c <transmitc>
    }
 8001434:	e08d      	b.n	8001552 <handle_command.3+0x382>
 8001436:	bf00      	nop
 8001438:	20000940 	.word	0x20000940
 800143c:	20000040 	.word	0x20000040
 8001440:	0800689c 	.word	0x0800689c
 8001444:	080068b4 	.word	0x080068b4
 8001448:	20000944 	.word	0x20000944
 800144c:	080068c8 	.word	0x080068c8
 8001450:	080068f8 	.word	0x080068f8
 8001454:	08006928 	.word	0x08006928
 8001458:	0800695c 	.word	0x0800695c
 800145c:	20000948 	.word	0x20000948
 8001460:	0800698c 	.word	0x0800698c
 8001464:	080069ac 	.word	0x080069ac
 8001468:	080069d4 	.word	0x080069d4
 800146c:	08006a08 	.word	0x08006a08
 8001470:	08006a3c 	.word	0x08006a3c
 8001474:	08006a6c 	.word	0x08006a6c
 8001478:	2000094a 	.word	0x2000094a
 800147c:	08006a94 	.word	0x08006a94
 8001480:	08006ac0 	.word	0x08006ac0
 8001484:	08006ae8 	.word	0x08006ae8
 8001488:	08006af0 	.word	0x08006af0
 800148c:	08006af4 	.word	0x08006af4
 8001490:	08006afc 	.word	0x08006afc
 8001494:	08006b2c 	.word	0x08006b2c
 8001498:	08006b4c 	.word	0x08006b4c
  		  } else if (cmd == '-') {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b2d      	cmp	r3, #45	; 0x2d
 80014a0:	d11a      	bne.n	80014d8 <handle_command.3+0x308>
  			  edit_mode_brightness -= 10;
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <handle_command.3+0x38c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	3b0a      	subs	r3, #10
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <handle_command.3+0x38c>)
 80014ac:	801a      	strh	r2, [r3, #0]
  			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <handle_command.3+0x38c>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	d802      	bhi.n	80014bc <handle_command.3+0x2ec>
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <handle_command.3+0x38c>)
 80014b8:	220a      	movs	r2, #10
 80014ba:	801a      	strh	r2, [r3, #0]
  			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <handle_command.3+0x38c>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	f107 000c 	add.w	r0, r7, #12
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <handle_command.3+0x390>)
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	f004 fd14 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fc3b 	bl	8000d4c <transmitc>
    }
 80014d6:	e03c      	b.n	8001552 <handle_command.3+0x382>
  		  } else if (cmd == '\r') {
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b0d      	cmp	r3, #13
 80014dc:	d117      	bne.n	800150e <handle_command.3+0x33e>
  			  state = ST_MAIN;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <handle_command.3+0x394>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
  			  mode_leds[edit_mode] = edit_mode_led;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <handle_command.3+0x398>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <handle_command.3+0x39c>)
 80014ea:	8811      	ldrh	r1, [r2, #0]
 80014ec:	4a20      	ldr	r2, [pc, #128]	; (8001570 <handle_command.3+0x3a0>)
 80014ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  			  mode_brightness[edit_mode] = edit_mode_brightness;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <handle_command.3+0x398>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a19      	ldr	r2, [pc, #100]	; (800155c <handle_command.3+0x38c>)
 80014f8:	8811      	ldrh	r1, [r2, #0]
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <handle_command.3+0x3a4>)
 80014fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  			  transmitc("Exit edit mode");
 8001500:	481d      	ldr	r0, [pc, #116]	; (8001578 <handle_command.3+0x3a8>)
 8001502:	f7ff fc23 	bl	8000d4c <transmitc>
  			  print_mode_message();
 8001506:	46a4      	mov	ip, r4
 8001508:	f7ff fd9c 	bl	8001044 <print_mode_message.0>
    }
 800150c:	e021      	b.n	8001552 <handle_command.3+0x382>
  			  snprintf(buf, sizeof(buf), "Unknown. %d%%. Enter or choose another: ", edit_mode_brightness);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <handle_command.3+0x38c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <handle_command.3+0x3ac>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	f004 fceb 	bl	8005ef4 <sniprintf>
  			  transmitc(buf);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc12 	bl	8000d4c <transmitc>
    }
 8001528:	e013      	b.n	8001552 <handle_command.3+0x382>
  	  } else if (state == ST_DEBUG) {
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <handle_command.3+0x394>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d10f      	bne.n	8001552 <handle_command.3+0x382>
  		  if ((cmd >= '0' && cmd <= '9') || cmd == '*' || cmd == '#') {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b2f      	cmp	r3, #47	; 0x2f
 8001536:	d902      	bls.n	800153e <handle_command.3+0x36e>
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b39      	cmp	r3, #57	; 0x39
 800153c:	d905      	bls.n	800154a <handle_command.3+0x37a>
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b2a      	cmp	r3, #42	; 0x2a
 8001542:	d002      	beq.n	800154a <handle_command.3+0x37a>
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b23      	cmp	r3, #35	; 0x23
 8001548:	d103      	bne.n	8001552 <handle_command.3+0x382>
  			  transmitc("> ");
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <handle_command.3+0x3b0>)
 800154c:	f7ff fbfe 	bl	8000d4c <transmitc>
    }
 8001550:	e7ff      	b.n	8001552 <handle_command.3+0x382>
 8001552:	bf00      	nop
 8001554:	3794      	adds	r7, #148	; 0x94
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	2000094a 	.word	0x2000094a
 8001560:	08006b2c 	.word	0x08006b2c
 8001564:	20000940 	.word	0x20000940
 8001568:	20000944 	.word	0x20000944
 800156c:	20000948 	.word	0x20000948
 8001570:	20000018 	.word	0x20000018
 8001574:	2000002c 	.word	0x2000002c
 8001578:	08006b6c 	.word	0x08006b6c
 800157c:	08006b7c 	.word	0x08006b7c
 8001580:	08006ba8 	.word	0x08006ba8

08001584 <parse_pressed_button.2>:
    char parse_pressed_button(uint16_t* keyboard) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	f8c7 c000 	str.w	ip, [r7]
    	if (state == ST_MAIN) {
 8001590:	4baa      	ldr	r3, [pc, #680]	; (800183c <parse_pressed_button.2+0x2b8>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d171      	bne.n	800167c <parse_pressed_button.2+0xf8>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 8001598:	2101      	movs	r1, #1
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fada 	bl	8000b54 <KBRD_IsSet>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <parse_pressed_button.2+0x26>
 80015a6:	2331      	movs	r3, #49	; 0x31
 80015a8:	e243      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 80015aa:	2102      	movs	r1, #2
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fad1 	bl	8000b54 <KBRD_IsSet>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <parse_pressed_button.2+0x38>
 80015b8:	2334      	movs	r3, #52	; 0x34
 80015ba:	e23a      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 80015bc:	2104      	movs	r1, #4
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fac8 	bl	8000b54 <KBRD_IsSet>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <parse_pressed_button.2+0x4a>
 80015ca:	2337      	movs	r3, #55	; 0x37
 80015cc:	e231      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 80015ce:	2108      	movs	r1, #8
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fabf 	bl	8000b54 <KBRD_IsSet>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <parse_pressed_button.2+0x5c>
 80015dc:	2300      	movs	r3, #0
 80015de:	e228      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 80015e0:	2110      	movs	r1, #16
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fab6 	bl	8000b54 <KBRD_IsSet>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <parse_pressed_button.2+0x6e>
 80015ee:	2332      	movs	r3, #50	; 0x32
 80015f0:	e21f      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 80015f2:	2120      	movs	r1, #32
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff faad 	bl	8000b54 <KBRD_IsSet>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <parse_pressed_button.2+0x80>
 8001600:	2335      	movs	r3, #53	; 0x35
 8001602:	e216      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff faa4 	bl	8000b54 <KBRD_IsSet>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <parse_pressed_button.2+0x92>
 8001612:	2338      	movs	r3, #56	; 0x38
 8001614:	e20d      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_8)) return '0';
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fa9b 	bl	8000b54 <KBRD_IsSet>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <parse_pressed_button.2+0xa4>
 8001624:	2330      	movs	r3, #48	; 0x30
 8001626:	e204      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fa91 	bl	8000b54 <KBRD_IsSet>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <parse_pressed_button.2+0xb8>
 8001638:	2333      	movs	r3, #51	; 0x33
 800163a:	e1fa      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fa87 	bl	8000b54 <KBRD_IsSet>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <parse_pressed_button.2+0xcc>
 800164c:	2336      	movs	r3, #54	; 0x36
 800164e:	e1f0      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fa7d 	bl	8000b54 <KBRD_IsSet>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <parse_pressed_button.2+0xe0>
 8001660:	2339      	movs	r3, #57	; 0x39
 8001662:	e1e6      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 8001664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fa73 	bl	8000b54 <KBRD_IsSet>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <parse_pressed_button.2+0xf4>
 8001674:	230d      	movs	r3, #13
 8001676:	e1dc      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			return 0;
 8001678:	2300      	movs	r3, #0
 800167a:	e1da      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
		} else if (state == ST_EDIT_WAIT_MODE) {
 800167c:	4b6f      	ldr	r3, [pc, #444]	; (800183c <parse_pressed_button.2+0x2b8>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d171      	bne.n	8001768 <parse_pressed_button.2+0x1e4>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 8001684:	2101      	movs	r1, #1
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fa64 	bl	8000b54 <KBRD_IsSet>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <parse_pressed_button.2+0x112>
 8001692:	2331      	movs	r3, #49	; 0x31
 8001694:	e1cd      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 8001696:	2102      	movs	r1, #2
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fa5b 	bl	8000b54 <KBRD_IsSet>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <parse_pressed_button.2+0x124>
 80016a4:	2334      	movs	r3, #52	; 0x34
 80016a6:	e1c4      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 80016a8:	2104      	movs	r1, #4
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa52 	bl	8000b54 <KBRD_IsSet>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <parse_pressed_button.2+0x136>
 80016b6:	2337      	movs	r3, #55	; 0x37
 80016b8:	e1bb      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 80016ba:	2108      	movs	r1, #8
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fa49 	bl	8000b54 <KBRD_IsSet>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <parse_pressed_button.2+0x148>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e1b2      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 80016cc:	2110      	movs	r1, #16
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fa40 	bl	8000b54 <KBRD_IsSet>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <parse_pressed_button.2+0x15a>
 80016da:	2332      	movs	r3, #50	; 0x32
 80016dc:	e1a9      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 80016de:	2120      	movs	r1, #32
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fa37 	bl	8000b54 <KBRD_IsSet>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <parse_pressed_button.2+0x16c>
 80016ec:	2335      	movs	r3, #53	; 0x35
 80016ee:	e1a0      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fa2e 	bl	8000b54 <KBRD_IsSet>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <parse_pressed_button.2+0x17e>
 80016fe:	2338      	movs	r3, #56	; 0x38
 8001700:	e197      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_8)) return 0;
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fa25 	bl	8000b54 <KBRD_IsSet>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <parse_pressed_button.2+0x190>
 8001710:	2300      	movs	r3, #0
 8001712:	e18e      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fa1b 	bl	8000b54 <KBRD_IsSet>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <parse_pressed_button.2+0x1a4>
 8001724:	2333      	movs	r3, #51	; 0x33
 8001726:	e184      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 8001728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fa11 	bl	8000b54 <KBRD_IsSet>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <parse_pressed_button.2+0x1b8>
 8001738:	2336      	movs	r3, #54	; 0x36
 800173a:	e17a      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 800173c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fa07 	bl	8000b54 <KBRD_IsSet>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <parse_pressed_button.2+0x1cc>
 800174c:	2339      	movs	r3, #57	; 0x39
 800174e:	e170      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 8001750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff f9fd 	bl	8000b54 <KBRD_IsSet>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <parse_pressed_button.2+0x1e0>
 8001760:	230d      	movs	r3, #13
 8001762:	e166      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e164      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
		} else if (state == ST_EDIT_WAIT_LED) {
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <parse_pressed_button.2+0x2b8>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d173      	bne.n	8001858 <parse_pressed_button.2+0x2d4>
			if (KBRD_IsSet(keyboard, BTN_1)) return 'g';
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff f9ee 	bl	8000b54 <KBRD_IsSet>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <parse_pressed_button.2+0x1fe>
 800177e:	2367      	movs	r3, #103	; 0x67
 8001780:	e157      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_2)) return 0;
 8001782:	2102      	movs	r1, #2
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff f9e5 	bl	8000b54 <KBRD_IsSet>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <parse_pressed_button.2+0x210>
 8001790:	2300      	movs	r3, #0
 8001792:	e14e      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_3)) return 0;
 8001794:	2104      	movs	r1, #4
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f9dc 	bl	8000b54 <KBRD_IsSet>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <parse_pressed_button.2+0x222>
 80017a2:	2300      	movs	r3, #0
 80017a4:	e145      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_4)) return 0;
 80017a6:	2108      	movs	r1, #8
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff f9d3 	bl	8000b54 <KBRD_IsSet>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <parse_pressed_button.2+0x234>
 80017b4:	2300      	movs	r3, #0
 80017b6:	e13c      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_5)) return 'y';
 80017b8:	2110      	movs	r1, #16
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f9ca 	bl	8000b54 <KBRD_IsSet>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <parse_pressed_button.2+0x246>
 80017c6:	2379      	movs	r3, #121	; 0x79
 80017c8:	e133      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_6)) return 0;
 80017ca:	2120      	movs	r1, #32
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff f9c1 	bl	8000b54 <KBRD_IsSet>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <parse_pressed_button.2+0x258>
 80017d8:	2300      	movs	r3, #0
 80017da:	e12a      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_7)) return 0;
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff f9b8 	bl	8000b54 <KBRD_IsSet>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <parse_pressed_button.2+0x26a>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e121      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_8)) return 0;
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff f9af 	bl	8000b54 <KBRD_IsSet>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <parse_pressed_button.2+0x27c>
 80017fc:	2300      	movs	r3, #0
 80017fe:	e118      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_9)) return 'r';
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff f9a5 	bl	8000b54 <KBRD_IsSet>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <parse_pressed_button.2+0x290>
 8001810:	2372      	movs	r3, #114	; 0x72
 8001812:	e10e      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_10)) return 0;
 8001814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff f99b 	bl	8000b54 <KBRD_IsSet>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <parse_pressed_button.2+0x2a4>
 8001824:	2300      	movs	r3, #0
 8001826:	e104      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_11)) return 0;
 8001828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff f991 	bl	8000b54 <KBRD_IsSet>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <parse_pressed_button.2+0x2bc>
 8001838:	2300      	movs	r3, #0
 800183a:	e0fa      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
 800183c:	20000940 	.word	0x20000940
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 8001840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff f985 	bl	8000b54 <KBRD_IsSet>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <parse_pressed_button.2+0x2d0>
 8001850:	230d      	movs	r3, #13
 8001852:	e0ee      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e0ec      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
		} else if (state == ST_EDIT_WAIT_BRIGHT) {
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <parse_pressed_button.2+0x4b8>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d171      	bne.n	8001944 <parse_pressed_button.2+0x3c0>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 8001860:	2101      	movs	r1, #1
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f976 	bl	8000b54 <KBRD_IsSet>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <parse_pressed_button.2+0x2ee>
 800186e:	2331      	movs	r3, #49	; 0x31
 8001870:	e0df      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 8001872:	2102      	movs	r1, #2
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff f96d 	bl	8000b54 <KBRD_IsSet>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <parse_pressed_button.2+0x300>
 8001880:	2334      	movs	r3, #52	; 0x34
 8001882:	e0d6      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 8001884:	2104      	movs	r1, #4
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff f964 	bl	8000b54 <KBRD_IsSet>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <parse_pressed_button.2+0x312>
 8001892:	2337      	movs	r3, #55	; 0x37
 8001894:	e0cd      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_4)) return '-';
 8001896:	2108      	movs	r1, #8
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff f95b 	bl	8000b54 <KBRD_IsSet>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <parse_pressed_button.2+0x324>
 80018a4:	232d      	movs	r3, #45	; 0x2d
 80018a6:	e0c4      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 80018a8:	2110      	movs	r1, #16
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff f952 	bl	8000b54 <KBRD_IsSet>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <parse_pressed_button.2+0x336>
 80018b6:	2332      	movs	r3, #50	; 0x32
 80018b8:	e0bb      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 80018ba:	2120      	movs	r1, #32
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff f949 	bl	8000b54 <KBRD_IsSet>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <parse_pressed_button.2+0x348>
 80018c8:	2335      	movs	r3, #53	; 0x35
 80018ca:	e0b2      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff f940 	bl	8000b54 <KBRD_IsSet>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <parse_pressed_button.2+0x35a>
 80018da:	2338      	movs	r3, #56	; 0x38
 80018dc:	e0a9      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_8)) return '+';
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff f937 	bl	8000b54 <KBRD_IsSet>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <parse_pressed_button.2+0x36c>
 80018ec:	232b      	movs	r3, #43	; 0x2b
 80018ee:	e0a0      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff f92d 	bl	8000b54 <KBRD_IsSet>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <parse_pressed_button.2+0x380>
 8001900:	2333      	movs	r3, #51	; 0x33
 8001902:	e096      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff f923 	bl	8000b54 <KBRD_IsSet>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <parse_pressed_button.2+0x394>
 8001914:	2336      	movs	r3, #54	; 0x36
 8001916:	e08c      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 8001918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f919 	bl	8000b54 <KBRD_IsSet>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <parse_pressed_button.2+0x3a8>
 8001928:	2339      	movs	r3, #57	; 0x39
 800192a:	e082      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_12)) return '\r';
 800192c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff f90f 	bl	8000b54 <KBRD_IsSet>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <parse_pressed_button.2+0x3bc>
 800193c:	230d      	movs	r3, #13
 800193e:	e078      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			return 0;
 8001940:	2300      	movs	r3, #0
 8001942:	e076      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
		} else if (state == ST_DEBUG) {
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <parse_pressed_button.2+0x4b8>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d171      	bne.n	8001a30 <parse_pressed_button.2+0x4ac>
			if (KBRD_IsSet(keyboard, BTN_1)) return '1';
 800194c:	2101      	movs	r1, #1
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff f900 	bl	8000b54 <KBRD_IsSet>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <parse_pressed_button.2+0x3da>
 800195a:	2331      	movs	r3, #49	; 0x31
 800195c:	e069      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_2)) return '4';
 800195e:	2102      	movs	r1, #2
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff f8f7 	bl	8000b54 <KBRD_IsSet>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <parse_pressed_button.2+0x3ec>
 800196c:	2334      	movs	r3, #52	; 0x34
 800196e:	e060      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_3)) return '7';
 8001970:	2104      	movs	r1, #4
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff f8ee 	bl	8000b54 <KBRD_IsSet>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <parse_pressed_button.2+0x3fe>
 800197e:	2337      	movs	r3, #55	; 0x37
 8001980:	e057      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_4)) return '*';
 8001982:	2108      	movs	r1, #8
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff f8e5 	bl	8000b54 <KBRD_IsSet>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <parse_pressed_button.2+0x410>
 8001990:	232a      	movs	r3, #42	; 0x2a
 8001992:	e04e      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_5)) return '2';
 8001994:	2110      	movs	r1, #16
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff f8dc 	bl	8000b54 <KBRD_IsSet>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <parse_pressed_button.2+0x422>
 80019a2:	2332      	movs	r3, #50	; 0x32
 80019a4:	e045      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_6)) return '5';
 80019a6:	2120      	movs	r1, #32
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f8d3 	bl	8000b54 <KBRD_IsSet>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <parse_pressed_button.2+0x434>
 80019b4:	2335      	movs	r3, #53	; 0x35
 80019b6:	e03c      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_7)) return '8';
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff f8ca 	bl	8000b54 <KBRD_IsSet>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <parse_pressed_button.2+0x446>
 80019c6:	2338      	movs	r3, #56	; 0x38
 80019c8:	e033      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_8)) return '0';
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff f8c1 	bl	8000b54 <KBRD_IsSet>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <parse_pressed_button.2+0x458>
 80019d8:	2330      	movs	r3, #48	; 0x30
 80019da:	e02a      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_9)) return '3';
 80019dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff f8b7 	bl	8000b54 <KBRD_IsSet>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <parse_pressed_button.2+0x46c>
 80019ec:	2333      	movs	r3, #51	; 0x33
 80019ee:	e020      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_10)) return '6';
 80019f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f8ad 	bl	8000b54 <KBRD_IsSet>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <parse_pressed_button.2+0x480>
 8001a00:	2336      	movs	r3, #54	; 0x36
 8001a02:	e016      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_11)) return '9';
 8001a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff f8a3 	bl	8000b54 <KBRD_IsSet>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <parse_pressed_button.2+0x494>
 8001a14:	2339      	movs	r3, #57	; 0x39
 8001a16:	e00c      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			if (KBRD_IsSet(keyboard, BTN_12)) return '#';
 8001a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff f899 	bl	8000b54 <KBRD_IsSet>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <parse_pressed_button.2+0x4a8>
 8001a28:	2323      	movs	r3, #35	; 0x23
 8001a2a:	e002      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
			return 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <parse_pressed_button.2+0x4ae>
    	return 0;
 8001a30:	2300      	movs	r3, #0
    }
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000940 	.word	0x20000940

08001a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b094      	sub	sp, #80	; 0x50
 8001a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	2230      	movs	r2, #48	; 0x30
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fa48 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <SystemClock_Config+0xb8>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <SystemClock_Config+0xb8>)
 8001a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <SystemClock_Config+0xb8>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <SystemClock_Config+0xbc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <SystemClock_Config+0xbc>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <SystemClock_Config+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 ff67 	bl	8003988 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ac0:	f000 f81e 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f9ca 	bl	8003e78 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001aea:	f000 f809 	bl	8001b00 <Error_Handler>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3750      	adds	r7, #80	; 0x50
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <PCA9538_Read_Register>:
 *      Author: andryssssss
 */

#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	80fb      	strh	r3, [r7, #6]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b299      	uxth	r1, r3
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <PCA9538_Read_Register+0x40>)
 8001b38:	f001 f92a 	bl	8002d90 <HAL_I2C_Mem_Read>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't read from PCA9538 register\n");
	}
	return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000dc 	.word	0x200000dc

08001b50 <PCA9538_Read_Inputs>:

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ffd2 	bl	8001b0c <PCA9538_Read_Register>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't read from PCA9538 input port\n");
	}
	return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <PCA9538_Write_Register>:
	}
	return status;
}


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af04      	add	r7, sp, #16
 8001b7e:	4603      	mov	r3, r0
 8001b80:	603a      	str	r2, [r7, #0]
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	460b      	mov	r3, r1
 8001b86:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	b299      	uxth	r1, r3
 8001b90:	797b      	ldrb	r3, [r7, #5]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2364      	movs	r3, #100	; 0x64
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <PCA9538_Write_Register+0x40>)
 8001ba4:	f000 fffa 	bl	8002b9c <HAL_I2C_Mem_Write>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK){
		// UART_Transmit("Can't write to PCA9538 register\n");
	}
	return status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000dc 	.word	0x200000dc

08001bbc <PCA9538_SetDefaultConfig>:

static uint8_t OUTPUT_PORT_DEFAULT = 0xFF;
static uint8_t POLARITY_INVERSION_DEFAULT = 0x00;
static uint8_t CONFIG_DEFAULT = 0xF0;

HAL_StatusTypeDef PCA9538_SetDefaultConfig(uint16_t addr) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = PCA9538_Write_Register(addr, OUTPUT_PORT, &OUTPUT_PORT_DEFAULT);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <PCA9538_SetDefaultConfig+0x58>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffd3 	bl	8001b78 <PCA9538_Write_Register>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <PCA9538_SetDefaultConfig+0x24>
		// UART_Transmit("Can't write to PCA9538 output port\n");
		return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e015      	b.n	8001c0c <PCA9538_SetDefaultConfig+0x50>
	}

	status = PCA9538_Write_Register(addr, POLARITY_INVERSION, &POLARITY_INVERSION_DEFAULT);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <PCA9538_SetDefaultConfig+0x5c>)
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ffc6 	bl	8001b78 <PCA9538_Write_Register>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <PCA9538_SetDefaultConfig+0x3e>
		// UART_Transmit("Can't write to PCA9538 polarity inversion\n");
		return status;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	e008      	b.n	8001c0c <PCA9538_SetDefaultConfig+0x50>
	}

	status = PCA9538_Write_Register(addr, CONFIG, &CONFIG_DEFAULT);
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <PCA9538_SetDefaultConfig+0x60>)
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffb9 	bl	8001b78 <PCA9538_Write_Register>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
		// UART_Transmit("Can't write to PCA9538 config\n");
	}
	return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000044 	.word	0x20000044
 8001c18:	2000094c 	.word	0x2000094c
 8001c1c:	20000045 	.word	0x20000045

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 fa7e 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM6_DAC_IRQHandler+0x10>)
 8001cca:	f002 fc8d 	bl	80045e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000099c 	.word	0x2000099c

08001cd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <USART6_IRQHandler+0x10>)
 8001cde:	f003 fa0d 	bl	80050fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200009e4 	.word	0x200009e4

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f004 f8aa 	bl	8005e74 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20030000 	.word	0x20030000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000950 	.word	0x20000950
 8001d54:	20000a40 	.word	0x20000a40

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001da0:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <MX_TIM4_Init+0xdc>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001da6:	220f      	movs	r2, #15
 8001da8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001db2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001db6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001dc6:	f002 faf7 	bl	80043b8 <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f7ff fe96 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	4619      	mov	r1, r3
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001de4:	f003 f868 	bl	8004eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001dee:	f7ff fe87 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	; 0x60
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2204      	movs	r2, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001e0a:	f002 fcf5 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e14:	f7ff fe74 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001e20:	f002 fcea 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e2a:	f7ff fe69 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	220c      	movs	r2, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	4807      	ldr	r0, [pc, #28]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001e36:	f002 fcdf 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001e40:	f7ff fe5e 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_TIM4_Init+0xd8>)
 8001e46:	f000 f889 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000954 	.word	0x20000954
 8001e58:	40000800 	.word	0x40000800

08001e5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_TIM6_Init+0x68>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001e8c:	f002 f9d4 	bl	8004238 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e96:	f7ff fe33 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <MX_TIM6_Init+0x64>)
 8001ea8:	f003 f806 	bl	8004eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f7ff fe25 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000099c 	.word	0x2000099c
 8001ec4:	40001000 	.word	0x40001000

08001ec8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_PWM_MspInit+0x40>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_TIM_PWM_MspInit+0x40>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_TIM_PWM_MspInit+0x40>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d115      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f28:	f043 0310 	orr.w	r3, r3, #16
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2036      	movs	r0, #54	; 0x36
 8001f40:	f000 fa5b 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f44:	2036      	movs	r0, #54	; 0x36
 8001f46:	f000 fa74 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40001000 	.word	0x40001000
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11e      	bne.n	8001fbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_TIM_MspPostInit+0x70>)
 8001fb8:	f000 fae8 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020c00 	.word	0x40020c00

08001fd0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_USART6_UART_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002008:	f002 ffe6 	bl	8004fd8 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002012:	f7ff fd75 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200009e4 	.word	0x200009e4
 8002020:	40011400 	.word	0x40011400

08002024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_UART_MspInit+0x94>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d133      	bne.n	80020ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_UART_MspInit+0x98>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_UART_MspInit+0x98>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_UART_MspInit+0x98>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_UART_MspInit+0x98>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_UART_MspInit+0x98>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_UART_MspInit+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800208e:	2308      	movs	r3, #8
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 800209a:	f000 fa77 	bl	800258c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2047      	movs	r0, #71	; 0x47
 80020a4:	f000 f9a9 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020a8:	2047      	movs	r0, #71	; 0x47
 80020aa:	f000 f9c2 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40011400 	.word	0x40011400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020800 	.word	0x40020800

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ee:	f7ff fe33 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f003 fec5 	bl	8005e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7fe fefd 	bl	8000ef4 <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002108:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 800210c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002110:	20000a3c 	.word	0x20000a3c

08002114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>
	...

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_Init+0x40>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_Init+0x40>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x40>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f94f 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fd68 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f967 	bl	800244e <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	f000 f92f 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000048 	.word	0x20000048
 80021b4:	20000050 	.word	0x20000050
 80021b8:	2000004c 	.word	0x2000004c

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000050 	.word	0x20000050
 80021e0:	20000a28 	.word	0x20000a28

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000a28 	.word	0x20000a28

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000050 	.word	0x20000050

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff feb6 	bl	80021e4 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d008      	beq.n	8002498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e052      	b.n	800253e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0216 	bic.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_DMA_Abort+0x62>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e8:	e013      	b.n	8002512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ea:	f7ff fe7b 	bl	80021e4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d90c      	bls.n	8002512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2203      	movs	r2, #3
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e015      	b.n	800253e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e4      	bne.n	80024ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e00c      	b.n	800257e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e177      	b.n	8002898 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8166 	bne.w	8002892 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80c0 	beq.w	8002892 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_GPIO_Init+0x324>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a61      	ldr	r2, [pc, #388]	; (80028b4 <HAL_GPIO_Init+0x328>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_GPIO_Init+0x32c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d037      	beq.n	80027ca <HAL_GPIO_Init+0x23e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_GPIO_Init+0x330>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_GPIO_Init+0x23a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x334>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02b      	beq.n	80027c2 <HAL_GPIO_Init+0x236>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a55      	ldr	r2, [pc, #340]	; (80028c4 <HAL_GPIO_Init+0x338>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x232>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_GPIO_Init+0x33c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x22e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_GPIO_Init+0x340>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x22a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x344>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x348>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_GPIO_Init+0x34c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x350>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x21a>
 80027a2:	2309      	movs	r3, #9
 80027a4:	e012      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027a6:	230a      	movs	r3, #10
 80027a8:	e010      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x328>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_GPIO_Init+0x354>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae84 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022400 	.word	0x40022400
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e001      	b.n	8002906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e12b      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f8a6 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002978:	f001 fc36 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a81      	ldr	r2, [pc, #516]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d807      	bhi.n	8002998 <HAL_I2C_Init+0x84>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_I2C_Init+0x278>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e006      	b.n	80029a6 <HAL_I2C_Init+0x92>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_I2C_Init+0x27c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0e7      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_I2C_Init+0x280>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9b      	lsrs	r3, r3, #18
 80029b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_I2C_Init+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <HAL_I2C_Init+0xd4>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	e009      	b.n	80029fc <HAL_I2C_Init+0xe8>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_I2C_Init+0x284>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	495c      	ldr	r1, [pc, #368]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	d819      	bhi.n	8002a50 <HAL_I2C_Init+0x13c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a30:	400b      	ands	r3, r1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_I2C_Init+0x138>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e59      	subs	r1, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	e051      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e04f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_I2C_Init+0x168>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_I2C_Init+0x18e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x196>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e022      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_I2C_Init+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6911      	ldr	r1, [r2, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	000186a0 	.word	0x000186a0
 8002b8c:	001e847f 	.word	0x001e847f
 8002b90:	003d08ff 	.word	0x003d08ff
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb6:	f7ff fb15 	bl	80021e4 <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	f040 80d9 	bne.w	8002d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2319      	movs	r3, #25
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	496d      	ldr	r1, [pc, #436]	; (8002d88 <HAL_I2C_Mem_Write+0x1ec>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fc7f 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0cc      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Mem_Write+0x56>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0c5      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d007      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2221      	movs	r2, #33	; 0x21
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_I2C_Mem_Write+0x1f0>)
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c5a:	88f8      	ldrh	r0, [r7, #6]
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4603      	mov	r3, r0
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fab6 	bl	80031dc <I2C_RequestMemoryWrite>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d052      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e081      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fd00 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11b      	bne.n	8002d1c <HAL_I2C_Mem_Write+0x180>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1aa      	bne.n	8002c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fcec 	bl	8003706 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e016      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	00100002 	.word	0x00100002
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	; 0x30
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002daa:	f7ff fa1b 	bl	80021e4 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 8208 	bne.w	80031ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2319      	movs	r3, #25
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	497b      	ldr	r1, [pc, #492]	; (8002fb4 <HAL_I2C_Mem_Read+0x224>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fb85 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e1fb      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Mem_Read+0x56>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e1f4      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d007      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	; 0x22
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	; 0x40
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a5b      	ldr	r2, [pc, #364]	; (8002fb8 <HAL_I2C_Mem_Read+0x228>)
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e4e:	88f8      	ldrh	r0, [r7, #6]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa52 	bl	8003308 <I2C_RequestMemoryRead>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1b0      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d113      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e184      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11b      	bne.n	8002ede <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e164      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d11b      	bne.n	8002f1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	e144      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f34:	e138      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	f200 80f1 	bhi.w	8003122 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d123      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fc1b 	bl	8003788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e139      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f8e:	e10b      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d14e      	bne.n	8003036 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <HAL_I2C_Mem_Read+0x22c>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa98 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e10e      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
 8002fb2:	bf00      	nop
 8002fb4:	00100002 	.word	0x00100002
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003034:	e0b8      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2200      	movs	r2, #0
 800303e:	4966      	ldr	r1, [pc, #408]	; (80031d8 <HAL_I2C_Mem_Read+0x448>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fa49 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0bf      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2200      	movs	r2, #0
 800309a:	494f      	ldr	r1, [pc, #316]	; (80031d8 <HAL_I2C_Mem_Read+0x448>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fa1b 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e091      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003120:	e042      	b.n	80031a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fb2e 	bl	8003788 <I2C_WaitOnRXNEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e04c      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d118      	bne.n	80031a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f aec2 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00010004 	.word	0x00010004

080031dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	817b      	strh	r3, [r7, #10]
 80031ee:	460b      	mov	r3, r1
 80031f0:	813b      	strh	r3, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2200      	movs	r2, #0
 800320e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f960 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	d103      	bne.n	8003236 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e05f      	b.n	80032fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	492d      	ldr	r1, [pc, #180]	; (8003304 <I2C_RequestMemoryWrite+0x128>)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f998 	bl	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04c      	b.n	80032fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa02 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e02b      	b.n	80032fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	611a      	str	r2, [r3, #16]
 80032b2:	e021      	b.n	80032f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	6a39      	ldr	r1, [r7, #32]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f9dc 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d107      	bne.n	80032ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e005      	b.n	80032fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	00010002 	.word	0x00010002

08003308 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	461a      	mov	r2, r3
 8003316:	4603      	mov	r3, r0
 8003318:	817b      	strh	r3, [r7, #10]
 800331a:	460b      	mov	r3, r1
 800331c:	813b      	strh	r3, [r7, #8]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003330:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2200      	movs	r2, #0
 800334a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8c2 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003368:	d103      	bne.n	8003372 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0aa      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	4952      	ldr	r1, [pc, #328]	; (80034d4 <I2C_RequestMemoryRead+0x1cc>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f8fa 	bl	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e097      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f964 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e076      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e021      	b.n	8003434 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f93e 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e050      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342a:	893b      	ldrh	r3, [r7, #8]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	6a39      	ldr	r1, [r7, #32]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f923 	bl	8003684 <I2C_WaitOnTXEFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b04      	cmp	r3, #4
 800344a:	d107      	bne.n	800345c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e035      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f82b 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e013      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	6a3a      	ldr	r2, [r7, #32]
 80034b8:	4906      	ldr	r1, [pc, #24]	; (80034d4 <I2C_RequestMemoryRead+0x1cc>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f863 	bl	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	00010002 	.word	0x00010002

080034d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	e025      	b.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f0:	d021      	beq.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fe fe77 	bl	80021e4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e023      	b.n	800357e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10d      	bne.n	800355c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	e00c      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d0b6      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003594:	e051      	b.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d123      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e046      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f4:	d021      	beq.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fe fdf5 	bl	80021e4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d116      	bne.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f043 0220 	orr.w	r2, r3, #32
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e020      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10c      	bne.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e00b      	b.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	43da      	mvns	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d18d      	bne.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003690:	e02d      	b.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8ce 	bl	8003834 <I2C_IsAcknowledgeFailed>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e02d      	b.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a8:	d021      	beq.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe fd9b 	bl	80021e4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d116      	bne.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f8:	2b80      	cmp	r3, #128	; 0x80
 80036fa:	d1ca      	bne.n	8003692 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003712:	e02d      	b.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f88d 	bl	8003834 <I2C_IsAcknowledgeFailed>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e02d      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372a:	d021      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fe fd5a 	bl	80021e4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d1ca      	bne.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003794:	e042      	b.n	800381c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d119      	bne.n	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0210 	mvn.w	r2, #16
 80037ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e029      	b.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7fe fd04 	bl	80021e4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d1b5      	bne.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d11b      	bne.n	8003884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d129      	bne.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0210 	bic.w	r2, r2, #16
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	d12a      	bne.n	800397a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003944:	89fb      	ldrh	r3, [r7, #14]
 8003946:	f023 030f 	bic.w	r3, r3, #15
 800394a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b29a      	uxth	r2, r3
 8003950:	89fb      	ldrh	r3, [r7, #14]
 8003952:	4313      	orrs	r3, r2
 8003954:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	89fa      	ldrh	r2, [r7, #14]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e267      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d075      	beq.n	8003a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d00c      	beq.n	80039cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d112      	bne.n	80039e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b82      	ldr	r3, [pc, #520]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05b      	beq.n	8003a90 <HAL_RCC_OscConfig+0x108>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d157      	bne.n	8003a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e242      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_OscConfig+0x74>
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x98>
 8003a06:	4b70      	ldr	r3, [pc, #448]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6f      	ldr	r2, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6c      	ldr	r2, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 8003a20:	4b69      	ldr	r3, [pc, #420]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a68      	ldr	r2, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a65      	ldr	r2, [pc, #404]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fbd0 	bl	80021e4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fbcc 	bl	80021e4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e207      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xc0>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fbbc 	bl	80021e4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fbb8 	bl	80021e4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1f3      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b51      	ldr	r3, [pc, #324]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0xe8>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x152>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1c7      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x244>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fe fb71 	bl	80021e4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fb6d 	bl	80021e4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1a8      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x244>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fb50 	bl	80021e4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fb4c 	bl	80021e4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e187      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d036      	beq.n	8003be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_RCC_OscConfig+0x248>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe fb30 	bl	80021e4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fb2c 	bl	80021e4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e167      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x200>
 8003ba6:	e01b      	b.n	8003be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x248>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fe fb19 	bl	80021e4 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e00e      	b.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fe fb15 	bl	80021e4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d907      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e150      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	42470000 	.word	0x42470000
 8003bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ea      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8097 	beq.w	8003d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b81      	ldr	r3, [pc, #516]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a7c      	ldr	r2, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1e:	4b77      	ldr	r3, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x474>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d118      	bne.n	8003c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2a:	4b74      	ldr	r3, [pc, #464]	; (8003dfc <HAL_RCC_OscConfig+0x474>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a73      	ldr	r2, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x474>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fad5 	bl	80021e4 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3e:	f7fe fad1 	bl	80021e4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e10c      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <HAL_RCC_OscConfig+0x474>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2ea>
 8003c64:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a63      	ldr	r2, [pc, #396]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c70:	e01c      	b.n	8003cac <HAL_RCC_OscConfig+0x324>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x30c>
 8003c7a:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a5e      	ldr	r2, [pc, #376]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a5b      	ldr	r2, [pc, #364]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0x324>
 8003c94:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	4b55      	ldr	r3, [pc, #340]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a54      	ldr	r2, [pc, #336]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 0304 	bic.w	r3, r3, #4
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fa96 	bl	80021e4 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fa92 	bl	80021e4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0cb      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ee      	beq.n	8003cbc <HAL_RCC_OscConfig+0x334>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fa80 	bl	80021e4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fa7c 	bl	80021e4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0b5      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ee      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a1 	beq.w	8003e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d26:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d05c      	beq.n	8003dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d141      	bne.n	8003dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <HAL_RCC_OscConfig+0x478>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe fa50 	bl	80021e4 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe fa4c 	bl	80021e4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e087      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	491b      	ldr	r1, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x478>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fa25 	bl	80021e4 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fa21 	bl	80021e4 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e05c      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x416>
 8003dbc:	e054      	b.n	8003e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_RCC_OscConfig+0x478>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fa0e 	bl	80021e4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe fa0a 	bl	80021e4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e045      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_OscConfig+0x470>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x444>
 8003dea:	e03d      	b.n	8003e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e038      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x4ec>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d028      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d121      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d11a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d111      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0cc      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b68      	ldr	r3, [pc, #416]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d90c      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0b8      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ecc:	4b59      	ldr	r3, [pc, #356]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a58      	ldr	r2, [pc, #352]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a52      	ldr	r2, [pc, #328]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef0:	4b50      	ldr	r3, [pc, #320]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	494d      	ldr	r1, [pc, #308]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d044      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d119      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e07f      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06f      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e067      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4934      	ldr	r1, [pc, #208]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fe f93c 	bl	80021e4 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fe f938 	bl	80021e4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e04f      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d20c      	bcs.n	8003fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e032      	b.n	8004026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4916      	ldr	r1, [pc, #88]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	490e      	ldr	r1, [pc, #56]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ffe:	f000 f821 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8004002:	4602      	mov	r2, r0
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	490a      	ldr	r1, [pc, #40]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	fa22 f303 	lsr.w	r3, r2, r3
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f89c 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023c00 	.word	0x40023c00
 8004034:	40023800 	.word	0x40023800
 8004038:	08006bac 	.word	0x08006bac
 800403c:	20000048 	.word	0x20000048
 8004040:	2000004c 	.word	0x2000004c

08004044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b090      	sub	sp, #64	; 0x40
 800404a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	2300      	movs	r3, #0
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004054:	2300      	movs	r3, #0
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800405c:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d00d      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x40>
 8004068:	2b08      	cmp	r3, #8
 800406a:	f200 80a1 	bhi.w	80041b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x34>
 8004072:	2b04      	cmp	r3, #4
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x3a>
 8004076:	e09b      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004078:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800407c:	e09b      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800407e:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004082:	e098      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d028      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	099b      	lsrs	r3, r3, #6
 80040a0:	2200      	movs	r2, #0
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	627a      	str	r2, [r7, #36]	; 0x24
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040ac:	2100      	movs	r1, #0
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_GetSysClockFreq+0x188>)
 80040b0:	fb03 f201 	mul.w	r2, r3, r1
 80040b4:	2300      	movs	r3, #0
 80040b6:	fb00 f303 	mul.w	r3, r0, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_RCC_GetSysClockFreq+0x188>)
 80040be:	fba0 1202 	umull	r1, r2, r0, r2
 80040c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c4:	460a      	mov	r2, r1
 80040c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	4413      	add	r3, r2
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	2200      	movs	r2, #0
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	61fa      	str	r2, [r7, #28]
 80040d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040de:	f7fc f8df 	bl	80002a0 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4613      	mov	r3, r2
 80040e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ea:	e053      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	099b      	lsrs	r3, r3, #6
 80040f2:	2200      	movs	r2, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	617a      	str	r2, [r7, #20]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040fe:	f04f 0b00 	mov.w	fp, #0
 8004102:	4652      	mov	r2, sl
 8004104:	465b      	mov	r3, fp
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004114:	0150      	lsls	r0, r2, #5
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	ebb2 080a 	subs.w	r8, r2, sl
 800411e:	eb63 090b 	sbc.w	r9, r3, fp
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800412e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004132:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004136:	ebb2 0408 	subs.w	r4, r2, r8
 800413a:	eb63 0509 	sbc.w	r5, r3, r9
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	00eb      	lsls	r3, r5, #3
 8004148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414c:	00e2      	lsls	r2, r4, #3
 800414e:	4614      	mov	r4, r2
 8004150:	461d      	mov	r5, r3
 8004152:	eb14 030a 	adds.w	r3, r4, sl
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	eb45 030b 	adc.w	r3, r5, fp
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416a:	4629      	mov	r1, r5
 800416c:	028b      	lsls	r3, r1, #10
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004174:	4621      	mov	r1, r4
 8004176:	028a      	lsls	r2, r1, #10
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	2200      	movs	r2, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	60fa      	str	r2, [r7, #12]
 8004184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004188:	f7fc f88a 	bl	80002a0 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3740      	adds	r7, #64	; 0x40
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	017d7840 	.word	0x017d7840

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000048 	.word	0x20000048

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a9b      	lsrs	r3, r3, #10
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	08006bbc 	.word	0x08006bbc

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004214:	f7ff ffdc 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0b5b      	lsrs	r3, r3, #13
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	08006bbc 	.word	0x08006bbc

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd fe54 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fba8 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e04e      	b.n	800438e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a23      	ldr	r2, [pc, #140]	; (800439c <HAL_TIM_Base_Start_IT+0xc4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d01d      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b06      	cmp	r3, #6
 8004368:	d010      	beq.n	800438c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	e007      	b.n	800438c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40010400 	.word	0x40010400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40001800 	.word	0x40001800

080043b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e041      	b.n	800444e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fd72 	bl	8001ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fae8 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_TIM_PWM_Start+0x24>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e022      	b.n	80044c2 <HAL_TIM_PWM_Start+0x6a>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b04      	cmp	r3, #4
 8004480:	d109      	bne.n	8004496 <HAL_TIM_PWM_Start+0x3e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e015      	b.n	80044c2 <HAL_TIM_PWM_Start+0x6a>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d109      	bne.n	80044b0 <HAL_TIM_PWM_Start+0x58>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e008      	b.n	80044c2 <HAL_TIM_PWM_Start+0x6a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07c      	b.n	80045c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0x82>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d8:	e013      	b.n	8004502 <HAL_TIM_PWM_Start+0xaa>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d104      	bne.n	80044ea <HAL_TIM_PWM_Start+0x92>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	e00b      	b.n	8004502 <HAL_TIM_PWM_Start+0xaa>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Start+0xa2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f8:	e003      	b.n	8004502 <HAL_TIM_PWM_Start+0xaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2201      	movs	r2, #1
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fcae 	bl	8004e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <HAL_TIM_PWM_Start+0x174>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIM_PWM_Start+0xcc>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <HAL_TIM_PWM_Start+0x178>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_TIM_PWM_Start+0xd0>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_TIM_PWM_Start+0xd2>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a22      	ldr	r2, [pc, #136]	; (80045cc <HAL_TIM_PWM_Start+0x174>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d01d      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_TIM_PWM_Start+0x17c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <HAL_TIM_PWM_Start+0x180>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_TIM_PWM_Start+0x184>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <HAL_TIM_PWM_Start+0x178>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIM_PWM_Start+0x188>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIM_PWM_Start+0x136>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <HAL_TIM_PWM_Start+0x18c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d010      	beq.n	80045c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	e007      	b.n	80045c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010400 	.word	0x40010400
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d122      	bne.n	8004644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d11b      	bne.n	8004644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0202 	mvn.w	r2, #2
 8004614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f9b0 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9a2 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f9b3 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d122      	bne.n	8004698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0204 	mvn.w	r2, #4
 8004668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f986 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f978 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f989 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0208 	mvn.w	r2, #8
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f95c 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f94e 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f95f 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b10      	cmp	r3, #16
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0210 	mvn.w	r2, #16
 8004710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2208      	movs	r2, #8
 8004716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f932 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f924 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f935 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d10e      	bne.n	800476c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0201 	mvn.w	r2, #1
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fb2e 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d10e      	bne.n	8004798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b80      	cmp	r3, #128	; 0x80
 8004786:	d107      	bne.n	8004798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fc16 	bl	8004fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d10e      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d107      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8fa 	bl	80049b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d10e      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d107      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0220 	mvn.w	r2, #32
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fbe0 	bl	8004fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004812:	2302      	movs	r3, #2
 8004814:	e0ae      	b.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	f200 809f 	bhi.w	8004964 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004861 	.word	0x08004861
 8004830:	08004965 	.word	0x08004965
 8004834:	08004965 	.word	0x08004965
 8004838:	08004965 	.word	0x08004965
 800483c:	080048a1 	.word	0x080048a1
 8004840:	08004965 	.word	0x08004965
 8004844:	08004965 	.word	0x08004965
 8004848:	08004965 	.word	0x08004965
 800484c:	080048e3 	.word	0x080048e3
 8004850:	08004965 	.word	0x08004965
 8004854:	08004965 	.word	0x08004965
 8004858:	08004965 	.word	0x08004965
 800485c:	08004923 	.word	0x08004923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f950 	bl	8004b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0208 	orr.w	r2, r2, #8
 800487a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6999      	ldr	r1, [r3, #24]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	619a      	str	r2, [r3, #24]
      break;
 800489e:	e064      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9a0 	bl	8004bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	619a      	str	r2, [r3, #24]
      break;
 80048e0:	e043      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f9f5 	bl	8004cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0208 	orr.w	r2, r2, #8
 80048fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0204 	bic.w	r2, r2, #4
 800490c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69d9      	ldr	r1, [r3, #28]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	61da      	str	r2, [r3, #28]
      break;
 8004920:	e023      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa49 	bl	8004dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	021a      	lsls	r2, r3, #8
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	61da      	str	r2, [r3, #28]
      break;
 8004962:	e002      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      break;
 8004968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a40      	ldr	r2, [pc, #256]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3d      	ldr	r2, [pc, #244]	; (8004ae4 <TIM_Base_SetConfig+0x118>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3c      	ldr	r2, [pc, #240]	; (8004ae8 <TIM_Base_SetConfig+0x11c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3b      	ldr	r2, [pc, #236]	; (8004aec <TIM_Base_SetConfig+0x120>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2f      	ldr	r2, [pc, #188]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d027      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <TIM_Base_SetConfig+0x118>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d023      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <TIM_Base_SetConfig+0x11c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <TIM_Base_SetConfig+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <TIM_Base_SetConfig+0x128>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <TIM_Base_SetConfig+0x12c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <TIM_Base_SetConfig+0x130>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <TIM_Base_SetConfig+0x134>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <TIM_Base_SetConfig+0x138>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0xf8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40010400 	.word	0x40010400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	40001800 	.word	0x40001800
 8004b04:	40001c00 	.word	0x40001c00
 8004b08:	40002000 	.word	0x40002000

08004b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 0302 	bic.w	r3, r3, #2
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <TIM_OC1_SetConfig+0xd8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC1_SetConfig+0x64>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <TIM_OC1_SetConfig+0xdc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10c      	bne.n	8004b8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0308 	bic.w	r3, r3, #8
 8004b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 0304 	bic.w	r3, r3, #4
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <TIM_OC1_SetConfig+0xd8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_OC1_SetConfig+0x8e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <TIM_OC1_SetConfig+0xdc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0210 	bic.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0320 	bic.w	r3, r3, #32
 8004c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <TIM_OC2_SetConfig+0xe4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC2_SetConfig+0x68>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <TIM_OC2_SetConfig+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10d      	bne.n	8004c70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <TIM_OC2_SetConfig+0xe4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC2_SetConfig+0x94>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <TIM_OC2_SetConfig+0xe8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d113      	bne.n	8004ca8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <TIM_OC3_SetConfig+0xe0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_OC3_SetConfig+0x66>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <TIM_OC3_SetConfig+0xe4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10d      	bne.n	8004d5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <TIM_OC3_SetConfig+0xe0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_OC3_SetConfig+0x92>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <TIM_OC3_SetConfig+0xe4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d113      	bne.n	8004d92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	031b      	lsls	r3, r3, #12
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <TIM_OC4_SetConfig+0xa4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC4_SetConfig+0x68>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <TIM_OC4_SetConfig+0xa8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d109      	bne.n	8004e3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	019b      	lsls	r3, r3, #6
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010400 	.word	0x40010400

08004e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2201      	movs	r2, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	401a      	ands	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e05a      	b.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d01d      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a15      	ldr	r2, [pc, #84]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10c      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40010400 	.word	0x40010400
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40001800 	.word	0x40001800

08004fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e03f      	b.n	800506a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd f810 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fcb5 	bl	800598c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	d130      	bne.n	80050ee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Transmit_IT+0x26>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e029      	b.n	80050f0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Transmit_IT+0x38>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e022      	b.n	80050f0 <HAL_UART_Transmit_IT+0x7e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2221      	movs	r2, #33	; 0x21
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b0ba      	sub	sp, #232	; 0xe8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005128:	2300      	movs	r3, #0
 800512a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800513a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_UART_IRQHandler+0x66>
 800514e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb5b 	bl	8005816 <UART_Receive_IT>
      return;
 8005160:	e256      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80de 	beq.w	8005328 <HAL_UART_IRQHandler+0x22c>
 800516c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80d1 	beq.w	8005328 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <HAL_UART_IRQHandler+0xae>
 8005192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0xd2>
 80051b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0202 	orr.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xf6>
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d011      	beq.n	8005222 <HAL_UART_IRQHandler+0x126>
 80051fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 81ed 	beq.w	8005606 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_UART_IRQHandler+0x14e>
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fae6 	bl	8005816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_UART_IRQHandler+0x17a>
 800526e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04f      	beq.n	8005316 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9ee 	bl	8005658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d141      	bne.n	800530e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1d9      	bne.n	800528a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4a7d      	ldr	r2, [pc, #500]	; (80054d8 <HAL_UART_IRQHandler+0x3dc>)
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd f92b 	bl	8002546 <HAL_DMA_Abort_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e00e      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f990 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e00a      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f98c 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	e006      	b.n	8005324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f988 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005322:	e170      	b.n	8005606 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	bf00      	nop
    return;
 8005326:	e16e      	b.n	8005606 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	f040 814a 	bne.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8143 	beq.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 813c 	beq.w	80055c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	f040 80b4 	bne.w	80054dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8140 	beq.w	800560a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005392:	429a      	cmp	r2, r3
 8005394:	f080 8139 	bcs.w	800560a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800539e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	f000 8088 	beq.w	80054be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1d9      	bne.n	80053ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800540a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800541e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005422:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e1      	bne.n	80053fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800545a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800545c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e3      	bne.n	8005436 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	f023 0310 	bic.w	r3, r3, #16
 8005492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80054a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e3      	bne.n	800547c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fc ffd4 	bl	8002466 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8b6 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d4:	e099      	b.n	800560a <HAL_UART_IRQHandler+0x50e>
 80054d6:	bf00      	nop
 80054d8:	0800571f 	.word	0x0800571f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808b 	beq.w	800560e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8086 	beq.w	800560e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005526:	647a      	str	r2, [r7, #68]	; 0x44
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800552c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e3      	bne.n	8005502 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	623b      	str	r3, [r7, #32]
   return(result);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800555e:	633a      	str	r2, [r7, #48]	; 0x30
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e3      	bne.n	800553a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055a4:	61fa      	str	r2, [r7, #28]
 80055a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	617b      	str	r3, [r7, #20]
   return(result);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e3      	bne.n	8005580 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f83e 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055c4:	e023      	b.n	800560e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_UART_IRQHandler+0x4ea>
 80055d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8b1 	bl	8005746 <UART_Transmit_IT>
    return;
 80055e4:	e014      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00e      	beq.n	8005610 <HAL_UART_IRQHandler+0x514>
 80055f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8f1 	bl	80057e6 <UART_EndTransmit_IT>
    return;
 8005604:	e004      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
    return;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
      return;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_UART_IRQHandler+0x514>
      return;
 800560e:	bf00      	nop
  }
}
 8005610:	37e8      	adds	r7, #232	; 0xe8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop

08005618 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b095      	sub	sp, #84	; 0x54
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005680:	643a      	str	r2, [r7, #64]	; 0x40
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3314      	adds	r3, #20
 80056b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e5      	bne.n	8005694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d119      	bne.n	8005704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	647b      	str	r3, [r7, #68]	; 0x44
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f0:	61ba      	str	r2, [r7, #24]
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e5      	bne.n	80056d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005712:	bf00      	nop
 8005714:	3754      	adds	r7, #84	; 0x54
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff ff77 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b21      	cmp	r3, #33	; 0x21
 8005758:	d13e      	bne.n	80057d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d114      	bne.n	800578e <UART_Transmit_IT+0x48>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d110      	bne.n	800578e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]
 800578c:	e008      	b.n	80057a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6211      	str	r1, [r2, #32]
 8005798:	781a      	ldrb	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4619      	mov	r1, r3
 80057ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10f      	bne.n	80057d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb fab0 	bl	8000d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08c      	sub	sp, #48	; 0x30
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b22      	cmp	r3, #34	; 0x22
 8005828:	f040 80ab 	bne.w	8005982 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d117      	bne.n	8005866 <UART_Receive_IT+0x50>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d113      	bne.n	8005866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005854:	b29a      	uxth	r2, r3
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
 8005864:	e026      	b.n	80058b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800586c:	2300      	movs	r3, #0
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d007      	beq.n	800588a <UART_Receive_IT+0x74>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <UART_Receive_IT+0x82>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e008      	b.n	80058aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d15a      	bne.n	800597e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0220 	bic.w	r2, r2, #32
 80058d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	2b01      	cmp	r3, #1
 8005906:	d135      	bne.n	8005974 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	613b      	str	r3, [r7, #16]
   return(result);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f023 0310 	bic.w	r3, r3, #16
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	623a      	str	r2, [r7, #32]
 8005930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	69f9      	ldr	r1, [r7, #28]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	61bb      	str	r3, [r7, #24]
   return(result);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d10a      	bne.n	8005966 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fe67 	bl	8005640 <HAL_UARTEx_RxEventCallback>
 8005972:	e002      	b.n	800597a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fe4f 	bl	8005618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e002      	b.n	8005984 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	3730      	adds	r7, #48	; 0x30
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800598c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005990:	b0c0      	sub	sp, #256	; 0x100
 8005992:	af00      	add	r7, sp, #0
 8005994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	68d9      	ldr	r1, [r3, #12]
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	ea40 0301 	orr.w	r3, r0, r1
 80059b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059e4:	f021 010c 	bic.w	r1, r1, #12
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059f2:	430b      	orrs	r3, r1
 80059f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	ea40 0301 	orr.w	r3, r0, r1
 8005a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <UART_SetConfig+0x2cc>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d005      	beq.n	8005a2c <UART_SetConfig+0xa0>
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b8d      	ldr	r3, [pc, #564]	; (8005c5c <UART_SetConfig+0x2d0>)
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d104      	bne.n	8005a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a2c:	f7fe fbf0 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8005a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a34:	e003      	b.n	8005a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a36:	f7fe fbd7 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	f040 810c 	bne.w	8005c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	1891      	adds	r1, r2, r2
 8005a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a66:	415b      	adcs	r3, r3
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a6e:	4621      	mov	r1, r4
 8005a70:	eb12 0801 	adds.w	r8, r2, r1
 8005a74:	4629      	mov	r1, r5
 8005a76:	eb43 0901 	adc.w	r9, r3, r1
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a8e:	4690      	mov	r8, r2
 8005a90:	4699      	mov	r9, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	eb18 0303 	adds.w	r3, r8, r3
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	eb49 0303 	adc.w	r3, r9, r3
 8005aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aba:	460b      	mov	r3, r1
 8005abc:	18db      	adds	r3, r3, r3
 8005abe:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	eb42 0303 	adc.w	r3, r2, r3
 8005ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ad0:	f7fa fbe6 	bl	80002a0 <__aeabi_uldivmod>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005ada:	fba3 2302 	umull	r2, r3, r3, r2
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	011c      	lsls	r4, r3, #4
 8005ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	1891      	adds	r1, r2, r2
 8005afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005afc:	415b      	adcs	r3, r3
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b04:	4641      	mov	r1, r8
 8005b06:	eb12 0a01 	adds.w	sl, r2, r1
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b24:	4692      	mov	sl, r2
 8005b26:	469b      	mov	fp, r3
 8005b28:	4643      	mov	r3, r8
 8005b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b32:	464b      	mov	r3, r9
 8005b34:	eb4b 0303 	adc.w	r3, fp, r3
 8005b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b50:	460b      	mov	r3, r1
 8005b52:	18db      	adds	r3, r3, r3
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
 8005b56:	4613      	mov	r3, r2
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b66:	f7fa fb9b 	bl	80002a0 <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005b72:	fba3 2301 	umull	r2, r3, r3, r1
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2264      	movs	r2, #100	; 0x64
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	1acb      	subs	r3, r1, r3
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005b88:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b94:	441c      	add	r4, r3
 8005b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	1891      	adds	r1, r2, r2
 8005bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bb0:	415b      	adcs	r3, r3
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb8:	4641      	mov	r1, r8
 8005bba:	1851      	adds	r1, r2, r1
 8005bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	414b      	adcs	r3, r1
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	00cb      	lsls	r3, r1, #3
 8005bd4:	4651      	mov	r1, sl
 8005bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bda:	4651      	mov	r1, sl
 8005bdc:	00ca      	lsls	r2, r1, #3
 8005bde:	4610      	mov	r0, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	4642      	mov	r2, r8
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bec:	464b      	mov	r3, r9
 8005bee:	460a      	mov	r2, r1
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	18db      	adds	r3, r3, r3
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	4613      	mov	r3, r2
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c22:	f7fa fb3d 	bl	80002a0 <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	2164      	movs	r1, #100	; 0x64
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	3332      	adds	r3, #50	; 0x32
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f003 0207 	and.w	r2, r3, #7
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4422      	add	r2, r4
 8005c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c54:	e105      	b.n	8005e62 <UART_SetConfig+0x4d6>
 8005c56:	bf00      	nop
 8005c58:	40011000 	.word	0x40011000
 8005c5c:	40011400 	.word	0x40011400
 8005c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c76:	4642      	mov	r2, r8
 8005c78:	464b      	mov	r3, r9
 8005c7a:	1891      	adds	r1, r2, r2
 8005c7c:	6239      	str	r1, [r7, #32]
 8005c7e:	415b      	adcs	r3, r3
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c86:	4641      	mov	r1, r8
 8005c88:	1854      	adds	r4, r2, r1
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	eb43 0501 	adc.w	r5, r3, r1
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	00eb      	lsls	r3, r5, #3
 8005c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9e:	00e2      	lsls	r2, r4, #3
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	18e3      	adds	r3, r4, r3
 8005ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cac:	464b      	mov	r3, r9
 8005cae:	eb45 0303 	adc.w	r3, r5, r3
 8005cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	008b      	lsls	r3, r1, #2
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cdc:	4621      	mov	r1, r4
 8005cde:	008a      	lsls	r2, r1, #2
 8005ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ce4:	f7fa fadc 	bl	80002a0 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4b60      	ldr	r3, [pc, #384]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005cee:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	011c      	lsls	r4, r3, #4
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	61b9      	str	r1, [r7, #24]
 8005d10:	415b      	adcs	r3, r3
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d18:	4641      	mov	r1, r8
 8005d1a:	1851      	adds	r1, r2, r1
 8005d1c:	6139      	str	r1, [r7, #16]
 8005d1e:	4649      	mov	r1, r9
 8005d20:	414b      	adcs	r3, r1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d30:	4659      	mov	r1, fp
 8005d32:	00cb      	lsls	r3, r1, #3
 8005d34:	4651      	mov	r1, sl
 8005d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	00ca      	lsls	r2, r1, #3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	4642      	mov	r2, r8
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d70:	4649      	mov	r1, r9
 8005d72:	008b      	lsls	r3, r1, #2
 8005d74:	4641      	mov	r1, r8
 8005d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	008a      	lsls	r2, r1, #2
 8005d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d82:	f7fa fa8d 	bl	80002a0 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	2164      	movs	r1, #100	; 0x64
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	3332      	adds	r3, #50	; 0x32
 8005d9e:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005daa:	441c      	add	r4, r3
 8005dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db0:	2200      	movs	r2, #0
 8005db2:	673b      	str	r3, [r7, #112]	; 0x70
 8005db4:	677a      	str	r2, [r7, #116]	; 0x74
 8005db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	1891      	adds	r1, r2, r2
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	415b      	adcs	r3, r3
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dca:	4641      	mov	r1, r8
 8005dcc:	1851      	adds	r1, r2, r1
 8005dce:	6039      	str	r1, [r7, #0]
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	414b      	adcs	r3, r1
 8005dd4:	607b      	str	r3, [r7, #4]
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005de2:	4659      	mov	r1, fp
 8005de4:	00cb      	lsls	r3, r1, #3
 8005de6:	4651      	mov	r1, sl
 8005de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dec:	4651      	mov	r1, sl
 8005dee:	00ca      	lsls	r2, r1, #3
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	4603      	mov	r3, r0
 8005df6:	4642      	mov	r2, r8
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e10:	667a      	str	r2, [r7, #100]	; 0x64
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e1e:	4649      	mov	r1, r9
 8005e20:	008b      	lsls	r3, r1, #2
 8005e22:	4641      	mov	r1, r8
 8005e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e28:	4641      	mov	r1, r8
 8005e2a:	008a      	lsls	r2, r1, #2
 8005e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e30:	f7fa fa36 	bl	80002a0 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	3332      	adds	r3, #50	; 0x32
 8005e4c:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f003 020f 	and.w	r2, r3, #15
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4422      	add	r2, r4
 8005e60:	609a      	str	r2, [r3, #8]
}
 8005e62:	bf00      	nop
 8005e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e6e:	bf00      	nop
 8005e70:	51eb851f 	.word	0x51eb851f

08005e74 <__errno>:
 8005e74:	4b01      	ldr	r3, [pc, #4]	; (8005e7c <__errno+0x8>)
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000054 	.word	0x20000054

08005e80 <__libc_init_array>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	4d0d      	ldr	r5, [pc, #52]	; (8005eb8 <__libc_init_array+0x38>)
 8005e84:	4c0d      	ldr	r4, [pc, #52]	; (8005ebc <__libc_init_array+0x3c>)
 8005e86:	1b64      	subs	r4, r4, r5
 8005e88:	10a4      	asrs	r4, r4, #2
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	42a6      	cmp	r6, r4
 8005e8e:	d109      	bne.n	8005ea4 <__libc_init_array+0x24>
 8005e90:	4d0b      	ldr	r5, [pc, #44]	; (8005ec0 <__libc_init_array+0x40>)
 8005e92:	4c0c      	ldr	r4, [pc, #48]	; (8005ec4 <__libc_init_array+0x44>)
 8005e94:	f000 fca2 	bl	80067dc <_init>
 8005e98:	1b64      	subs	r4, r4, r5
 8005e9a:	10a4      	asrs	r4, r4, #2
 8005e9c:	2600      	movs	r6, #0
 8005e9e:	42a6      	cmp	r6, r4
 8005ea0:	d105      	bne.n	8005eae <__libc_init_array+0x2e>
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea8:	4798      	blx	r3
 8005eaa:	3601      	adds	r6, #1
 8005eac:	e7ee      	b.n	8005e8c <__libc_init_array+0xc>
 8005eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb2:	4798      	blx	r3
 8005eb4:	3601      	adds	r6, #1
 8005eb6:	e7f2      	b.n	8005e9e <__libc_init_array+0x1e>
 8005eb8:	08006c00 	.word	0x08006c00
 8005ebc:	08006c00 	.word	0x08006c00
 8005ec0:	08006c00 	.word	0x08006c00
 8005ec4:	08006c04 	.word	0x08006c04

08005ec8 <memcpy>:
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	4770      	bx	lr
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d1f9      	bne.n	8005ed6 <memcpy+0xe>
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <memset>:
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <sniprintf>:
 8005ef4:	b40c      	push	{r2, r3}
 8005ef6:	b530      	push	{r4, r5, lr}
 8005ef8:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <sniprintf+0x64>)
 8005efa:	1e0c      	subs	r4, r1, #0
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	b09d      	sub	sp, #116	; 0x74
 8005f00:	da08      	bge.n	8005f14 <sniprintf+0x20>
 8005f02:	238b      	movs	r3, #139	; 0x8b
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0a:	b01d      	add	sp, #116	; 0x74
 8005f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f10:	b002      	add	sp, #8
 8005f12:	4770      	bx	lr
 8005f14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f1c:	bf14      	ite	ne
 8005f1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005f22:	4623      	moveq	r3, r4
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f2c:	9002      	str	r0, [sp, #8]
 8005f2e:	9006      	str	r0, [sp, #24]
 8005f30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f36:	ab21      	add	r3, sp, #132	; 0x84
 8005f38:	a902      	add	r1, sp, #8
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	f000 f869 	bl	8006014 <_svfiprintf_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	bfbc      	itt	lt
 8005f46:	238b      	movlt	r3, #139	; 0x8b
 8005f48:	602b      	strlt	r3, [r5, #0]
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d0dd      	beq.n	8005f0a <sniprintf+0x16>
 8005f4e:	9b02      	ldr	r3, [sp, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e7d9      	b.n	8005f0a <sniprintf+0x16>
 8005f56:	bf00      	nop
 8005f58:	20000054 	.word	0x20000054

08005f5c <__ssputs_r>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	688e      	ldr	r6, [r1, #8]
 8005f62:	429e      	cmp	r6, r3
 8005f64:	4682      	mov	sl, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	d838      	bhi.n	8005fe0 <__ssputs_r+0x84>
 8005f6e:	898a      	ldrh	r2, [r1, #12]
 8005f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f74:	d032      	beq.n	8005fdc <__ssputs_r+0x80>
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	6909      	ldr	r1, [r1, #16]
 8005f7a:	eba5 0901 	sub.w	r9, r5, r1
 8005f7e:	6965      	ldr	r5, [r4, #20]
 8005f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f88:	3301      	adds	r3, #1
 8005f8a:	444b      	add	r3, r9
 8005f8c:	106d      	asrs	r5, r5, #1
 8005f8e:	429d      	cmp	r5, r3
 8005f90:	bf38      	it	cc
 8005f92:	461d      	movcc	r5, r3
 8005f94:	0553      	lsls	r3, r2, #21
 8005f96:	d531      	bpl.n	8005ffc <__ssputs_r+0xa0>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f000 fb55 	bl	8006648 <_malloc_r>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	b950      	cbnz	r0, 8005fb8 <__ssputs_r+0x5c>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	f8ca 3000 	str.w	r3, [sl]
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	464a      	mov	r2, r9
 8005fbc:	f7ff ff84 	bl	8005ec8 <memcpy>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	6126      	str	r6, [r4, #16]
 8005fce:	6165      	str	r5, [r4, #20]
 8005fd0:	444e      	add	r6, r9
 8005fd2:	eba5 0509 	sub.w	r5, r5, r9
 8005fd6:	6026      	str	r6, [r4, #0]
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	463e      	mov	r6, r7
 8005fdc:	42be      	cmp	r6, r7
 8005fde:	d900      	bls.n	8005fe2 <__ssputs_r+0x86>
 8005fe0:	463e      	mov	r6, r7
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	f000 faa8 	bl	800653c <memmove>
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	1b9b      	subs	r3, r3, r6
 8005ff0:	60a3      	str	r3, [r4, #8]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	4433      	add	r3, r6
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7db      	b.n	8005fb4 <__ssputs_r+0x58>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f000 fb97 	bl	8006730 <_realloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d1e1      	bne.n	8005fcc <__ssputs_r+0x70>
 8006008:	6921      	ldr	r1, [r4, #16]
 800600a:	4650      	mov	r0, sl
 800600c:	f000 fab0 	bl	8006570 <_free_r>
 8006010:	e7c7      	b.n	8005fa2 <__ssputs_r+0x46>
	...

08006014 <_svfiprintf_r>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	4698      	mov	r8, r3
 800601a:	898b      	ldrh	r3, [r1, #12]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	b09d      	sub	sp, #116	; 0x74
 8006020:	4607      	mov	r7, r0
 8006022:	460d      	mov	r5, r1
 8006024:	4614      	mov	r4, r2
 8006026:	d50e      	bpl.n	8006046 <_svfiprintf_r+0x32>
 8006028:	690b      	ldr	r3, [r1, #16]
 800602a:	b963      	cbnz	r3, 8006046 <_svfiprintf_r+0x32>
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	f000 fb0b 	bl	8006648 <_malloc_r>
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	6128      	str	r0, [r5, #16]
 8006036:	b920      	cbnz	r0, 8006042 <_svfiprintf_r+0x2e>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006040:	e0d1      	b.n	80061e6 <_svfiprintf_r+0x1d2>
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	616b      	str	r3, [r5, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	2320      	movs	r3, #32
 800604c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006050:	f8cd 800c 	str.w	r8, [sp, #12]
 8006054:	2330      	movs	r3, #48	; 0x30
 8006056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006200 <_svfiprintf_r+0x1ec>
 800605a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800605e:	f04f 0901 	mov.w	r9, #1
 8006062:	4623      	mov	r3, r4
 8006064:	469a      	mov	sl, r3
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	b10a      	cbz	r2, 8006070 <_svfiprintf_r+0x5c>
 800606c:	2a25      	cmp	r2, #37	; 0x25
 800606e:	d1f9      	bne.n	8006064 <_svfiprintf_r+0x50>
 8006070:	ebba 0b04 	subs.w	fp, sl, r4
 8006074:	d00b      	beq.n	800608e <_svfiprintf_r+0x7a>
 8006076:	465b      	mov	r3, fp
 8006078:	4622      	mov	r2, r4
 800607a:	4629      	mov	r1, r5
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ff6d 	bl	8005f5c <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f000 80aa 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608a:	445a      	add	r2, fp
 800608c:	9209      	str	r2, [sp, #36]	; 0x24
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a2 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800609e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ae:	931a      	str	r3, [sp, #104]	; 0x68
 80060b0:	4654      	mov	r4, sl
 80060b2:	2205      	movs	r2, #5
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	4851      	ldr	r0, [pc, #324]	; (8006200 <_svfiprintf_r+0x1ec>)
 80060ba:	f7fa f8a1 	bl	8000200 <memchr>
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	b9d8      	cbnz	r0, 80060fa <_svfiprintf_r+0xe6>
 80060c2:	06d0      	lsls	r0, r2, #27
 80060c4:	bf44      	itt	mi
 80060c6:	2320      	movmi	r3, #32
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060cc:	0711      	lsls	r1, r2, #28
 80060ce:	bf44      	itt	mi
 80060d0:	232b      	movmi	r3, #43	; 0x2b
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b2a      	cmp	r3, #42	; 0x2a
 80060dc:	d015      	beq.n	800610a <_svfiprintf_r+0xf6>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	4654      	mov	r4, sl
 80060e2:	2000      	movs	r0, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4621      	mov	r1, r4
 80060ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ee:	3b30      	subs	r3, #48	; 0x30
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d94e      	bls.n	8006192 <_svfiprintf_r+0x17e>
 80060f4:	b1b0      	cbz	r0, 8006124 <_svfiprintf_r+0x110>
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	e014      	b.n	8006124 <_svfiprintf_r+0x110>
 80060fa:	eba0 0308 	sub.w	r3, r0, r8
 80060fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	46a2      	mov	sl, r4
 8006108:	e7d2      	b.n	80060b0 <_svfiprintf_r+0x9c>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9103      	str	r1, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfbb      	ittet	lt
 8006116:	425b      	neglt	r3, r3
 8006118:	f042 0202 	orrlt.w	r2, r2, #2
 800611c:	9307      	strge	r3, [sp, #28]
 800611e:	9307      	strlt	r3, [sp, #28]
 8006120:	bfb8      	it	lt
 8006122:	9204      	strlt	r2, [sp, #16]
 8006124:	7823      	ldrb	r3, [r4, #0]
 8006126:	2b2e      	cmp	r3, #46	; 0x2e
 8006128:	d10c      	bne.n	8006144 <_svfiprintf_r+0x130>
 800612a:	7863      	ldrb	r3, [r4, #1]
 800612c:	2b2a      	cmp	r3, #42	; 0x2a
 800612e:	d135      	bne.n	800619c <_svfiprintf_r+0x188>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfb8      	it	lt
 800613c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006140:	3402      	adds	r4, #2
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006210 <_svfiprintf_r+0x1fc>
 8006148:	7821      	ldrb	r1, [r4, #0]
 800614a:	2203      	movs	r2, #3
 800614c:	4650      	mov	r0, sl
 800614e:	f7fa f857 	bl	8000200 <memchr>
 8006152:	b140      	cbz	r0, 8006166 <_svfiprintf_r+0x152>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	eba0 000a 	sub.w	r0, r0, sl
 800615a:	fa03 f000 	lsl.w	r0, r3, r0
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	4303      	orrs	r3, r0
 8006162:	3401      	adds	r4, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4826      	ldr	r0, [pc, #152]	; (8006204 <_svfiprintf_r+0x1f0>)
 800616c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006170:	2206      	movs	r2, #6
 8006172:	f7fa f845 	bl	8000200 <memchr>
 8006176:	2800      	cmp	r0, #0
 8006178:	d038      	beq.n	80061ec <_svfiprintf_r+0x1d8>
 800617a:	4b23      	ldr	r3, [pc, #140]	; (8006208 <_svfiprintf_r+0x1f4>)
 800617c:	bb1b      	cbnz	r3, 80061c6 <_svfiprintf_r+0x1b2>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	3308      	adds	r3, #8
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618c:	4433      	add	r3, r6
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	e767      	b.n	8006062 <_svfiprintf_r+0x4e>
 8006192:	fb0c 3202 	mla	r2, ip, r2, r3
 8006196:	460c      	mov	r4, r1
 8006198:	2001      	movs	r0, #1
 800619a:	e7a5      	b.n	80060e8 <_svfiprintf_r+0xd4>
 800619c:	2300      	movs	r3, #0
 800619e:	3401      	adds	r4, #1
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	4619      	mov	r1, r3
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4620      	mov	r0, r4
 80061aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ae:	3a30      	subs	r2, #48	; 0x30
 80061b0:	2a09      	cmp	r2, #9
 80061b2:	d903      	bls.n	80061bc <_svfiprintf_r+0x1a8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0c5      	beq.n	8006144 <_svfiprintf_r+0x130>
 80061b8:	9105      	str	r1, [sp, #20]
 80061ba:	e7c3      	b.n	8006144 <_svfiprintf_r+0x130>
 80061bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c0:	4604      	mov	r4, r0
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f0      	b.n	80061a8 <_svfiprintf_r+0x194>
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	462a      	mov	r2, r5
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <_svfiprintf_r+0x1f8>)
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	4638      	mov	r0, r7
 80061d2:	f3af 8000 	nop.w
 80061d6:	1c42      	adds	r2, r0, #1
 80061d8:	4606      	mov	r6, r0
 80061da:	d1d6      	bne.n	800618a <_svfiprintf_r+0x176>
 80061dc:	89ab      	ldrh	r3, [r5, #12]
 80061de:	065b      	lsls	r3, r3, #25
 80061e0:	f53f af2c 	bmi.w	800603c <_svfiprintf_r+0x28>
 80061e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e6:	b01d      	add	sp, #116	; 0x74
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	462a      	mov	r2, r5
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <_svfiprintf_r+0x1f8>)
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	4638      	mov	r0, r7
 80061f8:	f000 f87a 	bl	80062f0 <_printf_i>
 80061fc:	e7eb      	b.n	80061d6 <_svfiprintf_r+0x1c2>
 80061fe:	bf00      	nop
 8006200:	08006bc4 	.word	0x08006bc4
 8006204:	08006bce 	.word	0x08006bce
 8006208:	00000000 	.word	0x00000000
 800620c:	08005f5d 	.word	0x08005f5d
 8006210:	08006bca 	.word	0x08006bca

08006214 <_printf_common>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	4616      	mov	r6, r2
 800621a:	4699      	mov	r9, r3
 800621c:	688a      	ldr	r2, [r1, #8]
 800621e:	690b      	ldr	r3, [r1, #16]
 8006220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006224:	4293      	cmp	r3, r2
 8006226:	bfb8      	it	lt
 8006228:	4613      	movlt	r3, r2
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006230:	4607      	mov	r7, r0
 8006232:	460c      	mov	r4, r1
 8006234:	b10a      	cbz	r2, 800623a <_printf_common+0x26>
 8006236:	3301      	adds	r3, #1
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	0699      	lsls	r1, r3, #26
 800623e:	bf42      	ittt	mi
 8006240:	6833      	ldrmi	r3, [r6, #0]
 8006242:	3302      	addmi	r3, #2
 8006244:	6033      	strmi	r3, [r6, #0]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	f015 0506 	ands.w	r5, r5, #6
 800624c:	d106      	bne.n	800625c <_printf_common+0x48>
 800624e:	f104 0a19 	add.w	sl, r4, #25
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	6832      	ldr	r2, [r6, #0]
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	42ab      	cmp	r3, r5
 800625a:	dc26      	bgt.n	80062aa <_printf_common+0x96>
 800625c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006260:	1e13      	subs	r3, r2, #0
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	bf18      	it	ne
 8006266:	2301      	movne	r3, #1
 8006268:	0692      	lsls	r2, r2, #26
 800626a:	d42b      	bmi.n	80062c4 <_printf_common+0xb0>
 800626c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006270:	4649      	mov	r1, r9
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	3001      	adds	r0, #1
 8006278:	d01e      	beq.n	80062b8 <_printf_common+0xa4>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	68e5      	ldr	r5, [r4, #12]
 800627e:	6832      	ldr	r2, [r6, #0]
 8006280:	f003 0306 	and.w	r3, r3, #6
 8006284:	2b04      	cmp	r3, #4
 8006286:	bf08      	it	eq
 8006288:	1aad      	subeq	r5, r5, r2
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	6922      	ldr	r2, [r4, #16]
 800628e:	bf0c      	ite	eq
 8006290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006294:	2500      	movne	r5, #0
 8006296:	4293      	cmp	r3, r2
 8006298:	bfc4      	itt	gt
 800629a:	1a9b      	subgt	r3, r3, r2
 800629c:	18ed      	addgt	r5, r5, r3
 800629e:	2600      	movs	r6, #0
 80062a0:	341a      	adds	r4, #26
 80062a2:	42b5      	cmp	r5, r6
 80062a4:	d11a      	bne.n	80062dc <_printf_common+0xc8>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e008      	b.n	80062bc <_printf_common+0xa8>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4652      	mov	r2, sl
 80062ae:	4649      	mov	r1, r9
 80062b0:	4638      	mov	r0, r7
 80062b2:	47c0      	blx	r8
 80062b4:	3001      	adds	r0, #1
 80062b6:	d103      	bne.n	80062c0 <_printf_common+0xac>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c0:	3501      	adds	r5, #1
 80062c2:	e7c6      	b.n	8006252 <_printf_common+0x3e>
 80062c4:	18e1      	adds	r1, r4, r3
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	2030      	movs	r0, #48	; 0x30
 80062ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ce:	4422      	add	r2, r4
 80062d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062d8:	3302      	adds	r3, #2
 80062da:	e7c7      	b.n	800626c <_printf_common+0x58>
 80062dc:	2301      	movs	r3, #1
 80062de:	4622      	mov	r2, r4
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d0e6      	beq.n	80062b8 <_printf_common+0xa4>
 80062ea:	3601      	adds	r6, #1
 80062ec:	e7d9      	b.n	80062a2 <_printf_common+0x8e>
	...

080062f0 <_printf_i>:
 80062f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	7e0f      	ldrb	r7, [r1, #24]
 80062f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062f8:	2f78      	cmp	r7, #120	; 0x78
 80062fa:	4691      	mov	r9, r2
 80062fc:	4680      	mov	r8, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	469a      	mov	sl, r3
 8006302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006306:	d807      	bhi.n	8006318 <_printf_i+0x28>
 8006308:	2f62      	cmp	r7, #98	; 0x62
 800630a:	d80a      	bhi.n	8006322 <_printf_i+0x32>
 800630c:	2f00      	cmp	r7, #0
 800630e:	f000 80d8 	beq.w	80064c2 <_printf_i+0x1d2>
 8006312:	2f58      	cmp	r7, #88	; 0x58
 8006314:	f000 80a3 	beq.w	800645e <_printf_i+0x16e>
 8006318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800631c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006320:	e03a      	b.n	8006398 <_printf_i+0xa8>
 8006322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006326:	2b15      	cmp	r3, #21
 8006328:	d8f6      	bhi.n	8006318 <_printf_i+0x28>
 800632a:	a101      	add	r1, pc, #4	; (adr r1, 8006330 <_printf_i+0x40>)
 800632c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006330:	08006389 	.word	0x08006389
 8006334:	0800639d 	.word	0x0800639d
 8006338:	08006319 	.word	0x08006319
 800633c:	08006319 	.word	0x08006319
 8006340:	08006319 	.word	0x08006319
 8006344:	08006319 	.word	0x08006319
 8006348:	0800639d 	.word	0x0800639d
 800634c:	08006319 	.word	0x08006319
 8006350:	08006319 	.word	0x08006319
 8006354:	08006319 	.word	0x08006319
 8006358:	08006319 	.word	0x08006319
 800635c:	080064a9 	.word	0x080064a9
 8006360:	080063cd 	.word	0x080063cd
 8006364:	0800648b 	.word	0x0800648b
 8006368:	08006319 	.word	0x08006319
 800636c:	08006319 	.word	0x08006319
 8006370:	080064cb 	.word	0x080064cb
 8006374:	08006319 	.word	0x08006319
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006319 	.word	0x08006319
 8006380:	08006319 	.word	0x08006319
 8006384:	08006493 	.word	0x08006493
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006398:	2301      	movs	r3, #1
 800639a:	e0a3      	b.n	80064e4 <_printf_i+0x1f4>
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	6829      	ldr	r1, [r5, #0]
 80063a0:	0606      	lsls	r6, r0, #24
 80063a2:	f101 0304 	add.w	r3, r1, #4
 80063a6:	d50a      	bpl.n	80063be <_printf_i+0xce>
 80063a8:	680e      	ldr	r6, [r1, #0]
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	2e00      	cmp	r6, #0
 80063ae:	da03      	bge.n	80063b8 <_printf_i+0xc8>
 80063b0:	232d      	movs	r3, #45	; 0x2d
 80063b2:	4276      	negs	r6, r6
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	485e      	ldr	r0, [pc, #376]	; (8006534 <_printf_i+0x244>)
 80063ba:	230a      	movs	r3, #10
 80063bc:	e019      	b.n	80063f2 <_printf_i+0x102>
 80063be:	680e      	ldr	r6, [r1, #0]
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063c6:	bf18      	it	ne
 80063c8:	b236      	sxthne	r6, r6
 80063ca:	e7ef      	b.n	80063ac <_printf_i+0xbc>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	1d19      	adds	r1, r3, #4
 80063d2:	6029      	str	r1, [r5, #0]
 80063d4:	0601      	lsls	r1, r0, #24
 80063d6:	d501      	bpl.n	80063dc <_printf_i+0xec>
 80063d8:	681e      	ldr	r6, [r3, #0]
 80063da:	e002      	b.n	80063e2 <_printf_i+0xf2>
 80063dc:	0646      	lsls	r6, r0, #25
 80063de:	d5fb      	bpl.n	80063d8 <_printf_i+0xe8>
 80063e0:	881e      	ldrh	r6, [r3, #0]
 80063e2:	4854      	ldr	r0, [pc, #336]	; (8006534 <_printf_i+0x244>)
 80063e4:	2f6f      	cmp	r7, #111	; 0x6f
 80063e6:	bf0c      	ite	eq
 80063e8:	2308      	moveq	r3, #8
 80063ea:	230a      	movne	r3, #10
 80063ec:	2100      	movs	r1, #0
 80063ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063f2:	6865      	ldr	r5, [r4, #4]
 80063f4:	60a5      	str	r5, [r4, #8]
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	bfa2      	ittt	ge
 80063fa:	6821      	ldrge	r1, [r4, #0]
 80063fc:	f021 0104 	bicge.w	r1, r1, #4
 8006400:	6021      	strge	r1, [r4, #0]
 8006402:	b90e      	cbnz	r6, 8006408 <_printf_i+0x118>
 8006404:	2d00      	cmp	r5, #0
 8006406:	d04d      	beq.n	80064a4 <_printf_i+0x1b4>
 8006408:	4615      	mov	r5, r2
 800640a:	fbb6 f1f3 	udiv	r1, r6, r3
 800640e:	fb03 6711 	mls	r7, r3, r1, r6
 8006412:	5dc7      	ldrb	r7, [r0, r7]
 8006414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006418:	4637      	mov	r7, r6
 800641a:	42bb      	cmp	r3, r7
 800641c:	460e      	mov	r6, r1
 800641e:	d9f4      	bls.n	800640a <_printf_i+0x11a>
 8006420:	2b08      	cmp	r3, #8
 8006422:	d10b      	bne.n	800643c <_printf_i+0x14c>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	07de      	lsls	r6, r3, #31
 8006428:	d508      	bpl.n	800643c <_printf_i+0x14c>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	6861      	ldr	r1, [r4, #4]
 800642e:	4299      	cmp	r1, r3
 8006430:	bfde      	ittt	le
 8006432:	2330      	movle	r3, #48	; 0x30
 8006434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006438:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800643c:	1b52      	subs	r2, r2, r5
 800643e:	6122      	str	r2, [r4, #16]
 8006440:	f8cd a000 	str.w	sl, [sp]
 8006444:	464b      	mov	r3, r9
 8006446:	aa03      	add	r2, sp, #12
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff fee2 	bl	8006214 <_printf_common>
 8006450:	3001      	adds	r0, #1
 8006452:	d14c      	bne.n	80064ee <_printf_i+0x1fe>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006458:	b004      	add	sp, #16
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645e:	4835      	ldr	r0, [pc, #212]	; (8006534 <_printf_i+0x244>)
 8006460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f851 6b04 	ldr.w	r6, [r1], #4
 800646c:	6029      	str	r1, [r5, #0]
 800646e:	061d      	lsls	r5, r3, #24
 8006470:	d514      	bpl.n	800649c <_printf_i+0x1ac>
 8006472:	07df      	lsls	r7, r3, #31
 8006474:	bf44      	itt	mi
 8006476:	f043 0320 	orrmi.w	r3, r3, #32
 800647a:	6023      	strmi	r3, [r4, #0]
 800647c:	b91e      	cbnz	r6, 8006486 <_printf_i+0x196>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f023 0320 	bic.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2310      	movs	r3, #16
 8006488:	e7b0      	b.n	80063ec <_printf_i+0xfc>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	2378      	movs	r3, #120	; 0x78
 8006494:	4828      	ldr	r0, [pc, #160]	; (8006538 <_printf_i+0x248>)
 8006496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800649a:	e7e3      	b.n	8006464 <_printf_i+0x174>
 800649c:	0659      	lsls	r1, r3, #25
 800649e:	bf48      	it	mi
 80064a0:	b2b6      	uxthmi	r6, r6
 80064a2:	e7e6      	b.n	8006472 <_printf_i+0x182>
 80064a4:	4615      	mov	r5, r2
 80064a6:	e7bb      	b.n	8006420 <_printf_i+0x130>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	6826      	ldr	r6, [r4, #0]
 80064ac:	6961      	ldr	r1, [r4, #20]
 80064ae:	1d18      	adds	r0, r3, #4
 80064b0:	6028      	str	r0, [r5, #0]
 80064b2:	0635      	lsls	r5, r6, #24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0x1cc>
 80064b8:	6019      	str	r1, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0x1d2>
 80064bc:	0670      	lsls	r0, r6, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0x1c8>
 80064c0:	8019      	strh	r1, [r3, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	4615      	mov	r5, r2
 80064c8:	e7ba      	b.n	8006440 <_printf_i+0x150>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	1d1a      	adds	r2, r3, #4
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	681d      	ldr	r5, [r3, #0]
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7f9 fe92 	bl	8000200 <memchr>
 80064dc:	b108      	cbz	r0, 80064e2 <_printf_i+0x1f2>
 80064de:	1b40      	subs	r0, r0, r5
 80064e0:	6060      	str	r0, [r4, #4]
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	2300      	movs	r3, #0
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	e7a8      	b.n	8006440 <_printf_i+0x150>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	462a      	mov	r2, r5
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	47d0      	blx	sl
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0ab      	beq.n	8006454 <_printf_i+0x164>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d413      	bmi.n	800652a <_printf_i+0x23a>
 8006502:	68e0      	ldr	r0, [r4, #12]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	4298      	cmp	r0, r3
 8006508:	bfb8      	it	lt
 800650a:	4618      	movlt	r0, r3
 800650c:	e7a4      	b.n	8006458 <_printf_i+0x168>
 800650e:	2301      	movs	r3, #1
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	47d0      	blx	sl
 8006518:	3001      	adds	r0, #1
 800651a:	d09b      	beq.n	8006454 <_printf_i+0x164>
 800651c:	3501      	adds	r5, #1
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	9903      	ldr	r1, [sp, #12]
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	42ab      	cmp	r3, r5
 8006526:	dcf2      	bgt.n	800650e <_printf_i+0x21e>
 8006528:	e7eb      	b.n	8006502 <_printf_i+0x212>
 800652a:	2500      	movs	r5, #0
 800652c:	f104 0619 	add.w	r6, r4, #25
 8006530:	e7f5      	b.n	800651e <_printf_i+0x22e>
 8006532:	bf00      	nop
 8006534:	08006bd5 	.word	0x08006bd5
 8006538:	08006be6 	.word	0x08006be6

0800653c <memmove>:
 800653c:	4288      	cmp	r0, r1
 800653e:	b510      	push	{r4, lr}
 8006540:	eb01 0402 	add.w	r4, r1, r2
 8006544:	d902      	bls.n	800654c <memmove+0x10>
 8006546:	4284      	cmp	r4, r0
 8006548:	4623      	mov	r3, r4
 800654a:	d807      	bhi.n	800655c <memmove+0x20>
 800654c:	1e43      	subs	r3, r0, #1
 800654e:	42a1      	cmp	r1, r4
 8006550:	d008      	beq.n	8006564 <memmove+0x28>
 8006552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800655a:	e7f8      	b.n	800654e <memmove+0x12>
 800655c:	4402      	add	r2, r0
 800655e:	4601      	mov	r1, r0
 8006560:	428a      	cmp	r2, r1
 8006562:	d100      	bne.n	8006566 <memmove+0x2a>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800656a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800656e:	e7f7      	b.n	8006560 <memmove+0x24>

08006570 <_free_r>:
 8006570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006572:	2900      	cmp	r1, #0
 8006574:	d044      	beq.n	8006600 <_free_r+0x90>
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f1a1 0404 	sub.w	r4, r1, #4
 8006582:	bfb8      	it	lt
 8006584:	18e4      	addlt	r4, r4, r3
 8006586:	f000 f913 	bl	80067b0 <__malloc_lock>
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <_free_r+0x94>)
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	b933      	cbnz	r3, 80065a0 <_free_r+0x30>
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	6014      	str	r4, [r2, #0]
 8006596:	b003      	add	sp, #12
 8006598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800659c:	f000 b90e 	b.w	80067bc <__malloc_unlock>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d908      	bls.n	80065b6 <_free_r+0x46>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf01      	itttt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	e7ed      	b.n	8006592 <_free_r+0x22>
 80065b6:	461a      	mov	r2, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b10b      	cbz	r3, 80065c0 <_free_r+0x50>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x46>
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	1855      	adds	r5, r2, r1
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x70>
 80065c8:	6824      	ldr	r4, [r4, #0]
 80065ca:	4421      	add	r1, r4
 80065cc:	1854      	adds	r4, r2, r1
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	d1e0      	bne.n	8006596 <_free_r+0x26>
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	6053      	str	r3, [r2, #4]
 80065da:	4421      	add	r1, r4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	e7da      	b.n	8006596 <_free_r+0x26>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x78>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	e7d6      	b.n	8006596 <_free_r+0x26>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf04      	itt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	bf04      	itt	eq
 80065f8:	1949      	addeq	r1, r1, r5
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	6054      	str	r4, [r2, #4]
 80065fe:	e7ca      	b.n	8006596 <_free_r+0x26>
 8006600:	b003      	add	sp, #12
 8006602:	bd30      	pop	{r4, r5, pc}
 8006604:	20000a2c 	.word	0x20000a2c

08006608 <sbrk_aligned>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4e0e      	ldr	r6, [pc, #56]	; (8006644 <sbrk_aligned+0x3c>)
 800660c:	460c      	mov	r4, r1
 800660e:	6831      	ldr	r1, [r6, #0]
 8006610:	4605      	mov	r5, r0
 8006612:	b911      	cbnz	r1, 800661a <sbrk_aligned+0x12>
 8006614:	f000 f8bc 	bl	8006790 <_sbrk_r>
 8006618:	6030      	str	r0, [r6, #0]
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f8b7 	bl	8006790 <_sbrk_r>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d00a      	beq.n	800663c <sbrk_aligned+0x34>
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d007      	beq.n	8006640 <sbrk_aligned+0x38>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f8ac 	bl	8006790 <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d101      	bne.n	8006640 <sbrk_aligned+0x38>
 800663c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	20000a30 	.word	0x20000a30

08006648 <_malloc_r>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	1ccd      	adds	r5, r1, #3
 800664e:	f025 0503 	bic.w	r5, r5, #3
 8006652:	3508      	adds	r5, #8
 8006654:	2d0c      	cmp	r5, #12
 8006656:	bf38      	it	cc
 8006658:	250c      	movcc	r5, #12
 800665a:	2d00      	cmp	r5, #0
 800665c:	4607      	mov	r7, r0
 800665e:	db01      	blt.n	8006664 <_malloc_r+0x1c>
 8006660:	42a9      	cmp	r1, r5
 8006662:	d905      	bls.n	8006670 <_malloc_r+0x28>
 8006664:	230c      	movs	r3, #12
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	2600      	movs	r6, #0
 800666a:	4630      	mov	r0, r6
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	4e2e      	ldr	r6, [pc, #184]	; (800672c <_malloc_r+0xe4>)
 8006672:	f000 f89d 	bl	80067b0 <__malloc_lock>
 8006676:	6833      	ldr	r3, [r6, #0]
 8006678:	461c      	mov	r4, r3
 800667a:	bb34      	cbnz	r4, 80066ca <_malloc_r+0x82>
 800667c:	4629      	mov	r1, r5
 800667e:	4638      	mov	r0, r7
 8006680:	f7ff ffc2 	bl	8006608 <sbrk_aligned>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	4604      	mov	r4, r0
 8006688:	d14d      	bne.n	8006726 <_malloc_r+0xde>
 800668a:	6834      	ldr	r4, [r6, #0]
 800668c:	4626      	mov	r6, r4
 800668e:	2e00      	cmp	r6, #0
 8006690:	d140      	bne.n	8006714 <_malloc_r+0xcc>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	4631      	mov	r1, r6
 8006696:	4638      	mov	r0, r7
 8006698:	eb04 0803 	add.w	r8, r4, r3
 800669c:	f000 f878 	bl	8006790 <_sbrk_r>
 80066a0:	4580      	cmp	r8, r0
 80066a2:	d13a      	bne.n	800671a <_malloc_r+0xd2>
 80066a4:	6821      	ldr	r1, [r4, #0]
 80066a6:	3503      	adds	r5, #3
 80066a8:	1a6d      	subs	r5, r5, r1
 80066aa:	f025 0503 	bic.w	r5, r5, #3
 80066ae:	3508      	adds	r5, #8
 80066b0:	2d0c      	cmp	r5, #12
 80066b2:	bf38      	it	cc
 80066b4:	250c      	movcc	r5, #12
 80066b6:	4629      	mov	r1, r5
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff ffa5 	bl	8006608 <sbrk_aligned>
 80066be:	3001      	adds	r0, #1
 80066c0:	d02b      	beq.n	800671a <_malloc_r+0xd2>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	442b      	add	r3, r5
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	e00e      	b.n	80066e8 <_malloc_r+0xa0>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	1b52      	subs	r2, r2, r5
 80066ce:	d41e      	bmi.n	800670e <_malloc_r+0xc6>
 80066d0:	2a0b      	cmp	r2, #11
 80066d2:	d916      	bls.n	8006702 <_malloc_r+0xba>
 80066d4:	1961      	adds	r1, r4, r5
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	bf18      	it	ne
 80066dc:	6059      	strne	r1, [r3, #4]
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	bf08      	it	eq
 80066e2:	6031      	streq	r1, [r6, #0]
 80066e4:	5162      	str	r2, [r4, r5]
 80066e6:	604b      	str	r3, [r1, #4]
 80066e8:	4638      	mov	r0, r7
 80066ea:	f104 060b 	add.w	r6, r4, #11
 80066ee:	f000 f865 	bl	80067bc <__malloc_unlock>
 80066f2:	f026 0607 	bic.w	r6, r6, #7
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	1af2      	subs	r2, r6, r3
 80066fa:	d0b6      	beq.n	800666a <_malloc_r+0x22>
 80066fc:	1b9b      	subs	r3, r3, r6
 80066fe:	50a3      	str	r3, [r4, r2]
 8006700:	e7b3      	b.n	800666a <_malloc_r+0x22>
 8006702:	6862      	ldr	r2, [r4, #4]
 8006704:	42a3      	cmp	r3, r4
 8006706:	bf0c      	ite	eq
 8006708:	6032      	streq	r2, [r6, #0]
 800670a:	605a      	strne	r2, [r3, #4]
 800670c:	e7ec      	b.n	80066e8 <_malloc_r+0xa0>
 800670e:	4623      	mov	r3, r4
 8006710:	6864      	ldr	r4, [r4, #4]
 8006712:	e7b2      	b.n	800667a <_malloc_r+0x32>
 8006714:	4634      	mov	r4, r6
 8006716:	6876      	ldr	r6, [r6, #4]
 8006718:	e7b9      	b.n	800668e <_malloc_r+0x46>
 800671a:	230c      	movs	r3, #12
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4638      	mov	r0, r7
 8006720:	f000 f84c 	bl	80067bc <__malloc_unlock>
 8006724:	e7a1      	b.n	800666a <_malloc_r+0x22>
 8006726:	6025      	str	r5, [r4, #0]
 8006728:	e7de      	b.n	80066e8 <_malloc_r+0xa0>
 800672a:	bf00      	nop
 800672c:	20000a2c 	.word	0x20000a2c

08006730 <_realloc_r>:
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	4680      	mov	r8, r0
 8006736:	4614      	mov	r4, r2
 8006738:	460e      	mov	r6, r1
 800673a:	b921      	cbnz	r1, 8006746 <_realloc_r+0x16>
 800673c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	4611      	mov	r1, r2
 8006742:	f7ff bf81 	b.w	8006648 <_malloc_r>
 8006746:	b92a      	cbnz	r2, 8006754 <_realloc_r+0x24>
 8006748:	f7ff ff12 	bl	8006570 <_free_r>
 800674c:	4625      	mov	r5, r4
 800674e:	4628      	mov	r0, r5
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	f000 f838 	bl	80067c8 <_malloc_usable_size_r>
 8006758:	4284      	cmp	r4, r0
 800675a:	4607      	mov	r7, r0
 800675c:	d802      	bhi.n	8006764 <_realloc_r+0x34>
 800675e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006762:	d812      	bhi.n	800678a <_realloc_r+0x5a>
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff ff6e 	bl	8006648 <_malloc_r>
 800676c:	4605      	mov	r5, r0
 800676e:	2800      	cmp	r0, #0
 8006770:	d0ed      	beq.n	800674e <_realloc_r+0x1e>
 8006772:	42bc      	cmp	r4, r7
 8006774:	4622      	mov	r2, r4
 8006776:	4631      	mov	r1, r6
 8006778:	bf28      	it	cs
 800677a:	463a      	movcs	r2, r7
 800677c:	f7ff fba4 	bl	8005ec8 <memcpy>
 8006780:	4631      	mov	r1, r6
 8006782:	4640      	mov	r0, r8
 8006784:	f7ff fef4 	bl	8006570 <_free_r>
 8006788:	e7e1      	b.n	800674e <_realloc_r+0x1e>
 800678a:	4635      	mov	r5, r6
 800678c:	e7df      	b.n	800674e <_realloc_r+0x1e>
	...

08006790 <_sbrk_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d06      	ldr	r5, [pc, #24]	; (80067ac <_sbrk_r+0x1c>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	f7fb faa6 	bl	8001cec <_sbrk>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d102      	bne.n	80067aa <_sbrk_r+0x1a>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	b103      	cbz	r3, 80067aa <_sbrk_r+0x1a>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	20000a34 	.word	0x20000a34

080067b0 <__malloc_lock>:
 80067b0:	4801      	ldr	r0, [pc, #4]	; (80067b8 <__malloc_lock+0x8>)
 80067b2:	f000 b811 	b.w	80067d8 <__retarget_lock_acquire_recursive>
 80067b6:	bf00      	nop
 80067b8:	20000a38 	.word	0x20000a38

080067bc <__malloc_unlock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_unlock+0x8>)
 80067be:	f000 b80c 	b.w	80067da <__retarget_lock_release_recursive>
 80067c2:	bf00      	nop
 80067c4:	20000a38 	.word	0x20000a38

080067c8 <_malloc_usable_size_r>:
 80067c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067cc:	1f18      	subs	r0, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfbc      	itt	lt
 80067d2:	580b      	ldrlt	r3, [r1, r0]
 80067d4:	18c0      	addlt	r0, r0, r3
 80067d6:	4770      	bx	lr

080067d8 <__retarget_lock_acquire_recursive>:
 80067d8:	4770      	bx	lr

080067da <__retarget_lock_release_recursive>:
 80067da:	4770      	bx	lr

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
