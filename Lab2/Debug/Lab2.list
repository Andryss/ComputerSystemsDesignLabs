
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c90  08003c90  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c98  08003c98  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00001080  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010a0  200010a0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cc1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf0  00000000  00000000  00029d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022343  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a610  00000000  00000000  0004eaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce481  00000000  00000000  00059103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127584  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dcc  00000000  00000000  001275d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800396c 	.word	0x0800396c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	0800396c 	.word	0x0800396c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BTN_IsSet>:
uint32_t minimum_delay = 20;

uint32_t reset_time = 1;
uint32_t set_time = 0;

_Bool BTN_IsSet(uint16_t* state, uint16_t bit) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
	return (*state & bit) > 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	4013      	ands	r3, r2
 8000514:	b29b      	uxth	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <BTN_Set>:

void BTN_Set(uint16_t* state, uint16_t bit) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	807b      	strh	r3, [r7, #2]
	*state = (*state | bit);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	4313      	orrs	r3, r2
 8000540:	b29a      	uxth	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	801a      	strh	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <BTN_ResetAll>:

void BTN_Reset(uint16_t* state, uint16_t bit) {
	*state = (*state & (~bit));
}

void BTN_ResetAll(uint16_t* state) {
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	*state = 0;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	801a      	strh	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <BTN_GetState>:



void BTN_GetState(uint16_t* state) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	BTN_ResetAll(state);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ffec 	bl	8000552 <BTN_ResetAll>

	while (HAL_GetTick() < last_time + minimum_delay) { }
 800057a:	bf00      	nop
 800057c:	f000 ff8c 	bl	8001498 <HAL_GetTick>
 8000580:	4601      	mov	r1, r0
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <BTN_GetState+0xe8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <BTN_GetState+0xec>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4299      	cmp	r1, r3
 800058e:	d3f5      	bcc.n	800057c <BTN_GetState+0x10>
	last_time = HAL_GetTick();
 8000590:	f000 ff82 	bl	8001498 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <BTN_GetState+0xe8>)
 8000598:	6013      	str	r3, [r2, #0]

	int current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 800059a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059e:	482f      	ldr	r0, [pc, #188]	; (800065c <BTN_GetState+0xf0>)
 80005a0:	f001 fb14 	bl	8001bcc <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	617b      	str	r3, [r7, #20]

	if (current_state == 0) {
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d114      	bne.n	80005d8 <BTN_GetState+0x6c>
		BTN_Set(state, BTN_DOWN);
 80005ae:	2101      	movs	r1, #1
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffbb 	bl	800052c <BTN_Set>

		if (reset_time != 0) {
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <BTN_GetState+0xf4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d046      	beq.n	800064c <BTN_GetState+0xe0>
			BTN_Set(state, BTN_DOWN_EVENT);
 80005be:	2104      	movs	r1, #4
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ffb3 	bl	800052c <BTN_Set>

			reset_time = 0;
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <BTN_GetState+0xf4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
			set_time = HAL_GetTick();
 80005cc:	f000 ff64 	bl	8001498 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a24      	ldr	r2, [pc, #144]	; (8000664 <BTN_GetState+0xf8>)
 80005d4:	6013      	str	r3, [r2, #0]

			set_time = 0;
			reset_time = HAL_GetTick();
		}
	}
}
 80005d6:	e039      	b.n	800064c <BTN_GetState+0xe0>
		BTN_Set(state, BTN_UP);
 80005d8:	2102      	movs	r1, #2
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ffa6 	bl	800052c <BTN_Set>
		if (set_time == 0) {
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <BTN_GetState+0xf8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d110      	bne.n	800060a <BTN_GetState+0x9e>
			uint32_t up_time = HAL_GetTick() - reset_time;
 80005e8:	f000 ff56 	bl	8001498 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <BTN_GetState+0xf4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]
			if (up_time > up_threshold) {
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <BTN_GetState+0xfc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d925      	bls.n	800064c <BTN_GetState+0xe0>
				BTN_Set(state, BTN_EOF);
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff92 	bl	800052c <BTN_Set>
}
 8000608:	e020      	b.n	800064c <BTN_GetState+0xe0>
			BTN_Set(state, BTN_UP_EVENT);
 800060a:	2108      	movs	r1, #8
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff8d 	bl	800052c <BTN_Set>
			uint32_t down_time = HAL_GetTick() - set_time;
 8000612:	f000 ff41 	bl	8001498 <HAL_GetTick>
 8000616:	4602      	mov	r2, r0
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <BTN_GetState+0xf8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	613b      	str	r3, [r7, #16]
			if (down_time < down_threshold) {
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <BTN_GetState+0x100>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	429a      	cmp	r2, r3
 8000628:	d204      	bcs.n	8000634 <BTN_GetState+0xc8>
				BTN_Set(state, BTN_SHORT_PRESS);
 800062a:	2110      	movs	r1, #16
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ff7d 	bl	800052c <BTN_Set>
 8000632:	e003      	b.n	800063c <BTN_GetState+0xd0>
				BTN_Set(state, BTN_LONG_PRESS);
 8000634:	2120      	movs	r1, #32
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff78 	bl	800052c <BTN_Set>
			set_time = 0;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <BTN_GetState+0xf8>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
			reset_time = HAL_GetTick();
 8000642:	f000 ff29 	bl	8001498 <HAL_GetTick>
 8000646:	4603      	mov	r3, r0
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <BTN_GetState+0xf4>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000003c 	.word	0x2000003c
 8000658:	20000008 	.word	0x20000008
 800065c:	40020800 	.word	0x40020800
 8000660:	2000000c 	.word	0x2000000c
 8000664:	20000040 	.word	0x20000040
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004

08000670 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <is_buf_empty>:

_Bool is_buf_empty(struct Buffer* buf) {
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <is_buf_full>:

_Bool is_buf_full(struct Buffer* buf) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == sizeof(buf->data) - 1));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ca:	3301      	adds	r3, #1
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d00b      	beq.n	80006ee <is_buf_full+0x32>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d108      	bne.n	80006f2 <is_buf_full+0x36>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d101      	bne.n	80006f2 <is_buf_full+0x36>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <is_buf_full+0x38>
 80006f2:	2300      	movs	r3, #0
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000716:	e01e      	b.n	8000756 <buf_push+0x50>
		if (is_buf_full(buf)) {
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ffcf 	bl	80006bc <is_buf_full>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11d      	bne.n	8000760 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800072a:	3301      	adds	r3, #1
 800072c:	b29b      	uxth	r3, r3
 800072e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000732:	b29a      	uxth	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000740:	461a      	mov	r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	7819      	ldrb	r1, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	5499      	strb	r1, [r3, r2]
		data++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
		written++;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3dc      	bcc.n	8000718 <buf_push+0x12>
 800075e:	e000      	b.n	8000762 <buf_push+0x5c>
			break;
 8000760:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ffaa 	bl	80006bc <is_buf_full>
 8000768:	4603      	mov	r3, r0
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00a      	beq.n	800078a <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800077a:	3301      	adds	r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000782:	b29a      	uxth	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2100      	movs	r1, #0
 8000796:	5499      	strb	r1, [r3, r2]
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <buf_pop>:

_Bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff78 	bl	80006a2 <is_buf_empty>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <buf_pop+0x1c>
		return false;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e040      	b.n	800083e <buf_pop+0x9e>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 80007d6:	e01b      	b.n	8000810 <buf_pop+0x70>
		if (read < size) {
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d20c      	bcs.n	80007fa <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80007e6:	4619      	mov	r1, r3
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	5c52      	ldrb	r2, [r2, r1]
 80007f2:	701a      	strb	r2, [r3, #0]
			read++;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000800:	3301      	adds	r3, #1
 8000802:	b29b      	uxth	r3, r3
 8000804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000808:	b29a      	uxth	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	5c9b      	ldrb	r3, [r3, r2]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1db      	bne.n	80007d8 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	d102      	bne.n	800082e <buf_pop+0x8e>
 8000828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800082c:	e000      	b.n	8000830 <buf_pop+0x90>
 800082e:	2200      	movs	r2, #0
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	return true;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a2d      	ldr	r2, [pc, #180]	; (800091c <MX_GPIO_Init+0xd4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_GPIO_Init+0xd4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <MX_GPIO_Init+0xd4>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_GPIO_Init+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_GPIO_Init+0xd4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_GPIO_Init+0xd4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_GPIO_Init+0xd4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0xd4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0xd4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0xd4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <MX_GPIO_Init+0xd8>)
 80008d6:	f001 f991 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_GPIO_Init+0xdc>)
 80008f0:	f000 ffc0 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0xd8>)
 800090e:	f000 ffb1 	bl	8001874 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020c00 	.word	0x40020c00
 8000924:	40020800 	.word	0x40020800

08000928 <enable_interrupts>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool is_interrupts = true;

void enable_interrupts() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800092c:	2047      	movs	r0, #71	; 0x47
 800092e:	f000 feda 	bl	80016e6 <HAL_NVIC_EnableIRQ>
	is_interrupts = true;
 8000932:	4b02      	ldr	r3, [pc, #8]	; (800093c <enable_interrupts+0x14>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000010 	.word	0x20000010

08000940 <disable_interrupts>:

void disable_interrupts() {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&huart6);
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <disable_interrupts+0x1c>)
 8000946:	f001 ffc1 	bl	80028cc <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 800094a:	2047      	movs	r0, #71	; 0x47
 800094c:	f000 fed9 	bl	8001702 <HAL_NVIC_DisableIRQ>
	is_interrupts = false;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <disable_interrupts+0x20>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20001058 	.word	0x20001058
 8000960:	20000010 	.word	0x20000010

08000964 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	if (is_interrupts) {
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <transmit+0x48>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00f      	beq.n	8000996 <transmit+0x32>
		if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <transmit+0x4c>)
 8000980:	f001 ff2f 	bl	80027e2 <HAL_UART_Transmit_IT>
 8000984:	4603      	mov	r3, r0
 8000986:	2b02      	cmp	r3, #2
 8000988:	d10c      	bne.n	80009a4 <transmit+0x40>
			buf_push(&transmitBuffer, data, size);
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <transmit+0x50>)
 8000990:	f7ff feb9 	bl	8000706 <buf_push>
		}
	} else {
		HAL_UART_Transmit(&huart6, data, size, 100);
	}
}
 8000994:	e006      	b.n	80009a4 <transmit+0x40>
		HAL_UART_Transmit(&huart6, data, size, 100);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <transmit+0x4c>)
 80009a0:	f001 fdeb 	bl	800257a <HAL_UART_Transmit>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000010 	.word	0x20000010
 80009b0:	20001058 	.word	0x20001058
 80009b4:	2000084c 	.word	0x2000084c

080009b8 <transmitc>:

void transmitc(char* data, size_t size) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) data, size);
 80009c2:	6839      	ldr	r1, [r7, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ffcd 	bl	8000964 <transmit>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <receive>:

void receive() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if (is_interrupts) {
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <receive+0x40>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d005      	beq.n	80009ec <receive+0x18>
		HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 80009e0:	2201      	movs	r2, #1
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <receive+0x44>)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <receive+0x48>)
 80009e6:	f001 ff41 	bl	800286c <HAL_UART_Receive_IT>
		if (HAL_UART_Receive(&huart6, char_buf, sizeof(char_buf), 0) == HAL_OK) {
			buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
			transmit(char_buf, sizeof(char_buf));
		}
	}
}
 80009ea:	e011      	b.n	8000a10 <receive+0x3c>
		if (HAL_UART_Receive(&huart6, char_buf, sizeof(char_buf), 0) == HAL_OK) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	2201      	movs	r2, #1
 80009f0:	4909      	ldr	r1, [pc, #36]	; (8000a18 <receive+0x44>)
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <receive+0x48>)
 80009f4:	f001 fe53 	bl	800269e <HAL_UART_Receive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <receive+0x3c>
			buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 80009fe:	2201      	movs	r2, #1
 8000a00:	4905      	ldr	r1, [pc, #20]	; (8000a18 <receive+0x44>)
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <receive+0x4c>)
 8000a04:	f7ff fe7f 	bl	8000706 <buf_push>
			transmit(char_buf, sizeof(char_buf));
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <receive+0x44>)
 8000a0c:	f7ff ffaa 	bl	8000964 <transmit>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000010 	.word	0x20000010
 8000a18:	20001054 	.word	0x20001054
 8000a1c:	20001058 	.word	0x20001058
 8000a20:	20000044 	.word	0x20000044

08000a24 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4906      	ldr	r1, [pc, #24]	; (8000a48 <HAL_UART_RxCpltCallback+0x24>)
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x28>)
 8000a32:	f7ff fe68 	bl	8000706 <buf_push>
	transmit(char_buf, sizeof(char_buf));
 8000a36:	2101      	movs	r1, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <HAL_UART_RxCpltCallback+0x24>)
 8000a3a:	f7ff ff93 	bl	8000964 <transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001054 	.word	0x20001054
 8000a4c:	20000044 	.word	0x20000044

08000a50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000a5c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000a60:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  if (buf_pop(&transmitBuffer, buf, sizeof(buf))) {
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <HAL_UART_TxCpltCallback+0x4c>)
 8000a6e:	f7ff fe97 	bl	80007a0 <buf_pop>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00c      	beq.n	8000a92 <HAL_UART_TxCpltCallback+0x42>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fbb5 	bl	80001ec <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <HAL_UART_TxCpltCallback+0x50>)
 8000a8e:	f001 fea8 	bl	80027e2 <HAL_UART_Transmit_IT>
  }
}
 8000a92:	bf00      	nop
 8000a94:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000084c 	.word	0x2000084c
 8000aa0:	20001058 	.word	0x20001058

08000aa4 <is_digit.2>:
  size_t new_mode_num = 4;

  char stdin[256] = {0};
  size_t stdinp = 0;

  bool is_digit(char c) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	f8c7 c000 	str.w	ip, [r7]
	  return c >= '0' && c <= '9';
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab6:	d904      	bls.n	8000ac2 <is_digit.2+0x1e>
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b39      	cmp	r3, #57	; 0x39
 8000abc:	d801      	bhi.n	8000ac2 <is_digit.2+0x1e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <is_digit.2+0x20>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
  }
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <main>:
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8000ade:	af00      	add	r7, sp, #0
int main(void)
 8000ae0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8000ae4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000ae8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000aec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  HAL_Init();
 8000af0:	f000 fc6c 	bl	80013cc <HAL_Init>
  buf_init(&receiveBuffer);
 8000af4:	48d2      	ldr	r0, [pc, #840]	; (8000e40 <main+0x368>)
 8000af6:	f7ff fdbb 	bl	8000670 <buf_init>
  buf_init(&transmitBuffer);
 8000afa:	48d2      	ldr	r0, [pc, #840]	; (8000e44 <main+0x36c>)
 8000afc:	f7ff fdb8 	bl	8000670 <buf_init>
  SystemClock_Config();
 8000b00:	f000 faec 	bl	80010dc <SystemClock_Config>
  MX_GPIO_Init();
 8000b04:	f7ff fea0 	bl	8000848 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000b08:	f000 fbbc 	bl	8001284 <MX_USART6_UART_Init>
  uint32_t garland_modes[MODES][MODE_STEPS] = {
 8000b0c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b10:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b14:	4acc      	ldr	r2, [pc, #816]	; (8000e48 <main+0x370>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	4611      	mov	r1, r2
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	461a      	mov	r2, r3
 8000b20:	f002 fefa 	bl	8003918 <memcpy>
  uint32_t garland_freq[MODES] = { 400, 400, 1000, 100, 500, 500, 500, 500 };
 8000b24:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b28:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b2c:	4ac7      	ldr	r2, [pc, #796]	; (8000e4c <main+0x374>)
 8000b2e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8000b32:	4615      	mov	r5, r2
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  size_t modes_steps[MODES] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8000b40:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b44:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000b48:	4618      	mov	r0, r3
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f002 fef0 	bl	8003934 <memset>
  size_t cur_mode = 0;
 8000b54:	2200      	movs	r2, #0
 8000b56:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b5a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b5e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  int should_change_mode = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  uint16_t state = 0; // waiting for command
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b6e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b72:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  uint32_t new_mode_steps[MODE_STEPS] = { -1, -1, -1, -1, -1, -1, -1, -1 };
 8000b76:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b7a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b7e:	4ab4      	ldr	r2, [pc, #720]	; (8000e50 <main+0x378>)
 8000b80:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8000b84:	4615      	mov	r5, r2
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  size_t new_mode_num = 4;
 8000b92:	2204      	movs	r2, #4
 8000b94:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b98:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  char stdin[256] = {0};
 8000ba0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000ba4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000ba8:	4aaa      	ldr	r2, [pc, #680]	; (8000e54 <main+0x37c>)
 8000baa:	8812      	ldrh	r2, [r2, #0]
 8000bac:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8000bb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000bb4:	22fe      	movs	r2, #254	; 0xfe
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 febb 	bl	8003934 <memset>
  size_t stdinp = 0;
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bc4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bc8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t cur_state = garland_modes[cur_mode][modes_steps[cur_mode]];
 8000bcc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bd0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bd4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000bd8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bdc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000be4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000be8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bec:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 8000bf0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bf4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bf8:	00c9      	lsls	r1, r1, #3
 8000bfa:	440a      	add	r2, r1
 8000bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c00:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

	  if (cur_state == -1) {
 8000c04:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c0c:	d139      	bne.n	8000c82 <main+0x1aa>
		  if (modes_steps[cur_mode] == 0) {
 8000c0e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c12:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c16:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000c1a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c1e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10f      	bne.n	8000c4a <main+0x172>
			  cur_mode = (cur_mode + 1) % MODES;
 8000c2a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c2e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c36:	3301      	adds	r3, #1
 8000c38:	f003 0207 	and.w	r2, r3, #7
 8000c3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c40:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c44:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			  continue;
 8000c48:	e0f9      	b.n	8000e3e <main+0x366>
		  }
		  modes_steps[cur_mode] = 0;
 8000c4a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c4e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c52:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000c56:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c5a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  cur_state = garland_modes[cur_mode][0];
 8000c64:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c68:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c6c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c70:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000c74:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	4413      	add	r3, r2
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4873      	ldr	r0, [pc, #460]	; (8000e58 <main+0x380>)
 8000c8a:	f000 ffb7 	bl	8001bfc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c94:	4870      	ldr	r0, [pc, #448]	; (8000e58 <main+0x380>)
 8000c96:	f000 ffb1 	bl	8001bfc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca0:	486d      	ldr	r0, [pc, #436]	; (8000e58 <main+0x380>)
 8000ca2:	f000 ffab 	bl	8001bfc <HAL_GPIO_WritePin>

	  if ((cur_state & 0x1) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ca6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d005      	beq.n	8000cbe <main+0x1e6>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4867      	ldr	r0, [pc, #412]	; (8000e58 <main+0x380>)
 8000cba:	f000 ff9f 	bl	8001bfc <HAL_GPIO_WritePin>
	  if ((cur_state & 0x2) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cbe:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <main+0x1fe>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd0:	4861      	ldr	r0, [pc, #388]	; (8000e58 <main+0x380>)
 8000cd2:	f000 ff93 	bl	8001bfc <HAL_GPIO_WritePin>
	  if ((cur_state & 0x4) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000cd6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <main+0x216>
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce8:	485b      	ldr	r0, [pc, #364]	; (8000e58 <main+0x380>)
 8000cea:	f000 ff87 	bl	8001bfc <HAL_GPIO_WritePin>

	  uint32_t wait_ticks = garland_freq[cur_mode];
 8000cee:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000cf2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000cf6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000cfa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000cfe:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d02:	3240      	adds	r2, #64	; 0x40
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	  uint32_t ticks = HAL_GetTick();
 8000d0c:	f000 fbc4 	bl	8001498 <HAL_GetTick>
 8000d10:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
	  while ((HAL_GetTick() - ticks) < wait_ticks) {
 8000d14:	e057      	b.n	8000dc6 <main+0x2ee>

		  receive();
 8000d16:	f7ff fe5d 	bl	80009d4 <receive>

		  uint8_t read[2] = {0};
 8000d1a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d1e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
		  if (buf_pop(&receiveBuffer, read, sizeof(read))) {
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2202      	movs	r2, #2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4844      	ldr	r0, [pc, #272]	; (8000e40 <main+0x368>)
 8000d2e:	f7ff fd37 	bl	80007a0 <buf_pop>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d036      	beq.n	8000da6 <main+0x2ce>
			  char c = (char) read[0];
 8000d38:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d3c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			  if (stdinp == sizeof(stdin)) {
 8000d46:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d4a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d56:	d10b      	bne.n	8000d70 <main+0x298>
				  transmitc("Input buffer overflow\n", 23);
 8000d58:	2117      	movs	r1, #23
 8000d5a:	4840      	ldr	r0, [pc, #256]	; (8000e5c <main+0x384>)
 8000d5c:	f7ff fe2c 	bl	80009b8 <transmitc>
				  stdinp = 0;
 8000d60:	2200      	movs	r2, #0
 8000d62:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d66:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000d6e:	e01a      	b.n	8000da6 <main+0x2ce>
			  } else {
				  stdin[stdinp++] = c;
 8000d70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d74:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d7c:	1c59      	adds	r1, r3, #1
 8000d7e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000d82:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000d86:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
 8000d8a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000d8e:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000d92:	4413      	add	r3, r2
 8000d94:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 8000d98:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
				  validate_command();
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	469c      	mov	ip, r3
 8000da2:	f000 f883 	bl	8000eac <validate_command.0>
			  }
		  }

		  BTN_GetState(&btn_state);
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fbdf 	bl	800056c <BTN_GetState>
		  if (BTN_IsSet(&btn_state, BTN_DOWN_EVENT)) {
 8000dae:	1dbb      	adds	r3, r7, #6
 8000db0:	2104      	movs	r1, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fba4 	bl	8000500 <BTN_IsSet>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <main+0x2ee>
			  should_change_mode = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8000dc4:	e009      	b.n	8000dda <main+0x302>
	  while ((HAL_GetTick() - ticks) < wait_ticks) {
 8000dc6:	f000 fb67 	bl	8001498 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d89d      	bhi.n	8000d16 <main+0x23e>
			  break;
		  }
	  }

	  if (should_change_mode == 1) {
 8000dda:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d112      	bne.n	8000e08 <main+0x330>
		  should_change_mode = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
		  cur_mode = (cur_mode + 1) % MODES;
 8000de8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000dec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000df0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000df4:	3301      	adds	r3, #1
 8000df6:	f003 0207 	and.w	r2, r3, #7
 8000dfa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000dfe:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e02:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		  continue;
 8000e06:	e01a      	b.n	8000e3e <main+0x366>
	  }

	  modes_steps[cur_mode] = (modes_steps[cur_mode] + 1) % MODE_STEPS;
 8000e08:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e0c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e10:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000e14:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e18:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	3301      	adds	r3, #1
 8000e22:	f003 0107 	and.w	r1, r3, #7
 8000e26:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e2a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e2e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000e32:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e36:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
 8000e3e:	e6c5      	b.n	8000bcc <main+0xf4>
 8000e40:	20000044 	.word	0x20000044
 8000e44:	2000084c 	.word	0x2000084c
 8000e48:	0800399c 	.word	0x0800399c
 8000e4c:	08003a9c 	.word	0x08003a9c
 8000e50:	08003abc 	.word	0x08003abc
 8000e54:	08003adc 	.word	0x08003adc
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	08003984 	.word	0x08003984

08000e60 <is_digits.1>:
  bool is_digits(char* str, size_t size) {
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4664      	mov	r4, ip
 8000e6c:	f8c7 c004 	str.w	ip, [r7, #4]
	  while (size > 0) {
 8000e70:	e013      	b.n	8000e9a <is_digits.1+0x3a>
		  if (!is_digit(*str)) return false;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	46a4      	mov	ip, r4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe13 	bl	8000aa4 <is_digit.2>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <is_digits.1+0x2e>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e009      	b.n	8000ea2 <is_digits.1+0x42>
		  str++;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
		  size--;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
	  while (size > 0) {
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e8      	bne.n	8000e72 <is_digits.1+0x12>
  	  return true;
 8000ea0:	2301      	movs	r3, #1
  }
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
	...

08000eac <validate_command.0>:
  void validate_command() {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4664      	mov	r4, ip
 8000eb4:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (state == 0) {
 8000eb8:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80b7 	bne.w	8001030 <validate_command.0+0x184>
		  if (stdinp > 12 && strncmp(stdin, "new ", 4) && is_digits(stdin + 4, MODE_STEPS)) {
 8000ec2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d955      	bls.n	8000f76 <validate_command.0+0xca>
 8000eca:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4978      	ldr	r1, [pc, #480]	; (80010b4 <validate_command.0+0x208>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fd36 	bl	8003944 <strncmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d04b      	beq.n	8000f76 <validate_command.0+0xca>
 8000ede:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	46a4      	mov	ip, r4
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ffb9 	bl	8000e60 <is_digits.1>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d040      	beq.n	8000f76 <validate_command.0+0xca>
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e032      	b.n	8000f60 <validate_command.0+0xb4>
				  char color = *(stdin + 4 + i);
 8000efa:	f504 72a7 	add.w	r2, r4, #334	; 0x14e
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3304      	adds	r3, #4
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	73fb      	strb	r3, [r7, #15]
				  if (color == 'g') new_mode_steps[i] = 0x1;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b67      	cmp	r3, #103	; 0x67
 8000f0c:	d105      	bne.n	8000f1a <validate_command.0+0x6e>
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	334a      	adds	r3, #74	; 0x4a
 8000f12:	2201      	movs	r2, #1
 8000f14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f18:	e01f      	b.n	8000f5a <validate_command.0+0xae>
				  else if (color == 'y') new_mode_steps[i] = 0x2;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b79      	cmp	r3, #121	; 0x79
 8000f1e:	d105      	bne.n	8000f2c <validate_command.0+0x80>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	334a      	adds	r3, #74	; 0x4a
 8000f24:	2202      	movs	r2, #2
 8000f26:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f2a:	e016      	b.n	8000f5a <validate_command.0+0xae>
				  else if (color == 'r') new_mode_steps[i] = 0x4;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b72      	cmp	r3, #114	; 0x72
 8000f30:	d105      	bne.n	8000f3e <validate_command.0+0x92>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	334a      	adds	r3, #74	; 0x4a
 8000f36:	2204      	movs	r2, #4
 8000f38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f3c:	e00d      	b.n	8000f5a <validate_command.0+0xae>
				  else if (color == 'n') new_mode_steps[i] = 0x0;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b6e      	cmp	r3, #110	; 0x6e
 8000f42:	d105      	bne.n	8000f50 <validate_command.0+0xa4>
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	334a      	adds	r3, #74	; 0x4a
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f4e:	e004      	b.n	8000f5a <validate_command.0+0xae>
					  transmitc("Unknown led\n", 12);
 8000f50:	210c      	movs	r1, #12
 8000f52:	4859      	ldr	r0, [pc, #356]	; (80010b8 <validate_command.0+0x20c>)
 8000f54:	f7ff fd30 	bl	80009b8 <transmitc>
					  return;
 8000f58:	e0a8      	b.n	80010ac <validate_command.0+0x200>
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9c9      	bls.n	8000efa <validate_command.0+0x4e>
			  state = 1; // wait for new mode freq input
 8000f66:	2301      	movs	r3, #1
 8000f68:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
			  transmitc("Input new mode freq (0-9):\n", 27);
 8000f6c:	211b      	movs	r1, #27
 8000f6e:	4853      	ldr	r0, [pc, #332]	; (80010bc <validate_command.0+0x210>)
 8000f70:	f7ff fd22 	bl	80009b8 <transmitc>
			  return;
 8000f74:	e09a      	b.n	80010ac <validate_command.0+0x200>
		  if (stdinp > 4 && strncmp(stdin, "set ", 4) && is_digit(stdin[4])) {
 8000f76:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d929      	bls.n	8000fd2 <validate_command.0+0x126>
 8000f7e:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000f82:	2204      	movs	r2, #4
 8000f84:	494e      	ldr	r1, [pc, #312]	; (80010c0 <validate_command.0+0x214>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fcdc 	bl	8003944 <strncmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01f      	beq.n	8000fd2 <validate_command.0+0x126>
 8000f92:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
 8000f96:	46a4      	mov	ip, r4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fd83 	bl	8000aa4 <is_digit.2>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d016      	beq.n	8000fd2 <validate_command.0+0x126>
			  size_t mode = stdin[4] - '0';
 8000fa4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
 8000fa8:	3b30      	subs	r3, #48	; 0x30
 8000faa:	60bb      	str	r3, [r7, #8]
			  if (mode >= stdin[4]) {
 8000fac:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d304      	bcc.n	8000fc2 <validate_command.0+0x116>
				  transmitc("Unknown mode\n", 13);
 8000fb8:	210d      	movs	r1, #13
 8000fba:	4842      	ldr	r0, [pc, #264]	; (80010c4 <validate_command.0+0x218>)
 8000fbc:	f7ff fcfc 	bl	80009b8 <transmitc>
				  return;
 8000fc0:	e074      	b.n	80010ac <validate_command.0+0x200>
			  cur_mode = mode;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
			  transmitc("OK\n", 3);
 8000fc8:	2103      	movs	r1, #3
 8000fca:	483f      	ldr	r0, [pc, #252]	; (80010c8 <validate_command.0+0x21c>)
 8000fcc:	f7ff fcf4 	bl	80009b8 <transmitc>
			  return;
 8000fd0:	e06c      	b.n	80010ac <validate_command.0+0x200>
		  if (stdinp > 17 && strncmp(stdin, "set interrupts on", 17)) {
 8000fd2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000fd6:	2b11      	cmp	r3, #17
 8000fd8:	d910      	bls.n	8000ffc <validate_command.0+0x150>
 8000fda:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000fde:	2211      	movs	r2, #17
 8000fe0:	493a      	ldr	r1, [pc, #232]	; (80010cc <validate_command.0+0x220>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fcae 	bl	8003944 <strncmp>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <validate_command.0+0x150>
			  enable_interrupts();
 8000fee:	f7ff fc9b 	bl	8000928 <enable_interrupts>
			  transmitc("OK\n", 3);
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4834      	ldr	r0, [pc, #208]	; (80010c8 <validate_command.0+0x21c>)
 8000ff6:	f7ff fcdf 	bl	80009b8 <transmitc>
			  return;
 8000ffa:	e057      	b.n	80010ac <validate_command.0+0x200>
		  if (stdinp > 18 && strncmp(stdin, "set interrupts off", 18)) {
 8000ffc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8001000:	2b12      	cmp	r3, #18
 8001002:	d910      	bls.n	8001026 <validate_command.0+0x17a>
 8001004:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8001008:	2212      	movs	r2, #18
 800100a:	4931      	ldr	r1, [pc, #196]	; (80010d0 <validate_command.0+0x224>)
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fc99 	bl	8003944 <strncmp>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <validate_command.0+0x17a>
			  disable_interrupts();
 8001018:	f7ff fc92 	bl	8000940 <disable_interrupts>
			  transmitc("OK\n", 3);
 800101c:	2103      	movs	r1, #3
 800101e:	482a      	ldr	r0, [pc, #168]	; (80010c8 <validate_command.0+0x21c>)
 8001020:	f7ff fcca 	bl	80009b8 <transmitc>
			  return;
 8001024:	e042      	b.n	80010ac <validate_command.0+0x200>
		  transmitc("Unknown command\n", 17);
 8001026:	2111      	movs	r1, #17
 8001028:	482a      	ldr	r0, [pc, #168]	; (80010d4 <validate_command.0+0x228>)
 800102a:	f7ff fcc5 	bl	80009b8 <transmitc>
		  return;
 800102e:	e03d      	b.n	80010ac <validate_command.0+0x200>
	  } else if (state == 1) {
 8001030:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 8001034:	2b01      	cmp	r3, #1
 8001036:	d139      	bne.n	80010ac <validate_command.0+0x200>
		  if (stdinp > 1 && is_digit(stdin[0])) {
 8001038:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800103c:	2b01      	cmp	r3, #1
 800103e:	d930      	bls.n	80010a2 <validate_command.0+0x1f6>
 8001040:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 8001044:	46a4      	mov	ip, r4
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd2c 	bl	8000aa4 <is_digit.2>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d027      	beq.n	80010a2 <validate_command.0+0x1f6>
			  garland_freq[new_mode_num] = (stdin[0] - '0' + 1) * 100;
 8001052:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 8001056:	3b2f      	subs	r3, #47	; 0x2f
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	461a      	mov	r2, r3
 8001060:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001064:	3340      	adds	r3, #64	; 0x40
 8001066:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e00d      	b.n	800108c <validate_command.0+0x1e0>
				  garland_modes[new_mode_num][i] = new_mode_steps[i];
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	334a      	adds	r3, #74	; 0x4a
 8001074:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8001078:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800107c:	00d9      	lsls	r1, r3, #3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	440b      	add	r3, r1
 8001082:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3301      	adds	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d9ee      	bls.n	8001070 <validate_command.0+0x1c4>
			  state = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
			  transmitc("OK\n", 3);
 8001098:	2103      	movs	r1, #3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <validate_command.0+0x21c>)
 800109c:	f7ff fc8c 	bl	80009b8 <transmitc>
			  return;
 80010a0:	e004      	b.n	80010ac <validate_command.0+0x200>
		  transmitc("Unknown freq\n", 13);
 80010a2:	210d      	movs	r1, #13
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <validate_command.0+0x22c>)
 80010a6:	f7ff fc87 	bl	80009b8 <transmitc>
		  return;
 80010aa:	bf00      	nop
  }
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08003bdc 	.word	0x08003bdc
 80010b8:	08003be4 	.word	0x08003be4
 80010bc:	08003bf4 	.word	0x08003bf4
 80010c0:	08003c10 	.word	0x08003c10
 80010c4:	08003c18 	.word	0x08003c18
 80010c8:	08003c28 	.word	0x08003c28
 80010cc:	08003c2c 	.word	0x08003c2c
 80010d0:	08003c40 	.word	0x08003c40
 80010d4:	08003c54 	.word	0x08003c54
 80010d8:	08003c68 	.word	0x08003c68

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fc22 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xb8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <SystemClock_Config+0xb8>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <SystemClock_Config+0xb8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <SystemClock_Config+0xbc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <SystemClock_Config+0xbc>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SystemClock_Config+0xbc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fd6d 	bl	8001c30 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800115c:	f000 f81e 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f000 ffd0 	bl	8002120 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001186:	f000 f809 	bl	800119c <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f914 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART6_IRQHandler+0x10>)
 8001252:	f001 fbdf 	bl	8002a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20001058 	.word	0x20001058

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART6_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 8001290:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001294:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012bc:	f001 f910 	bl	80024e0 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f7ff ff69 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20001058 	.word	0x20001058
 80012d4:	40011400 	.word	0x40011400

080012d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_UART_MspInit+0x94>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d133      	bne.n	8001362 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_UART_MspInit+0x98>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_UART_MspInit+0x98>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_UART_MspInit+0x98>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_UART_MspInit+0x98>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <HAL_UART_MspInit+0x98>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_UART_MspInit+0x98>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001342:	2308      	movs	r3, #8
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <HAL_UART_MspInit+0x9c>)
 800134e:	f000 fa91 	bl	8001874 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2047      	movs	r0, #71	; 0x47
 8001358:	f000 f9a9 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800135c:	2047      	movs	r0, #71	; 0x47
 800135e:	f000 f9c2 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40011400 	.word	0x40011400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	; (80013c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a2:	f7ff ff5d 	bl	8001260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f002 fa93 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fb95 	bl	8000ad8 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80013bc:	08003ca0 	.word	0x08003ca0
  ldr r2, =_sbss
 80013c0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80013c4:	200010a0 	.word	0x200010a0

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_Init+0x40>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_Init+0x40>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x40>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f94f 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fed2 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f975 	bl	800171e <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144c:	f000 f92f 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000014 	.word	0x20000014
 8001468:	2000001c 	.word	0x2000001c
 800146c:	20000018 	.word	0x20000018

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000001c 	.word	0x2000001c
 8001494:	2000109c 	.word	0x2000109c

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000109c 	.word	0x2000109c

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db12      	blt.n	8001588 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	490a      	ldr	r1, [pc, #40]	; (8001594 <__NVIC_DisableIRQ+0x44>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	3320      	adds	r3, #32
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff05 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff1a 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff0d 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff1d 	bl	8001550 <__NVIC_DisableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff94 	bl	8001654 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fea8 	bl	8001498 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d008      	beq.n	8001768 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e052      	b.n	800180e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0216 	bic.w	r2, r2, #22
 8001776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001786:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <HAL_DMA_Abort+0x62>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0208 	bic.w	r2, r2, #8
 80017a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	e013      	b.n	80017e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ba:	f7ff fe6d 	bl	8001498 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d90c      	bls.n	80017e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e015      	b.n	800180e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e4      	bne.n	80017ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	223f      	movs	r2, #63	; 0x3f
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d004      	beq.n	8001834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e00c      	b.n	800184e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2205      	movs	r2, #5
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e177      	b.n	8001b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8166 	bne.w	8001b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80c0 	beq.w	8001b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <HAL_GPIO_Init+0x328>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_GPIO_Init+0x32c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d037      	beq.n	8001ab2 <HAL_GPIO_Init+0x23e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_GPIO_Init+0x330>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_GPIO_Init+0x23a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d02b      	beq.n	8001aaa <HAL_GPIO_Init+0x236>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a55      	ldr	r2, [pc, #340]	; (8001bac <HAL_GPIO_Init+0x338>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x232>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x33c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x22e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <HAL_GPIO_Init+0x340>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x22a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x344>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x348>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x222>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_GPIO_Init+0x34c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x21e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x350>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x21a>
 8001a8a:	2309      	movs	r3, #9
 8001a8c:	e012      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001a8e:	230a      	movs	r3, #10
 8001a90:	e010      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001a92:	2308      	movs	r3, #8
 8001a94:	e00e      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e00c      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x240>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4935      	ldr	r1, [pc, #212]	; (8001b9c <HAL_GPIO_Init+0x328>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af6:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_GPIO_Init+0x354>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f ae84 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020c00 	.word	0x40020c00
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40021400 	.word	0x40021400
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	40021c00 	.word	0x40021c00
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40022400 	.word	0x40022400
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e267      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d075      	beq.n	8001d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d00c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c72:	d10b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d157      	bne.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e242      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x74>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6f      	ldr	r2, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a68      	ldr	r2, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a65      	ldr	r2, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fbd6 	bl	8001498 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fbd2 	bl	8001498 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e207      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fbc2 	bl	8001498 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fbbe 	bl	8001498 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1f3      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1c7      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x244>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff fb77 	bl	8001498 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff fb73 	bl	8001498 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1a8      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4925      	ldr	r1, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_OscConfig+0x244>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fb56 	bl	8001498 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb52 	bl	8001498 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e187      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d036      	beq.n	8001e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x248>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fb36 	bl	8001498 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb32 	bl	8001498 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e167      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x240>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x200>
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x248>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb1f 	bl	8001498 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e00e      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb1b 	bl	8001498 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d907      	bls.n	8001e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e150      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470000 	.word	0x42470000
 8001e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ea      	bne.n	8001e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8097 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a7c      	ldr	r2, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <HAL_RCC_OscConfig+0x474>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b74      	ldr	r3, [pc, #464]	; (80020a4 <HAL_RCC_OscConfig+0x474>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a73      	ldr	r2, [pc, #460]	; (80020a4 <HAL_RCC_OscConfig+0x474>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fadb 	bl	8001498 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fad7 	bl	8001498 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e10c      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x474>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2ea>
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e01c      	b.n	8001f54 <HAL_RCC_OscConfig+0x324>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x30c>
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a5e      	ldr	r2, [pc, #376]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a5b      	ldr	r2, [pc, #364]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0x324>
 8001f3c:	4b58      	ldr	r3, [pc, #352]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a57      	ldr	r2, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a54      	ldr	r2, [pc, #336]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fa9c 	bl	8001498 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7ff fa98 	bl	8001498 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0cb      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ee      	beq.n	8001f64 <HAL_RCC_OscConfig+0x334>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7ff fa86 	bl	8001498 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7ff fa82 	bl	8001498 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0b5      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a1 	beq.w	8002110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d05c      	beq.n	8002094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d141      	bne.n	8002066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_RCC_OscConfig+0x478>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fa56 	bl	8001498 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff fa52 	bl	8001498 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e087      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	3b01      	subs	r3, #1
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	491b      	ldr	r1, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x478>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff fa2b 	bl	8001498 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff fa27 	bl	8001498 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e05c      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x416>
 8002064:	e054      	b.n	8002110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_OscConfig+0x478>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fa14 	bl	8001498 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff fa10 	bl	8001498 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e045      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_OscConfig+0x470>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x444>
 8002092:	e03d      	b.n	8002110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e038      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40007000 	.word	0x40007000
 80020a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x4ec>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d028      	beq.n	800210c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d121      	bne.n	800210c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d11a      	bne.n	800210c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d111      	bne.n	800210c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d107      	bne.n	800210c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0cc      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d90c      	bls.n	800215c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800217e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494d      	ldr	r1, [pc, #308]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d044      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e067      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4934      	ldr	r1, [pc, #208]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff f942 	bl	8001498 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff f93e 	bl	8001498 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e04f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d20c      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e032      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4916      	ldr	r1, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f821 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	490a      	ldr	r1, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f8a2 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023c00 	.word	0x40023c00
 80022dc:	40023800 	.word	0x40023800
 80022e0:	08003c78 	.word	0x08003c78
 80022e4:	20000014 	.word	0x20000014
 80022e8:	20000018 	.word	0x20000018

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f0:	b090      	sub	sp, #64	; 0x40
 80022f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d00d      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x40>
 8002310:	2b08      	cmp	r3, #8
 8002312:	f200 80a1 	bhi.w	8002458 <HAL_RCC_GetSysClockFreq+0x16c>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x34>
 800231a:	2b04      	cmp	r3, #4
 800231c:	d003      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x3a>
 800231e:	e09b      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_GetSysClockFreq+0x184>)
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002324:	e09b      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002326:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_GetSysClockFreq+0x188>)
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800232a:	e098      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002336:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d028      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	2200      	movs	r2, #0
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	627a      	str	r2, [r7, #36]	; 0x24
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002354:	2100      	movs	r1, #0
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_GetSysClockFreq+0x188>)
 8002358:	fb03 f201 	mul.w	r2, r3, r1
 800235c:	2300      	movs	r3, #0
 800235e:	fb00 f303 	mul.w	r3, r0, r3
 8002362:	4413      	add	r3, r2
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_RCC_GetSysClockFreq+0x188>)
 8002366:	fba0 1202 	umull	r1, r2, r0, r2
 800236a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800236c:	460a      	mov	r2, r1
 800236e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002372:	4413      	add	r3, r2
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	2200      	movs	r2, #0
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	61fa      	str	r2, [r7, #28]
 800237e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002386:	f7fd ff39 	bl	80001fc <__aeabi_uldivmod>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4613      	mov	r3, r2
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002392:	e053      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	2200      	movs	r2, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	617a      	str	r2, [r7, #20]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023a6:	f04f 0b00 	mov.w	fp, #0
 80023aa:	4652      	mov	r2, sl
 80023ac:	465b      	mov	r3, fp
 80023ae:	f04f 0000 	mov.w	r0, #0
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	0159      	lsls	r1, r3, #5
 80023b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023bc:	0150      	lsls	r0, r2, #5
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	ebb2 080a 	subs.w	r8, r2, sl
 80023c6:	eb63 090b 	sbc.w	r9, r3, fp
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023de:	ebb2 0408 	subs.w	r4, r2, r8
 80023e2:	eb63 0509 	sbc.w	r5, r3, r9
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	00eb      	lsls	r3, r5, #3
 80023f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f4:	00e2      	lsls	r2, r4, #3
 80023f6:	4614      	mov	r4, r2
 80023f8:	461d      	mov	r5, r3
 80023fa:	eb14 030a 	adds.w	r3, r4, sl
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	eb45 030b 	adc.w	r3, r5, fp
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002412:	4629      	mov	r1, r5
 8002414:	028b      	lsls	r3, r1, #10
 8002416:	4621      	mov	r1, r4
 8002418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800241c:	4621      	mov	r1, r4
 800241e:	028a      	lsls	r2, r1, #10
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	2200      	movs	r2, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	60fa      	str	r2, [r7, #12]
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	f7fd fee4 	bl	80001fc <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_GetSysClockFreq+0x180>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	3301      	adds	r3, #1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800244c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetSysClockFreq+0x184>)
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002460:	4618      	mov	r0, r3
 8002462:	3740      	adds	r7, #64	; 0x40
 8002464:	46bd      	mov	sp, r7
 8002466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	00f42400 	.word	0x00f42400
 8002474:	017d7840 	.word	0x017d7840

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_RCC_GetHCLKFreq+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000014 	.word	0x20000014

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff0 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08003c88 	.word	0x08003c88

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024bc:	f7ff ffdc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0b5b      	lsrs	r3, r3, #13
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08003c88 	.word	0x08003c88

080024e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e03f      	b.n	8002572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fee6 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 ff5f 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b08a      	sub	sp, #40	; 0x28
 800257e:	af02      	add	r7, sp, #8
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	d17c      	bne.n	8002694 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_UART_Transmit+0x2c>
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e075      	b.n	8002696 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Transmit+0x3e>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e06e      	b.n	8002696 <HAL_UART_Transmit+0x11c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2221      	movs	r2, #33	; 0x21
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ce:	f7fe ff63 	bl	8001498 <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e8:	d108      	bne.n	80025fc <HAL_UART_Transmit+0x82>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d104      	bne.n	80025fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e003      	b.n	8002604 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800260c:	e02a      	b.n	8002664 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fc9f 	bl	8002f5c <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e036      	b.n	8002696 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10b      	bne.n	8002646 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800263c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	3302      	adds	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e007      	b.n	8002656 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1cf      	bne.n	800260e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2200      	movs	r2, #0
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fc6f 	bl	8002f5c <UART_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e006      	b.n	8002696 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b08a      	sub	sp, #40	; 0x28
 80026a2:	af02      	add	r7, sp, #8
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	f040 808c 	bne.w	80027d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_UART_Receive+0x2e>
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e084      	b.n	80027da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Receive+0x40>
 80026da:	2302      	movs	r3, #2
 80026dc:	e07d      	b.n	80027da <HAL_UART_Receive+0x13c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2222      	movs	r2, #34	; 0x22
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fecd 	bl	8001498 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	d108      	bne.n	8002728 <HAL_UART_Receive+0x8a>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e003      	b.n	8002730 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002738:	e043      	b.n	80027c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	2120      	movs	r1, #32
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fc09 	bl	8002f5c <UART_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e042      	b.n	80027da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	b29a      	uxth	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	3302      	adds	r3, #2
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e01f      	b.n	80027b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d007      	beq.n	800278e <HAL_UART_Receive+0xf0>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_UART_Receive+0xfe>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e008      	b.n	80027ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1b6      	bne.n	800273a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	4613      	mov	r3, r2
 80027ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d130      	bne.n	800285e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit_IT+0x26>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e029      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_UART_Transmit_IT+0x38>
 8002816:	2302      	movs	r3, #2
 8002818:	e022      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2221      	movs	r2, #33	; 0x21
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002858:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d11d      	bne.n	80028c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Receive_IT+0x26>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e016      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive_IT+0x38>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e00f      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fbbd 	bl	8003038 <UART_Start_Receive_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09a      	sub	sp, #104	; 0x68
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028f4:	657a      	str	r2, [r7, #84]	; 0x54
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80028fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e5      	bne.n	80028d4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	663b      	str	r3, [r7, #96]	; 0x60
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3314      	adds	r3, #20
 8002926:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002928:	643a      	str	r2, [r7, #64]	; 0x40
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800292e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b01      	cmp	r3, #1
 8002942:	d119      	bne.n	8002978 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	61fb      	str	r3, [r7, #28]
   return(result);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d136      	bne.n	80029f4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	60bb      	str	r3, [r7, #8]
   return(result);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299c:	65bb      	str	r3, [r7, #88]	; 0x58
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3314      	adds	r3, #20
 80029a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a6:	61ba      	str	r2, [r7, #24]
 80029a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6979      	ldr	r1, [r7, #20]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	613b      	str	r3, [r7, #16]
   return(result);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d018      	beq.n	80029f4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	2200      	movs	r2, #0
 80029c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe feb1 	bl	8001736 <HAL_DMA_Abort>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe ff3b 	bl	800185a <HAL_DMA_GetError>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2210      	movs	r2, #16
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e00a      	b.n	8002a0a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3768      	adds	r7, #104	; 0x68
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ba      	sub	sp, #232	; 0xe8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fbfd 	bl	8003272 <UART_Receive_IT>
      return;
 8002a78:	e256      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80de 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
 8002a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80d1 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
 8002ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0202 	orr.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
 8002af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 81ed 	beq.w	8002f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb88 	bl	8003272 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_IRQHandler+0x17a>
 8002b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04f      	beq.n	8002c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa90 	bl	80030b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d141      	bne.n	8002c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1d9      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_UART_IRQHandler+0x3dc>)
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fe07 	bl	8001816 <HAL_DMA_Abort_IT>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00e      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f986 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00a      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f982 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e006      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f97e 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c3a:	e170      	b.n	8002f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	bf00      	nop
    return;
 8002c3e:	e16e      	b.n	8002f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	f040 814a 	bne.w	8002ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8143 	beq.w	8002ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 813c 	beq.w	8002ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	f040 80b4 	bne.w	8002df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8140 	beq.w	8002f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f080 8139 	bcs.w	8002f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	f000 8088 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1d9      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3314      	adds	r3, #20
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e1      	bne.n	8002d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e3      	bne.n	8002d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	f023 0310 	bic.w	r3, r3, #16
 8002daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e3      	bne.n	8002d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fcb0 	bl	8001736 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8ac 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dec:	e099      	b.n	8002f22 <HAL_UART_IRQHandler+0x50e>
 8002dee:	bf00      	nop
 8002df0:	0800317b 	.word	0x0800317b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 808b 	beq.w	8002f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e3      	bne.n	8002e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	623b      	str	r3, [r7, #32]
   return(result);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e76:	633a      	str	r2, [r7, #48]	; 0x30
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ebc:	61fa      	str	r2, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f834 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002edc:	e023      	b.n	8002f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_UART_IRQHandler+0x4ea>
 8002eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f953 	bl	80031a2 <UART_Transmit_IT>
    return;
 8002efc:	e014      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <HAL_UART_IRQHandler+0x514>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f993 	bl	8003242 <UART_EndTransmit_IT>
    return;
 8002f1c:	e004      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
    return;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
      return;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
      return;
 8002f26:	bf00      	nop
  }
}
 8002f28:	37e8      	adds	r7, #232	; 0xe8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b090      	sub	sp, #64	; 0x40
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6c:	e050      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f74:	d04c      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7c:	f7fe fa8c 	bl	8001498 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d241      	bcs.n	8003010 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	330c      	adds	r3, #12
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fac:	637a      	str	r2, [r7, #52]	; 0x34
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e5      	bne.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe0:	623a      	str	r2, [r7, #32]
 8002fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	6a3a      	ldr	r2, [r7, #32]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e5      	bne.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e00f      	b.n	8003030 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	429a      	cmp	r2, r3
 800302c:	d09f      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3740      	adds	r7, #64	; 0x40
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2222      	movs	r2, #34	; 0x22
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003084:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0220 	orr.w	r2, r2, #32
 80030a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b095      	sub	sp, #84	; 0x54
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030dc:	643a      	str	r2, [r7, #64]	; 0x40
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	2b01      	cmp	r3, #1
 800312a:	d119      	bne.n	8003160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	60bb      	str	r3, [r7, #8]
   return(result);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f023 0310 	bic.w	r3, r3, #16
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800314c:	61ba      	str	r2, [r7, #24]
 800314e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6979      	ldr	r1, [r7, #20]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	613b      	str	r3, [r7, #16]
   return(result);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e5      	bne.n	800312c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800316e:	bf00      	nop
 8003170:	3754      	adds	r7, #84	; 0x54
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fecb 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b21      	cmp	r3, #33	; 0x21
 80031b4:	d13e      	bne.n	8003234 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d114      	bne.n	80031ea <UART_Transmit_IT+0x48>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d110      	bne.n	80031ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]
 80031e8:	e008      	b.n	80031fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6211      	str	r1, [r2, #32]
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10f      	bne.n	8003230 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800321e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003258:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fbf4 	bl	8000a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08c      	sub	sp, #48	; 0x30
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b22      	cmp	r3, #34	; 0x22
 8003284:	f040 80ab 	bne.w	80033de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d117      	bne.n	80032c2 <UART_Receive_IT+0x50>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d113      	bne.n	80032c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
 80032c0:	e026      	b.n	8003310 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d007      	beq.n	80032e6 <UART_Receive_IT+0x74>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <UART_Receive_IT+0x82>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e008      	b.n	8003306 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003300:	b2da      	uxtb	r2, r3
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003320:	2b00      	cmp	r3, #0
 8003322:	d15a      	bne.n	80033da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0220 	bic.w	r2, r2, #32
 8003332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	2b01      	cmp	r3, #1
 8003362:	d135      	bne.n	80033d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	613b      	str	r3, [r7, #16]
   return(result);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f023 0310 	bic.w	r3, r3, #16
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	623a      	str	r2, [r7, #32]
 800338c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	69f9      	ldr	r1, [r7, #28]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	61bb      	str	r3, [r7, #24]
   return(result);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e5      	bne.n	800336a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d10a      	bne.n	80033c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fdbb 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
 80033ce:	e002      	b.n	80033d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fb27 	bl	8000a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e002      	b.n	80033e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0c0      	sub	sp, #256	; 0x100
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	ea40 0301 	orr.w	r3, r0, r1
 8003410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003440:	f021 010c 	bic.w	r1, r1, #12
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800344e:	430b      	orrs	r3, r1
 8003450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	6999      	ldr	r1, [r3, #24]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	ea40 0301 	orr.w	r3, r0, r1
 800346e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8f      	ldr	r3, [pc, #572]	; (80036b4 <UART_SetConfig+0x2cc>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0xa0>
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8d      	ldr	r3, [pc, #564]	; (80036b8 <UART_SetConfig+0x2d0>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d104      	bne.n	8003492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7ff f816 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 800348c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003490:	e003      	b.n	800349a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003492:	f7fe fffd 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8003496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a4:	f040 810c 	bne.w	80036c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034c2:	415b      	adcs	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034ca:	4621      	mov	r1, r4
 80034cc:	eb12 0801 	adds.w	r8, r2, r1
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb43 0901 	adc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034f8:	462b      	mov	r3, r5
 80034fa:	eb49 0303 	adc.w	r3, r9, r3
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800350e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003516:	460b      	mov	r3, r1
 8003518:	18db      	adds	r3, r3, r3
 800351a:	653b      	str	r3, [r7, #80]	; 0x50
 800351c:	4613      	mov	r3, r2
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	657b      	str	r3, [r7, #84]	; 0x54
 8003524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800352c:	f7fc fe66 	bl	80001fc <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b61      	ldr	r3, [pc, #388]	; (80036bc <UART_SetConfig+0x2d4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800354c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	64b9      	str	r1, [r7, #72]	; 0x48
 8003558:	415b      	adcs	r3, r3
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800355c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003560:	4641      	mov	r1, r8
 8003562:	eb12 0a01 	adds.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb43 0b01 	adc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	4692      	mov	sl, r2
 8003582:	469b      	mov	fp, r3
 8003584:	4643      	mov	r3, r8
 8003586:	eb1a 0303 	adds.w	r3, sl, r3
 800358a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800358e:	464b      	mov	r3, r9
 8003590:	eb4b 0303 	adc.w	r3, fp, r3
 8003594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035ac:	460b      	mov	r3, r1
 80035ae:	18db      	adds	r3, r3, r3
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
 80035b2:	4613      	mov	r3, r2
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035c2:	f7fc fe1b 	bl	80001fc <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2301 	umull	r2, r3, r3, r1
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2264      	movs	r2, #100	; 0x64
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	1acb      	subs	r3, r1, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035e2:	4b36      	ldr	r3, [pc, #216]	; (80036bc <UART_SetConfig+0x2d4>)
 80035e4:	fba3 2302 	umull	r2, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f0:	441c      	add	r4, r3
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	63b9      	str	r1, [r7, #56]	; 0x38
 800360c:	415b      	adcs	r3, r3
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6339      	str	r1, [r7, #48]	; 0x30
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003668:	460b      	mov	r3, r1
 800366a:	18db      	adds	r3, r3, r3
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	4613      	mov	r3, r2
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800367a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800367e:	f7fc fdbd 	bl	80001fc <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <UART_SetConfig+0x2d4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	; 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3332      	adds	r3, #50	; 0x32
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <UART_SetConfig+0x2d4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4422      	add	r2, r4
 80036ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036b0:	e105      	b.n	80038be <UART_SetConfig+0x4d6>
 80036b2:	bf00      	nop
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036d2:	4642      	mov	r2, r8
 80036d4:	464b      	mov	r3, r9
 80036d6:	1891      	adds	r1, r2, r2
 80036d8:	6239      	str	r1, [r7, #32]
 80036da:	415b      	adcs	r3, r3
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036e2:	4641      	mov	r1, r8
 80036e4:	1854      	adds	r4, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb43 0501 	adc.w	r5, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003708:	464b      	mov	r3, r9
 800370a:	eb45 0303 	adc.w	r3, r5, r3
 800370e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800371e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800372e:	4629      	mov	r1, r5
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003738:	4621      	mov	r1, r4
 800373a:	008a      	lsls	r2, r1, #2
 800373c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003740:	f7fc fd5c 	bl	80001fc <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b60      	ldr	r3, [pc, #384]	; (80038cc <UART_SetConfig+0x4e4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011c      	lsls	r4, r3, #4
 8003752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003756:	2200      	movs	r2, #0
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800375c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	415b      	adcs	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6139      	str	r1, [r7, #16]
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037de:	f7fc fd0d 	bl	80001fc <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <UART_SetConfig+0x4e4>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a34      	ldr	r2, [pc, #208]	; (80038cc <UART_SetConfig+0x4e4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	441c      	add	r4, r3
 8003808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380c:	2200      	movs	r2, #0
 800380e:	673b      	str	r3, [r7, #112]	; 0x70
 8003810:	677a      	str	r2, [r7, #116]	; 0x74
 8003812:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003816:	4642      	mov	r2, r8
 8003818:	464b      	mov	r3, r9
 800381a:	1891      	adds	r1, r2, r2
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	415b      	adcs	r3, r3
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003826:	4641      	mov	r1, r8
 8003828:	1851      	adds	r1, r2, r1
 800382a:	6039      	str	r1, [r7, #0]
 800382c:	4649      	mov	r1, r9
 800382e:	414b      	adcs	r3, r1
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800383e:	4659      	mov	r1, fp
 8003840:	00cb      	lsls	r3, r1, #3
 8003842:	4651      	mov	r1, sl
 8003844:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003848:	4651      	mov	r1, sl
 800384a:	00ca      	lsls	r2, r1, #3
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	4603      	mov	r3, r0
 8003852:	4642      	mov	r2, r8
 8003854:	189b      	adds	r3, r3, r2
 8003856:	66bb      	str	r3, [r7, #104]	; 0x68
 8003858:	464b      	mov	r3, r9
 800385a:	460a      	mov	r2, r1
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	663b      	str	r3, [r7, #96]	; 0x60
 800386c:	667a      	str	r2, [r7, #100]	; 0x64
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800387a:	4649      	mov	r1, r9
 800387c:	008b      	lsls	r3, r1, #2
 800387e:	4641      	mov	r1, r8
 8003880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003884:	4641      	mov	r1, r8
 8003886:	008a      	lsls	r2, r1, #2
 8003888:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800388c:	f7fc fcb6 	bl	80001fc <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <UART_SetConfig+0x4e4>)
 8003896:	fba3 1302 	umull	r1, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2164      	movs	r1, #100	; 0x64
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <UART_SetConfig+0x4e4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4422      	add	r2, r4
 80038bc:	609a      	str	r2, [r3, #8]
}
 80038be:	bf00      	nop
 80038c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	51eb851f 	.word	0x51eb851f

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4d0d      	ldr	r5, [pc, #52]	; (8003908 <__libc_init_array+0x38>)
 80038d4:	4c0d      	ldr	r4, [pc, #52]	; (800390c <__libc_init_array+0x3c>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	2600      	movs	r6, #0
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	4d0b      	ldr	r5, [pc, #44]	; (8003910 <__libc_init_array+0x40>)
 80038e2:	4c0c      	ldr	r4, [pc, #48]	; (8003914 <__libc_init_array+0x44>)
 80038e4:	f000 f842 	bl	800396c <_init>
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	2600      	movs	r6, #0
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08003c98 	.word	0x08003c98
 800390c:	08003c98 	.word	0x08003c98
 8003910:	08003c98 	.word	0x08003c98
 8003914:	08003c9c 	.word	0x08003c9c

08003918 <memcpy>:
 8003918:	440a      	add	r2, r1
 800391a:	4291      	cmp	r1, r2
 800391c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	4770      	bx	lr
 8003924:	b510      	push	{r4, lr}
 8003926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392e:	4291      	cmp	r1, r2
 8003930:	d1f9      	bne.n	8003926 <memcpy+0xe>
 8003932:	bd10      	pop	{r4, pc}

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <strncmp>:
 8003944:	b510      	push	{r4, lr}
 8003946:	b17a      	cbz	r2, 8003968 <strncmp+0x24>
 8003948:	4603      	mov	r3, r0
 800394a:	3901      	subs	r1, #1
 800394c:	1884      	adds	r4, r0, r2
 800394e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003952:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003956:	4290      	cmp	r0, r2
 8003958:	d101      	bne.n	800395e <strncmp+0x1a>
 800395a:	42a3      	cmp	r3, r4
 800395c:	d101      	bne.n	8003962 <strncmp+0x1e>
 800395e:	1a80      	subs	r0, r0, r2
 8003960:	bd10      	pop	{r4, pc}
 8003962:	2800      	cmp	r0, #0
 8003964:	d1f3      	bne.n	800394e <strncmp+0xa>
 8003966:	e7fa      	b.n	800395e <strncmp+0x1a>
 8003968:	4610      	mov	r0, r2
 800396a:	e7f9      	b.n	8003960 <strncmp+0x1c>

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
