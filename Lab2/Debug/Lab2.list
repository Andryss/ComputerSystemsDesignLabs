
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dbc  08003dbc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00001084  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010a0  200010a0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ca5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdb  00000000  00000000  00029cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022343  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a682  00000000  00000000  0004ead3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce486  00000000  00000000  00059155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001275db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dcc  00000000  00000000  0012762c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003a64 	.word	0x08003a64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003a64 	.word	0x08003a64

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BTN_IsSet>:
uint32_t minimum_delay = 20;

uint32_t reset_time = 1;
uint32_t set_time = 0;

_Bool BTN_IsSet(uint16_t* state, uint16_t bit) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
	return (*state & bit) > 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	4013      	ands	r3, r2
 8000514:	b29b      	uxth	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <BTN_Set>:

void BTN_Set(uint16_t* state, uint16_t bit) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	807b      	strh	r3, [r7, #2]
	*state = (*state | bit);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	4313      	orrs	r3, r2
 8000540:	b29a      	uxth	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	801a      	strh	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <BTN_ResetAll>:

void BTN_Reset(uint16_t* state, uint16_t bit) {
	*state = (*state & (~bit));
}

void BTN_ResetAll(uint16_t* state) {
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	*state = 0;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	801a      	strh	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <BTN_GetState>:



void BTN_GetState(uint16_t* state) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	BTN_ResetAll(state);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ffec 	bl	8000552 <BTN_ResetAll>

	while (HAL_GetTick() < last_time + minimum_delay) { }
 800057a:	bf00      	nop
 800057c:	f000 ffe4 	bl	8001548 <HAL_GetTick>
 8000580:	4601      	mov	r1, r0
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <BTN_GetState+0xe8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <BTN_GetState+0xec>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4299      	cmp	r1, r3
 800058e:	d3f5      	bcc.n	800057c <BTN_GetState+0x10>
	last_time = HAL_GetTick();
 8000590:	f000 ffda 	bl	8001548 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <BTN_GetState+0xe8>)
 8000598:	6013      	str	r3, [r2, #0]

	int current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 800059a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059e:	482f      	ldr	r0, [pc, #188]	; (800065c <BTN_GetState+0xf0>)
 80005a0:	f001 fb90 	bl	8001cc4 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	617b      	str	r3, [r7, #20]

	if (current_state == 0) {
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d114      	bne.n	80005d8 <BTN_GetState+0x6c>
		BTN_Set(state, BTN_DOWN);
 80005ae:	2101      	movs	r1, #1
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffbb 	bl	800052c <BTN_Set>

		if (reset_time != 0) {
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <BTN_GetState+0xf4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d046      	beq.n	800064c <BTN_GetState+0xe0>
			BTN_Set(state, BTN_DOWN_EVENT);
 80005be:	2104      	movs	r1, #4
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ffb3 	bl	800052c <BTN_Set>

			reset_time = 0;
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <BTN_GetState+0xf4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
			set_time = HAL_GetTick();
 80005cc:	f000 ffbc 	bl	8001548 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a24      	ldr	r2, [pc, #144]	; (8000664 <BTN_GetState+0xf8>)
 80005d4:	6013      	str	r3, [r2, #0]

			set_time = 0;
			reset_time = HAL_GetTick();
		}
	}
}
 80005d6:	e039      	b.n	800064c <BTN_GetState+0xe0>
		BTN_Set(state, BTN_UP);
 80005d8:	2102      	movs	r1, #2
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ffa6 	bl	800052c <BTN_Set>
		if (set_time == 0) {
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <BTN_GetState+0xf8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d110      	bne.n	800060a <BTN_GetState+0x9e>
			uint32_t up_time = HAL_GetTick() - reset_time;
 80005e8:	f000 ffae 	bl	8001548 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <BTN_GetState+0xf4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]
			if (up_time > up_threshold) {
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <BTN_GetState+0xfc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d925      	bls.n	800064c <BTN_GetState+0xe0>
				BTN_Set(state, BTN_EOF);
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff92 	bl	800052c <BTN_Set>
}
 8000608:	e020      	b.n	800064c <BTN_GetState+0xe0>
			BTN_Set(state, BTN_UP_EVENT);
 800060a:	2108      	movs	r1, #8
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff8d 	bl	800052c <BTN_Set>
			uint32_t down_time = HAL_GetTick() - set_time;
 8000612:	f000 ff99 	bl	8001548 <HAL_GetTick>
 8000616:	4602      	mov	r2, r0
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <BTN_GetState+0xf8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	613b      	str	r3, [r7, #16]
			if (down_time < down_threshold) {
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <BTN_GetState+0x100>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	429a      	cmp	r2, r3
 8000628:	d204      	bcs.n	8000634 <BTN_GetState+0xc8>
				BTN_Set(state, BTN_SHORT_PRESS);
 800062a:	2110      	movs	r1, #16
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ff7d 	bl	800052c <BTN_Set>
 8000632:	e003      	b.n	800063c <BTN_GetState+0xd0>
				BTN_Set(state, BTN_LONG_PRESS);
 8000634:	2120      	movs	r1, #32
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff78 	bl	800052c <BTN_Set>
			set_time = 0;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <BTN_GetState+0xf8>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
			reset_time = HAL_GetTick();
 8000642:	f000 ff81 	bl	8001548 <HAL_GetTick>
 8000646:	4603      	mov	r3, r0
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <BTN_GetState+0xf4>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000038 	.word	0x20000038
 8000658:	20000008 	.word	0x20000008
 800065c:	40020800 	.word	0x40020800
 8000660:	2000000c 	.word	0x2000000c
 8000664:	2000003c 	.word	0x2000003c
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004

08000670 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <is_buf_empty>:

_Bool is_buf_empty(struct Buffer* buf) {
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <is_buf_full>:

_Bool is_buf_full(struct Buffer* buf) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == sizeof(buf->data) - 1));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ca:	3301      	adds	r3, #1
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d00b      	beq.n	80006ee <is_buf_full+0x32>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d108      	bne.n	80006f2 <is_buf_full+0x36>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d101      	bne.n	80006f2 <is_buf_full+0x36>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <is_buf_full+0x38>
 80006f2:	2300      	movs	r3, #0
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000716:	e01e      	b.n	8000756 <buf_push+0x50>
		if (is_buf_full(buf)) {
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ffcf 	bl	80006bc <is_buf_full>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11d      	bne.n	8000760 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800072a:	3301      	adds	r3, #1
 800072c:	b29b      	uxth	r3, r3
 800072e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000732:	b29a      	uxth	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000740:	461a      	mov	r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	7819      	ldrb	r1, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	5499      	strb	r1, [r3, r2]
		data++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
		written++;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
	while (written < size) {
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3dc      	bcc.n	8000718 <buf_push+0x12>
 800075e:	e000      	b.n	8000762 <buf_push+0x5c>
			break;
 8000760:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ffaa 	bl	80006bc <is_buf_full>
 8000768:	4603      	mov	r3, r0
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00a      	beq.n	800078a <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800077a:	3301      	adds	r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000782:	b29a      	uxth	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2100      	movs	r1, #0
 8000796:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <buf_pop>:

_Bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ff74 	bl	80006a2 <is_buf_empty>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <buf_pop+0x1c>
		return false;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e04e      	b.n	8000862 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80007ca:	3301      	adds	r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 80007de:	e01b      	b.n	8000818 <buf_pop+0x70>
		if (read < size) {
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d20c      	bcs.n	8000802 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80007ee:	4619      	mov	r1, r3
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	5c52      	ldrb	r2, [r2, r1]
 80007fa:	701a      	strb	r2, [r3, #0]
			read++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000808:	3301      	adds	r3, #1
 800080a:	b29b      	uxth	r3, r3
 800080c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000810:	b29a      	uxth	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	5c9b      	ldrb	r3, [r3, r2]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1db      	bne.n	80007e0 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	d102      	bne.n	8000836 <buf_pop+0x8e>
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000834:	e000      	b.n	8000838 <buf_pop+0x90>
 8000836:	2200      	movs	r2, #0
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4413      	add	r3, r2
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000850:	429a      	cmp	r2, r3
 8000852:	bf0c      	ite	eq
 8000854:	2301      	moveq	r3, #1
 8000856:	2300      	movne	r3, #0
 8000858:	b2da      	uxtb	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <MX_GPIO_Init+0xd4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a26      	ldr	r2, [pc, #152]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <MX_GPIO_Init+0xd8>)
 80008fa:	f001 f9fb 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0xdc>)
 8000914:	f001 f82a 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000918:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xd8>)
 8000932:	f001 f81b 	bl	800196c <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020c00 	.word	0x40020c00
 8000948:	40020800 	.word	0x40020800

0800094c <enable_interrupts>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool is_interrupts = false;

void enable_interrupts() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000950:	2047      	movs	r0, #71	; 0x47
 8000952:	f000 ff44 	bl	80017de <HAL_NVIC_EnableIRQ>
	is_interrupts = true;
 8000956:	4b02      	ldr	r3, [pc, #8]	; (8000960 <enable_interrupts+0x14>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000040 	.word	0x20000040

08000964 <disable_interrupts>:

void disable_interrupts() {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&huart6);
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <disable_interrupts+0x20>)
 800096a:	f002 f82b 	bl	80029c4 <HAL_UART_AbortReceive>
	HAL_Delay(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f000 fdf6 	bl	8001560 <HAL_Delay>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000974:	2047      	movs	r0, #71	; 0x47
 8000976:	f000 ff40 	bl	80017fa <HAL_NVIC_DisableIRQ>
	is_interrupts = false;
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <disable_interrupts+0x24>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20001058 	.word	0x20001058
 8000988:	20000040 	.word	0x20000040

0800098c <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	if (is_interrupts) {
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <transmit+0x48>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00f      	beq.n	80009be <transmit+0x32>
		if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <transmit+0x4c>)
 80009a8:	f001 ff97 	bl	80028da <HAL_UART_Transmit_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d10c      	bne.n	80009cc <transmit+0x40>
			buf_push(&transmitBuffer, data, size);
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <transmit+0x50>)
 80009b8:	f7ff fea5 	bl	8000706 <buf_push>
		}
	} else {
		HAL_UART_Transmit(&huart6, data, size, 100);
	}
}
 80009bc:	e006      	b.n	80009cc <transmit+0x40>
		HAL_UART_Transmit(&huart6, data, size, 100);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <transmit+0x4c>)
 80009c8:	f001 fe53 	bl	8002672 <HAL_UART_Transmit>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000040 	.word	0x20000040
 80009d8:	20001058 	.word	0x20001058
 80009dc:	2000084c 	.word	0x2000084c

080009e0 <transmitc>:

void transmitc(char* data) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff fbff 	bl	80001ec <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ffca 	bl	800098c <transmit>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <receive>:

void receive() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	if (is_interrupts) {
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <receive+0x40>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <receive+0x18>
		HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <receive+0x44>)
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <receive+0x48>)
 8000a12:	f001 ffa7 	bl	8002964 <HAL_UART_Receive_IT>
		if (HAL_UART_Receive(&huart6, char_buf, sizeof(char_buf), 0) == HAL_OK) {
			buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
			transmit(char_buf, sizeof(char_buf));
		}
	}
}
 8000a16:	e011      	b.n	8000a3c <receive+0x3c>
		if (HAL_UART_Receive(&huart6, char_buf, sizeof(char_buf), 0) == HAL_OK) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4909      	ldr	r1, [pc, #36]	; (8000a44 <receive+0x44>)
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <receive+0x48>)
 8000a20:	f001 feb9 	bl	8002796 <HAL_UART_Receive>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d108      	bne.n	8000a3c <receive+0x3c>
			buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4905      	ldr	r1, [pc, #20]	; (8000a44 <receive+0x44>)
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <receive+0x4c>)
 8000a30:	f7ff fe69 	bl	8000706 <buf_push>
			transmit(char_buf, sizeof(char_buf));
 8000a34:	2101      	movs	r1, #1
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <receive+0x44>)
 8000a38:	f7ff ffa8 	bl	800098c <transmit>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000040 	.word	0x20000040
 8000a44:	20001054 	.word	0x20001054
 8000a48:	20001058 	.word	0x20001058
 8000a4c:	20000044 	.word	0x20000044

08000a50 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4906      	ldr	r1, [pc, #24]	; (8000a74 <HAL_UART_RxCpltCallback+0x24>)
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <HAL_UART_RxCpltCallback+0x28>)
 8000a5e:	f7ff fe52 	bl	8000706 <buf_push>
	transmit(char_buf, sizeof(char_buf));
 8000a62:	2101      	movs	r1, #1
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <HAL_UART_RxCpltCallback+0x24>)
 8000a66:	f7ff ff91 	bl	800098c <transmit>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20001054 	.word	0x20001054
 8000a78:	20000044 	.word	0x20000044

08000a7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000a88:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000a8c:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  if (buf_pop(&transmitBuffer, buf, sizeof(buf))) {
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <HAL_UART_TxCpltCallback+0x4c>)
 8000a9a:	f7ff fe85 	bl	80007a8 <buf_pop>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00c      	beq.n	8000abe <HAL_UART_TxCpltCallback+0x42>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fb9f 	bl	80001ec <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <HAL_UART_TxCpltCallback+0x50>)
 8000aba:	f001 ff0e 	bl	80028da <HAL_UART_Transmit_IT>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000084c 	.word	0x2000084c
 8000acc:	20001058 	.word	0x20001058

08000ad0 <is_digit.1>:
  size_t new_mode_num = 4;

  char stdin[256] = {0};
  size_t stdinp = 0;

  bool is_digit(char c) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	f8c7 c000 	str.w	ip, [r7]
	  return c >= '0' && c <= '9';
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ae2:	d904      	bls.n	8000aee <is_digit.1+0x1e>
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b39      	cmp	r3, #57	; 0x39
 8000ae8:	d801      	bhi.n	8000aee <is_digit.1+0x1e>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <is_digit.1+0x20>
 8000aee:	2300      	movs	r3, #0
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	b2db      	uxtb	r3, r3
  }
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <main>:
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8000b0a:	af00      	add	r7, sp, #0
int main(void)
 8000b0c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8000b10:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b14:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  HAL_Init();
 8000b1c:	f000 fcae 	bl	800147c <HAL_Init>
  buf_init(&receiveBuffer);
 8000b20:	48d8      	ldr	r0, [pc, #864]	; (8000e84 <main+0x380>)
 8000b22:	f7ff fda5 	bl	8000670 <buf_init>
  buf_init(&transmitBuffer);
 8000b26:	48d8      	ldr	r0, [pc, #864]	; (8000e88 <main+0x384>)
 8000b28:	f7ff fda2 	bl	8000670 <buf_init>
  SystemClock_Config();
 8000b2c:	f000 fb2e 	bl	800118c <SystemClock_Config>
  MX_GPIO_Init();
 8000b30:	f7ff fe9c 	bl	800086c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000b34:	f000 fbfe 	bl	8001334 <MX_USART6_UART_Init>
  uint32_t garland_modes[MODES][MODE_STEPS] = {
 8000b38:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b3c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b40:	4ad2      	ldr	r2, [pc, #840]	; (8000e8c <main+0x388>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	4611      	mov	r1, r2
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f002 ff60 	bl	8003a10 <memcpy>
  uint32_t garland_freq[MODES] = { 400, 400, 1000, 100, 500, 500, 500, 500 };
 8000b50:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b54:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b58:	4acd      	ldr	r2, [pc, #820]	; (8000e90 <main+0x38c>)
 8000b5a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8000b5e:	4615      	mov	r5, r2
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  size_t modes_steps[MODES] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8000b6c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b70:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000b74:	4618      	mov	r0, r3
 8000b76:	2320      	movs	r3, #32
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f002 ff56 	bl	8003a2c <memset>
  size_t cur_mode = 0;
 8000b80:	2200      	movs	r2, #0
 8000b82:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b86:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b8a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  int should_change_mode = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  uint16_t state = 0; // waiting for command
 8000b94:	2200      	movs	r2, #0
 8000b96:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000b9a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000b9e:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
  uint32_t new_mode_steps[MODE_STEPS] = { -1, -1, -1, -1, -1, -1, -1, -1 };
 8000ba2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000ba6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000baa:	4aba      	ldr	r2, [pc, #744]	; (8000e94 <main+0x390>)
 8000bac:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  size_t new_mode_num = 4;
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bc4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bc8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  char stdin[256] = {0};
 8000bcc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bd0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bd4:	4ab0      	ldr	r2, [pc, #704]	; (8000e98 <main+0x394>)
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8000bdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000be0:	22fe      	movs	r2, #254	; 0xfe
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 ff21 	bl	8003a2c <memset>
  size_t stdinp = 0;
 8000bea:	2200      	movs	r2, #0
 8000bec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000bf0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000bf4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			  validate_command();
		  }
	  }
  }

  transmitc("Ready to work\r\n> ");
 8000bf8:	48a8      	ldr	r0, [pc, #672]	; (8000e9c <main+0x398>)
 8000bfa:	f7ff fef1 	bl	80009e0 <transmitc>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t cur_state = garland_modes[cur_mode][modes_steps[cur_mode]];
 8000bfe:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c02:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c06:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000c0a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c0e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000c12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c16:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c1a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c1e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 8000c22:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c26:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c2a:	00c9      	lsls	r1, r1, #3
 8000c2c:	440a      	add	r2, r1
 8000c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c32:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

	  if (cur_state == -1) {
 8000c36:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c3e:	d135      	bne.n	8000cac <main+0x1a8>
		  while (cur_state == -1) {
 8000c40:	e02f      	b.n	8000ca2 <main+0x19e>
			  modes_steps[cur_mode] = 0;
 8000c42:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c46:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c4a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000c4e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c52:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000c56:	2100      	movs	r1, #0
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  cur_state = garland_modes[cur_mode][0];
 8000c5c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c60:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c64:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c68:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000c6c:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000c70:	015b      	lsls	r3, r3, #5
 8000c72:	4413      	add	r3, r2
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
			  if (cur_state == -1) cur_mode = (cur_mode + 1) % MODES;
 8000c7a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c82:	d10e      	bne.n	8000ca2 <main+0x19e>
 8000c84:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c88:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c8c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c90:	3301      	adds	r3, #1
 8000c92:	f003 0207 	and.w	r2, r3, #7
 8000c96:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000c9a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000c9e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		  while (cur_state == -1) {
 8000ca2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000caa:	d0ca      	beq.n	8000c42 <main+0x13e>
		  }
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	487b      	ldr	r0, [pc, #492]	; (8000ea0 <main+0x39c>)
 8000cb4:	f001 f81e 	bl	8001cf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4878      	ldr	r0, [pc, #480]	; (8000ea0 <main+0x39c>)
 8000cc0:	f001 f818 	bl	8001cf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cca:	4875      	ldr	r0, [pc, #468]	; (8000ea0 <main+0x39c>)
 8000ccc:	f001 f812 	bl	8001cf4 <HAL_GPIO_WritePin>

	  if ((cur_state & 0x1) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cd0:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <main+0x1e4>
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	486f      	ldr	r0, [pc, #444]	; (8000ea0 <main+0x39c>)
 8000ce4:	f001 f806 	bl	8001cf4 <HAL_GPIO_WritePin>
	  if ((cur_state & 0x2) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ce8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <main+0x1fc>
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfa:	4869      	ldr	r0, [pc, #420]	; (8000ea0 <main+0x39c>)
 8000cfc:	f000 fffa 	bl	8001cf4 <HAL_GPIO_WritePin>
	  if ((cur_state & 0x4) != 0) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d00:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <main+0x214>
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d12:	4863      	ldr	r0, [pc, #396]	; (8000ea0 <main+0x39c>)
 8000d14:	f000 ffee 	bl	8001cf4 <HAL_GPIO_WritePin>

	  uint32_t wait_ticks = garland_freq[cur_mode];
 8000d18:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d1c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d20:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000d24:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d28:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d2c:	3240      	adds	r2, #64	; 0x40
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	  uint32_t ticks = HAL_GetTick();
 8000d36:	f000 fc07 	bl	8001548 <HAL_GetTick>
 8000d3a:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
	  while ((HAL_GetTick() - ticks) < wait_ticks) {
 8000d3e:	e063      	b.n	8000e08 <main+0x304>

		  receive();
 8000d40:	f7ff fe5e 	bl	8000a00 <receive>

		  uint8_t read[2] = {0};
 8000d44:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d48:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	801a      	strh	r2, [r3, #0]
		  if (buf_pop(&receiveBuffer, read, sizeof(read))) {
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2202      	movs	r2, #2
 8000d54:	4619      	mov	r1, r3
 8000d56:	484b      	ldr	r0, [pc, #300]	; (8000e84 <main+0x380>)
 8000d58:	f7ff fd26 	bl	80007a8 <buf_pop>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d042      	beq.n	8000de8 <main+0x2e4>
			  char c = (char) read[0];
 8000d62:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d66:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			  if (stdinp == sizeof(stdin)) {
 8000d70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d74:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d80:	d10a      	bne.n	8000d98 <main+0x294>
				  transmitc("\r\nInput buffer overflow\r\n> ");
 8000d82:	4848      	ldr	r0, [pc, #288]	; (8000ea4 <main+0x3a0>)
 8000d84:	f7ff fe2c 	bl	80009e0 <transmitc>
				  stdinp = 0;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d8e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000d92:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000d96:	e027      	b.n	8000de8 <main+0x2e4>
			  } else {
				  stdin[stdinp++] = c;
 8000d98:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000d9c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000da0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000da4:	1c59      	adds	r1, r3, #1
 8000da6:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000daa:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000dae:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
 8000db2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000db6:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000dba:	4413      	add	r3, r2
 8000dbc:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 8000dc0:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
				  if (c == '\r') {
 8000dc4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8000dc8:	2b0d      	cmp	r3, #13
 8000dca:	d108      	bne.n	8000dde <main+0x2da>
					  transmitc("\n");
 8000dcc:	4836      	ldr	r0, [pc, #216]	; (8000ea8 <main+0x3a4>)
 8000dce:	f7ff fe07 	bl	80009e0 <transmitc>
					  validate_command();
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	f000 f868 	bl	8000eac <validate_command.0>
 8000ddc:	e004      	b.n	8000de8 <main+0x2e4>
				  } else {
					  prevalidate_command();
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	469c      	mov	ip, r3
 8000de4:	f000 f99c 	bl	8001120 <prevalidate_command.2>
				  }
			  }
		  }

		  BTN_GetState(&btn_state);
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fbbe 	bl	800056c <BTN_GetState>
		  if (BTN_IsSet(&btn_state, BTN_DOWN_EVENT)) {
 8000df0:	1dbb      	adds	r3, r7, #6
 8000df2:	2104      	movs	r1, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb83 	bl	8000500 <BTN_IsSet>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <main+0x304>
			  should_change_mode = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8000e06:	e009      	b.n	8000e1c <main+0x318>
	  while ((HAL_GetTick() - ticks) < wait_ticks) {
 8000e08:	f000 fb9e 	bl	8001548 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d891      	bhi.n	8000d40 <main+0x23c>
			  break;
		  }
	  }

	  if (should_change_mode == 1) {
 8000e1c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d112      	bne.n	8000e4a <main+0x346>
		  should_change_mode = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
		  cur_mode = (cur_mode + 1) % MODES;
 8000e2a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e2e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e36:	3301      	adds	r3, #1
 8000e38:	f003 0207 	and.w	r2, r3, #7
 8000e3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e40:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e44:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		  continue;
 8000e48:	e01a      	b.n	8000e80 <main+0x37c>
	  }

	  modes_steps[cur_mode] = (modes_steps[cur_mode] + 1) % MODE_STEPS;
 8000e4a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e4e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e52:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000e56:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e5a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	3301      	adds	r3, #1
 8000e64:	f003 0107 	and.w	r1, r3, #7
 8000e68:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e6c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000e70:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8000e74:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000e78:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
 8000e80:	e6bd      	b.n	8000bfe <main+0xfa>
 8000e82:	bf00      	nop
 8000e84:	20000044 	.word	0x20000044
 8000e88:	2000084c 	.word	0x2000084c
 8000e8c:	08003ab0 	.word	0x08003ab0
 8000e90:	08003bb0 	.word	0x08003bb0
 8000e94:	08003bd0 	.word	0x08003bd0
 8000e98:	08003bf0 	.word	0x08003bf0
 8000e9c:	08003a7c 	.word	0x08003a7c
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	08003a90 	.word	0x08003a90
 8000ea8:	08003aac 	.word	0x08003aac

08000eac <validate_command.0>:
  void validate_command() {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4664      	mov	r4, ip
 8000eb4:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (state == 0) {
 8000eb8:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80c3 	bne.w	8001048 <validate_command.0+0x19c>
		  if (stdinp >= 4 && (strncmp(stdin, "new ", 4) == 0)) {
 8000ec2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d969      	bls.n	8000f9e <validate_command.0+0xf2>
 8000eca:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4988      	ldr	r1, [pc, #544]	; (80010f4 <validate_command.0+0x248>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fdb2 	bl	8003a3c <strncmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d15f      	bne.n	8000f9e <validate_command.0+0xf2>
			  size_t i = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
			  char color = *(stdin + 4 + i);
 8000ee2:	f504 72a7 	add.w	r2, r4, #334	; 0x14e
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	74fb      	strb	r3, [r7, #19]
			  bool unknown_led = false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	74bb      	strb	r3, [r7, #18]
			  while (i < MODE_STEPS && color != '\r') {
 8000ef4:	e033      	b.n	8000f5e <validate_command.0+0xb2>
				  if (color == 'g') new_mode_steps[i] = 0x1;
 8000ef6:	7cfb      	ldrb	r3, [r7, #19]
 8000ef8:	2b67      	cmp	r3, #103	; 0x67
 8000efa:	d105      	bne.n	8000f08 <validate_command.0+0x5c>
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	334a      	adds	r3, #74	; 0x4a
 8000f00:	2201      	movs	r2, #1
 8000f02:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f06:	e020      	b.n	8000f4a <validate_command.0+0x9e>
				  else if (color == 'y') new_mode_steps[i] = 0x2;
 8000f08:	7cfb      	ldrb	r3, [r7, #19]
 8000f0a:	2b79      	cmp	r3, #121	; 0x79
 8000f0c:	d105      	bne.n	8000f1a <validate_command.0+0x6e>
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	334a      	adds	r3, #74	; 0x4a
 8000f12:	2202      	movs	r2, #2
 8000f14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f18:	e017      	b.n	8000f4a <validate_command.0+0x9e>
				  else if (color == 'r') new_mode_steps[i] = 0x4;
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	2b72      	cmp	r3, #114	; 0x72
 8000f1e:	d105      	bne.n	8000f2c <validate_command.0+0x80>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	334a      	adds	r3, #74	; 0x4a
 8000f24:	2204      	movs	r2, #4
 8000f26:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f2a:	e00e      	b.n	8000f4a <validate_command.0+0x9e>
				  else if (color == 'n') new_mode_steps[i] = 0x0;
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	2b6e      	cmp	r3, #110	; 0x6e
 8000f30:	d105      	bne.n	8000f3e <validate_command.0+0x92>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	334a      	adds	r3, #74	; 0x4a
 8000f36:	2200      	movs	r2, #0
 8000f38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f3c:	e005      	b.n	8000f4a <validate_command.0+0x9e>
					  unknown_led = true;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	74bb      	strb	r3, [r7, #18]
					  transmitc("Unknown led\r\n");
 8000f42:	486d      	ldr	r0, [pc, #436]	; (80010f8 <validate_command.0+0x24c>)
 8000f44:	f7ff fd4c 	bl	80009e0 <transmitc>
					  break;
 8000f48:	e00f      	b.n	8000f6a <validate_command.0+0xbe>
				  i++;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
				  color = *(stdin + 4 + i);
 8000f50:	f504 72a7 	add.w	r2, r4, #334	; 0x14e
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3304      	adds	r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	74fb      	strb	r3, [r7, #19]
			  while (i < MODE_STEPS && color != '\r') {
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b07      	cmp	r3, #7
 8000f62:	d802      	bhi.n	8000f6a <validate_command.0+0xbe>
 8000f64:	7cfb      	ldrb	r3, [r7, #19]
 8000f66:	2b0d      	cmp	r3, #13
 8000f68:	d1c5      	bne.n	8000ef6 <validate_command.0+0x4a>
			  if (!unknown_led) {
 8000f6a:	7cbb      	ldrb	r3, [r7, #18]
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80b2 	beq.w	80010dc <validate_command.0+0x230>
				  while (i < MODE_STEPS) new_mode_steps[i++] = -1;
 8000f78:	e007      	b.n	8000f8a <validate_command.0+0xde>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	617a      	str	r2, [r7, #20]
 8000f80:	334a      	adds	r3, #74	; 0x4a
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f86:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	d9f4      	bls.n	8000f7a <validate_command.0+0xce>
				  state = 1; // wait for new mode freq input
 8000f90:	2301      	movs	r3, #1
 8000f92:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
				  transmitc("Input new mode freq (0-9):\r\n");
 8000f96:	4859      	ldr	r0, [pc, #356]	; (80010fc <validate_command.0+0x250>)
 8000f98:	f7ff fd22 	bl	80009e0 <transmitc>
		  if (stdinp >= 4 && (strncmp(stdin, "new ", 4) == 0)) {
 8000f9c:	e09e      	b.n	80010dc <validate_command.0+0x230>
		  else if (stdinp >= 4 && (strncmp(stdin, "set ", 4) == 0) && is_digit(stdin[4])) {
 8000f9e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d924      	bls.n	8000ff0 <validate_command.0+0x144>
 8000fa6:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000faa:	2204      	movs	r2, #4
 8000fac:	4954      	ldr	r1, [pc, #336]	; (8001100 <validate_command.0+0x254>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fd44 	bl	8003a3c <strncmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d11a      	bne.n	8000ff0 <validate_command.0+0x144>
 8000fba:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
 8000fbe:	46a4      	mov	ip, r4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd85 	bl	8000ad0 <is_digit.1>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d011      	beq.n	8000ff0 <validate_command.0+0x144>
			  size_t mode = stdin[4] - '0';
 8000fcc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
 8000fd0:	3b30      	subs	r3, #48	; 0x30
 8000fd2:	60bb      	str	r3, [r7, #8]
			  if (mode >= MODES) {
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	d903      	bls.n	8000fe2 <validate_command.0+0x136>
				  transmitc("Unknown mode\r\n");
 8000fda:	484a      	ldr	r0, [pc, #296]	; (8001104 <validate_command.0+0x258>)
 8000fdc:	f7ff fd00 	bl	80009e0 <transmitc>
		  else if (stdinp >= 4 && (strncmp(stdin, "set ", 4) == 0) && is_digit(stdin[4])) {
 8000fe0:	e07d      	b.n	80010de <validate_command.0+0x232>
				  cur_mode = mode;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				  transmitc("OK\r\n");
 8000fe8:	4847      	ldr	r0, [pc, #284]	; (8001108 <validate_command.0+0x25c>)
 8000fea:	f7ff fcf9 	bl	80009e0 <transmitc>
		  else if (stdinp >= 4 && (strncmp(stdin, "set ", 4) == 0) && is_digit(stdin[4])) {
 8000fee:	e076      	b.n	80010de <validate_command.0+0x232>
		  else if (stdinp >= 17 && (strncmp(stdin, "set interrupts on", 17) == 0)) {
 8000ff0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d90f      	bls.n	8001018 <validate_command.0+0x16c>
 8000ff8:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8000ffc:	2211      	movs	r2, #17
 8000ffe:	4943      	ldr	r1, [pc, #268]	; (800110c <validate_command.0+0x260>)
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fd1b 	bl	8003a3c <strncmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d105      	bne.n	8001018 <validate_command.0+0x16c>
			  enable_interrupts();
 800100c:	f7ff fc9e 	bl	800094c <enable_interrupts>
			  transmitc("OK\r\n");
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <validate_command.0+0x25c>)
 8001012:	f7ff fce5 	bl	80009e0 <transmitc>
 8001016:	e062      	b.n	80010de <validate_command.0+0x232>
		  else if (stdinp >= 18 && (strncmp(stdin, "set interrupts off", 18) == 0)) {
 8001018:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800101c:	2b11      	cmp	r3, #17
 800101e:	d90f      	bls.n	8001040 <validate_command.0+0x194>
 8001020:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8001024:	2212      	movs	r2, #18
 8001026:	493a      	ldr	r1, [pc, #232]	; (8001110 <validate_command.0+0x264>)
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fd07 	bl	8003a3c <strncmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <validate_command.0+0x194>
			  disable_interrupts();
 8001034:	f7ff fc96 	bl	8000964 <disable_interrupts>
			  transmitc("OK\r\n");
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <validate_command.0+0x25c>)
 800103a:	f7ff fcd1 	bl	80009e0 <transmitc>
 800103e:	e04e      	b.n	80010de <validate_command.0+0x232>
			  transmitc("Unknown command\r\n");
 8001040:	4834      	ldr	r0, [pc, #208]	; (8001114 <validate_command.0+0x268>)
 8001042:	f7ff fccd 	bl	80009e0 <transmitc>
 8001046:	e04a      	b.n	80010de <validate_command.0+0x232>
	  } else if (state == 1) {
 8001048:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 800104c:	2b01      	cmp	r3, #1
 800104e:	d146      	bne.n	80010de <validate_command.0+0x232>
		  if (stdinp >= 1 && is_digit(stdin[0])) {
 8001050:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03d      	beq.n	80010d4 <validate_command.0+0x228>
 8001058:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 800105c:	46a4      	mov	ip, r4
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd36 	bl	8000ad0 <is_digit.1>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <validate_command.0+0x228>
			  garland_freq[new_mode_num] = (stdin[0] - '0' + 1) * 100;
 800106a:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 800106e:	3b2f      	subs	r3, #47	; 0x2f
 8001070:	2264      	movs	r2, #100	; 0x64
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	461a      	mov	r2, r3
 8001078:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800107c:	3340      	adds	r3, #64	; 0x40
 800107e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e00d      	b.n	80010a4 <validate_command.0+0x1f8>
				  garland_modes[new_mode_num][i] = new_mode_steps[i];
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	334a      	adds	r3, #74	; 0x4a
 800108c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8001090:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001094:	00d9      	lsls	r1, r3, #3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	440b      	add	r3, r1
 800109a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			  for (size_t i = 0; i < MODE_STEPS; i++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d9ee      	bls.n	8001088 <validate_command.0+0x1dc>
			  state = 0; // wait for command
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
			  new_mode_num = (new_mode_num + 1) % MODES;
 80010b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80010b4:	3301      	adds	r3, #1
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
			  if (new_mode_num == 0) new_mode_num = 4;
 80010be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <validate_command.0+0x220>
 80010c6:	2304      	movs	r3, #4
 80010c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
			  transmitc("OK\r\n");
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <validate_command.0+0x25c>)
 80010ce:	f7ff fc87 	bl	80009e0 <transmitc>
 80010d2:	e004      	b.n	80010de <validate_command.0+0x232>
			  transmitc("Unknown freq\r\n");
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <validate_command.0+0x26c>)
 80010d6:	f7ff fc83 	bl	80009e0 <transmitc>
 80010da:	e000      	b.n	80010de <validate_command.0+0x232>
		  if (stdinp >= 4 && (strncmp(stdin, "new ", 4) == 0)) {
 80010dc:	bf00      	nop
	  transmitc("> ");
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <validate_command.0+0x270>)
 80010e0:	f7ff fc7e 	bl	80009e0 <transmitc>
	  stdinp = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  }
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08003cf0 	.word	0x08003cf0
 80010f8:	08003cf8 	.word	0x08003cf8
 80010fc:	08003d08 	.word	0x08003d08
 8001100:	08003d28 	.word	0x08003d28
 8001104:	08003d30 	.word	0x08003d30
 8001108:	08003d40 	.word	0x08003d40
 800110c:	08003d48 	.word	0x08003d48
 8001110:	08003d5c 	.word	0x08003d5c
 8001114:	08003d70 	.word	0x08003d70
 8001118:	08003d84 	.word	0x08003d84
 800111c:	08003d94 	.word	0x08003d94

08001120 <prevalidate_command.2>:
  void prevalidate_command() {
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4664      	mov	r4, ip
 8001128:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (state == 0) {
 800112c:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d114      	bne.n	800115e <prevalidate_command.2+0x3e>
		  if (stdinp >= 12 && (strncmp(stdin, "new ", 4) == 0)) {
 8001134:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8001138:	2b0b      	cmp	r3, #11
 800113a:	d91e      	bls.n	800117a <prevalidate_command.2+0x5a>
 800113c:	f504 73a7 	add.w	r3, r4, #334	; 0x14e
 8001140:	2204      	movs	r2, #4
 8001142:	4910      	ldr	r1, [pc, #64]	; (8001184 <prevalidate_command.2+0x64>)
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fc79 	bl	8003a3c <strncmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d114      	bne.n	800117a <prevalidate_command.2+0x5a>
			  transmitc("\r\n");
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <prevalidate_command.2+0x68>)
 8001152:	f7ff fc45 	bl	80009e0 <transmitc>
			  validate_command();
 8001156:	46a4      	mov	ip, r4
 8001158:	f7ff fea8 	bl	8000eac <validate_command.0>
  }
 800115c:	e00d      	b.n	800117a <prevalidate_command.2+0x5a>
	  } else if (state == 1) {
 800115e:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 8001162:	2b01      	cmp	r3, #1
 8001164:	d109      	bne.n	800117a <prevalidate_command.2+0x5a>
		  if (stdinp >= 1) {
 8001166:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <prevalidate_command.2+0x5a>
			  transmitc("\r\n");
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <prevalidate_command.2+0x68>)
 8001170:	f7ff fc36 	bl	80009e0 <transmitc>
			  validate_command();
 8001174:	46a4      	mov	ip, r4
 8001176:	f7ff fe99 	bl	8000eac <validate_command.0>
  }
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	08003cf0 	.word	0x08003cf0
 8001188:	08003d98 	.word	0x08003d98

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b094      	sub	sp, #80	; 0x50
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fc46 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <SystemClock_Config+0xb8>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a22      	ldr	r2, [pc, #136]	; (8001244 <SystemClock_Config+0xb8>)
 80011ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <SystemClock_Config+0xb8>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <SystemClock_Config+0xbc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <SystemClock_Config+0xbc>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <SystemClock_Config+0xbc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fd91 	bl	8001d28 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800120c:	f000 f81e 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fff4 	bl	8002218 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001236:	f000 f809 	bl	800124c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f914 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART6_IRQHandler+0x10>)
 8001302:	f001 fc03 	bl	8002b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001058 	.word	0x20001058

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_USART6_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 8001340:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001344:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART6_UART_Init+0x4c>)
 800136c:	f001 f934 	bl	80025d8 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f7ff ff69 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20001058 	.word	0x20001058
 8001384:	40011400 	.word	0x40011400

08001388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_UART_MspInit+0x94>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d133      	bne.n	8001412 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_UART_MspInit+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013f2:	2308      	movs	r3, #8
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <HAL_UART_MspInit+0x9c>)
 80013fe:	f000 fab5 	bl	800196c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2047      	movs	r0, #71	; 0x47
 8001408:	f000 f9cd 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800140c:	2047      	movs	r0, #71	; 0x47
 800140e:	f000 f9e6 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40011400 	.word	0x40011400
 8001420:	40023800 	.word	0x40023800
 8001424:	40020800 	.word	0x40020800

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff ff5d 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f002 fab7 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fb53 	bl	8000b04 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800146c:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 8001470:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001474:	200010a0 	.word	0x200010a0

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f973 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fed2 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f999 	bl	8001816 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fc:	f000 f953 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000010 	.word	0x20000010
 8001518:	20000018 	.word	0x20000018
 800151c:	20000014 	.word	0x20000014

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000018 	.word	0x20000018
 8001544:	2000109c 	.word	0x2000109c

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000109c 	.word	0x2000109c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000018 	.word	0x20000018

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db12      	blt.n	8001680 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	490a      	ldr	r1, [pc, #40]	; (800168c <__NVIC_DisableIRQ+0x44>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	3320      	adds	r3, #32
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001674:	f3bf 8f4f 	dsb	sy
}
 8001678:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800167a:	f3bf 8f6f 	isb	sy
}
 800167e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff05 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff1a 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff0d 	bl	800160c <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff1d 	bl	8001648 <__NVIC_DisableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ff94 	bl	800174c <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff fe84 	bl	8001548 <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d008      	beq.n	8001860 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e052      	b.n	8001906 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0216 	bic.w	r2, r2, #22
 800186e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <HAL_DMA_Abort+0x62>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	2b00      	cmp	r3, #0
 800188e:	d007      	beq.n	80018a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0208 	bic.w	r2, r2, #8
 800189e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b0:	e013      	b.n	80018da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b2:	f7ff fe49 	bl	8001548 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d90c      	bls.n	80018da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e015      	b.n	8001906 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e4      	bne.n	80018b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d004      	beq.n	800192c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e00c      	b.n	8001946 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2205      	movs	r2, #5
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e177      	b.n	8001c78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8166 	bne.w	8001c72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80c0 	beq.w	8001c72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0e:	4a61      	ldr	r2, [pc, #388]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d037      	beq.n	8001baa <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x330>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x334>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x338>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x33c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_GPIO_Init+0x340>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x22a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x344>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x348>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x350>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b82:	2309      	movs	r3, #9
 8001b84:	e012      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b86:	230a      	movs	r3, #10
 8001b88:	e010      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae84 	bls.w	8001988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40021400 	.word	0x40021400
 8001cb0:	40021800 	.word	0x40021800
 8001cb4:	40021c00 	.word	0x40021c00
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40022400 	.word	0x40022400
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e267      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d075      	beq.n	8001e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x108>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d157      	bne.n	8001e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e242      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x74>
 8001d8e:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6f      	ldr	r2, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001dc0:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fbb2 	bl	8001548 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fbae 	bl	8001548 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e207      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xc0>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb9e 	bl	8001548 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fb9a 	bl	8001548 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1f3      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0xe8>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1c7      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb53 	bl	8001548 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb4f 	bl	8001548 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1a8      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4925      	ldr	r1, [pc, #148]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fb32 	bl	8001548 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fb2e 	bl	8001548 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e187      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d036      	beq.n	8001f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff fb12 	bl	8001548 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fb0e 	bl	8001548 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e167      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x200>
 8001f46:	e01b      	b.n	8001f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fafb 	bl	8001548 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	e00e      	b.n	8001f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff faf7 	bl	8001548 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d907      	bls.n	8001f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e150      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470000 	.word	0x42470000
 8001f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ea      	bne.n	8001f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8097 	beq.w	80020bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a7c      	ldr	r2, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b77      	ldr	r3, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a73      	ldr	r2, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fab7 	bl	8001548 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff fab3 	bl	8001548 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e10c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x2ea>
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x30c>
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a57      	ldr	r2, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002046:	f023 0304 	bic.w	r3, r3, #4
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fa78 	bl	8001548 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7ff fa74 	bl	8001548 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0cb      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ee      	beq.n	800205c <HAL_RCC_OscConfig+0x334>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7ff fa62 	bl	8001548 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	e00a      	b.n	800209e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff fa5e 	bl	8001548 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e0b5      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ee      	bne.n	8002088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a1 	beq.w	8002208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d05c      	beq.n	800218c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d141      	bne.n	800215e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fa32 	bl	8001548 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fa2e 	bl	8001548 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e087      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	491b      	ldr	r1, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff fa07 	bl	8001548 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff fa03 	bl	8001548 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e05c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x416>
 800215c:	e054      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f9f0 	bl	8001548 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f9ec 	bl	8001548 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e045      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x444>
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e038      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4ec>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d028      	beq.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d121      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11a      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff f91e 	bl	8001548 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff f91a 	bl	8001548 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f87e 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08003d9c 	.word	0x08003d9c
 80023dc:	20000010 	.word	0x20000010
 80023e0:	20000014 	.word	0x20000014

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b090      	sub	sp, #64	; 0x40
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
 80023f0:	2300      	movs	r3, #0
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d00d      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 8002408:	2b08      	cmp	r3, #8
 800240a:	f200 80a1 	bhi.w	8002550 <HAL_RCC_GetSysClockFreq+0x16c>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x34>
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3a>
 8002416:	e09b      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_GetSysClockFreq+0x184>)
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800241c:	e09b      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002422:	e098      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002424:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242e:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2200      	movs	r2, #0
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	627a      	str	r2, [r7, #36]	; 0x24
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800244c:	2100      	movs	r1, #0
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	fb03 f201 	mul.w	r2, r3, r1
 8002454:	2300      	movs	r3, #0
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	4413      	add	r3, r2
 800245c:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 800245e:	fba0 1202 	umull	r1, r2, r0, r2
 8002462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002464:	460a      	mov	r2, r1
 8002466:	62ba      	str	r2, [r7, #40]	; 0x28
 8002468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246a:	4413      	add	r3, r2
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	2200      	movs	r2, #0
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800247e:	f7fd febd 	bl	80001fc <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4613      	mov	r3, r2
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248a:	e053      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	2200      	movs	r2, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	617a      	str	r2, [r7, #20]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800249e:	f04f 0b00 	mov.w	fp, #0
 80024a2:	4652      	mov	r2, sl
 80024a4:	465b      	mov	r3, fp
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	ebb2 080a 	subs.w	r8, r2, sl
 80024be:	eb63 090b 	sbc.w	r9, r3, fp
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024d6:	ebb2 0408 	subs.w	r4, r2, r8
 80024da:	eb63 0509 	sbc.w	r5, r3, r9
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	00eb      	lsls	r3, r5, #3
 80024e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ec:	00e2      	lsls	r2, r4, #3
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	eb14 030a 	adds.w	r3, r4, sl
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	eb45 030b 	adc.w	r3, r5, fp
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250a:	4629      	mov	r1, r5
 800250c:	028b      	lsls	r3, r1, #10
 800250e:	4621      	mov	r1, r4
 8002510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002514:	4621      	mov	r1, r4
 8002516:	028a      	lsls	r2, r1, #10
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	2200      	movs	r2, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	60fa      	str	r2, [r7, #12]
 8002524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002528:	f7fd fe68 	bl	80001fc <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x184>)
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002558:	4618      	mov	r0, r3
 800255a:	3740      	adds	r7, #64	; 0x40
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	017d7840 	.word	0x017d7840

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000010 	.word	0x20000010

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800258c:	f7ff fff0 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4903      	ldr	r1, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08003dac 	.word	0x08003dac

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b4:	f7ff ffdc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08003dac 	.word	0x08003dac

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03f      	b.n	800266a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fec2 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 ff5f 	bl	80034e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af02      	add	r7, sp, #8
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d17c      	bne.n	800278c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Transmit+0x2c>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e075      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x3e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e06e      	b.n	800278e <HAL_UART_Transmit+0x11c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c6:	f7fe ff3f 	bl	8001548 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d108      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e003      	b.n	80026fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002704:	e02a      	b.n	800275c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fc9f 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e036      	b.n	800278e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3302      	adds	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e007      	b.n	800274e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3301      	adds	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1cf      	bne.n	8002706 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fc6f 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	; 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	f040 808c 	bne.w	80028d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Receive+0x2e>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e084      	b.n	80028d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Receive+0x40>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e07d      	b.n	80028d2 <HAL_UART_Receive+0x13c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2222      	movs	r2, #34	; 0x22
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fea9 	bl	8001548 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Receive+0x8a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002830:	e043      	b.n	80028ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2120      	movs	r1, #32
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fc09 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e042      	b.n	80028d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	b29a      	uxth	r2, r3
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3302      	adds	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e01f      	b.n	80028ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002874:	d007      	beq.n	8002886 <HAL_UART_Receive+0xf0>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_UART_Receive+0xfe>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e008      	b.n	80028a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1b6      	bne.n	8002832 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	4613      	mov	r3, r2
 80028e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d130      	bne.n	8002956 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Transmit_IT+0x26>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e029      	b.n	8002958 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit_IT+0x38>
 800290e:	2302      	movs	r3, #2
 8002910:	e022      	b.n	8002958 <HAL_UART_Transmit_IT+0x7e>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2221      	movs	r2, #33	; 0x21
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002950:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b20      	cmp	r3, #32
 800297c:	d11d      	bne.n	80029ba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_UART_Receive_IT+0x26>
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e016      	b.n	80029bc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_UART_Receive_IT+0x38>
 8002998:	2302      	movs	r3, #2
 800299a:	e00f      	b.n	80029bc <HAL_UART_Receive_IT+0x58>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fbbd 	bl	8003130 <UART_Start_Receive_IT>
 80029b6:	4603      	mov	r3, r0
 80029b8:	e000      	b.n	80029bc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b09a      	sub	sp, #104	; 0x68
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029e2:	667b      	str	r3, [r7, #100]	; 0x64
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029ec:	657a      	str	r2, [r7, #84]	; 0x54
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3314      	adds	r3, #20
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	663b      	str	r3, [r7, #96]	; 0x60
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3314      	adds	r3, #20
 8002a1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a20:	643a      	str	r2, [r7, #64]	; 0x40
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d119      	bne.n	8002a70 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d136      	bne.n	8002aec <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a9e:	61ba      	str	r2, [r7, #24]
 8002aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6979      	ldr	r1, [r7, #20]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	2200      	movs	r2, #0
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe feb1 	bl	800182e <HAL_DMA_Abort>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff3b 	bl	8001952 <HAL_DMA_GetError>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d104      	bne.n	8002aec <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e00a      	b.n	8002b02 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3768      	adds	r7, #104	; 0x68
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0ba      	sub	sp, #232	; 0xe8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_UART_IRQHandler+0x66>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fbfd 	bl	800336a <UART_Receive_IT>
      return;
 8002b70:	e256      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80de 	beq.w	8002d38 <HAL_UART_IRQHandler+0x22c>
 8002b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80d1 	beq.w	8002d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0xae>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0xd2>
 8002bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d011      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
 8002c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 81ed 	beq.w	8003016 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_UART_IRQHandler+0x14e>
 8002c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb88 	bl	800336a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_UART_IRQHandler+0x17a>
 8002c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04f      	beq.n	8002d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa90 	bl	80031ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d141      	bne.n	8002d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1d9      	bne.n	8002c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a7d      	ldr	r2, [pc, #500]	; (8002ee8 <HAL_UART_IRQHandler+0x3dc>)
 8002cf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fe07 	bl	800190e <HAL_DMA_Abort_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d10:	4610      	mov	r0, r2
 8002d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00e      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f986 	bl	8003028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00a      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f982 	bl	8003028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e006      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f97e 	bl	8003028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d32:	e170      	b.n	8003016 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	bf00      	nop
    return;
 8002d36:	e16e      	b.n	8003016 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f040 814a 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8143 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 813c 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	f040 80b4 	bne.w	8002eec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8140 	beq.w	800301a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f080 8139 	bcs.w	800301a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	f000 8088 	beq.w	8002ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1d9      	bne.n	8002dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e1      	bne.n	8002e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3314      	adds	r3, #20
 8002e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e3      	bne.n	8002e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e3      	bne.n	8002e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fcb0 	bl	800182e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8ac 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee4:	e099      	b.n	800301a <HAL_UART_IRQHandler+0x50e>
 8002ee6:	bf00      	nop
 8002ee8:	08003273 	.word	0x08003273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808b 	beq.w	800301e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8086 	beq.w	800301e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f36:	647a      	str	r2, [r7, #68]	; 0x44
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e3      	bne.n	8002f12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	623b      	str	r3, [r7, #32]
   return(result);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e3      	bne.n	8002f4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0310 	bic.w	r3, r3, #16
 8002fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fb4:	61fa      	str	r2, [r7, #28]
 8002fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e3      	bne.n	8002f90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f834 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fd4:	e023      	b.n	800301e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x4ea>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f953 	bl	800329a <UART_Transmit_IT>
    return;
 8002ff4:	e014      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <HAL_UART_IRQHandler+0x514>
 8003002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f993 	bl	800333a <UART_EndTransmit_IT>
    return;
 8003014:	e004      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
    return;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
      return;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
      return;
 800301e:	bf00      	nop
  }
}
 8003020:	37e8      	adds	r7, #232	; 0xe8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop

08003028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	; 0x40
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	e050      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306c:	d04c      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <UART_WaitOnFlagUntilTimeout+0x30>
 8003074:	f7fe fa68 	bl	8001548 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003080:	429a      	cmp	r2, r3
 8003082:	d241      	bcs.n	8003108 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a4:	637a      	str	r2, [r7, #52]	; 0x34
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	613b      	str	r3, [r7, #16]
   return(result);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d8:	623a      	str	r2, [r7, #32]
 80030da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e00f      	b.n	8003128 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	429a      	cmp	r2, r3
 8003124:	d09f      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3740      	adds	r7, #64	; 0x40
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2222      	movs	r2, #34	; 0x22
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0220 	orr.w	r2, r2, #32
 800319c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b095      	sub	sp, #84	; 0x54
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d4:	643a      	str	r2, [r7, #64]	; 0x40
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800320e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e5      	bne.n	80031e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	d119      	bne.n	8003258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	60bb      	str	r3, [r7, #8]
   return(result);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f023 0310 	bic.w	r3, r3, #16
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003244:	61ba      	str	r2, [r7, #24]
 8003246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	613b      	str	r3, [r7, #16]
   return(result);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e5      	bne.n	8003224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003266:	bf00      	nop
 8003268:	3754      	adds	r7, #84	; 0x54
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fecb 	bl	8003028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b21      	cmp	r3, #33	; 0x21
 80032ac:	d13e      	bne.n	800332c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b6:	d114      	bne.n	80032e2 <UART_Transmit_IT+0x48>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d110      	bne.n	80032e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	1c9a      	adds	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]
 80032e0:	e008      	b.n	80032f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6211      	str	r1, [r2, #32]
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4619      	mov	r1, r3
 8003302:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10f      	bne.n	8003328 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003316:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd fb8e 	bl	8000a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b22      	cmp	r3, #34	; 0x22
 800337c:	f040 80ab 	bne.w	80034d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d117      	bne.n	80033ba <UART_Receive_IT+0x50>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d113      	bne.n	80033ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
 80033b8:	e026      	b.n	8003408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	d007      	beq.n	80033de <UART_Receive_IT+0x74>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <UART_Receive_IT+0x82>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e008      	b.n	80033fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003418:	2b00      	cmp	r3, #0
 800341a:	d15a      	bne.n	80034d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0220 	bic.w	r2, r2, #32
 800342a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	2b01      	cmp	r3, #1
 800345a:	d135      	bne.n	80034c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	613b      	str	r3, [r7, #16]
   return(result);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003482:	623a      	str	r2, [r7, #32]
 8003484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	69f9      	ldr	r1, [r7, #28]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d10a      	bne.n	80034ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fdbb 	bl	800303c <HAL_UARTEx_RxEventCallback>
 80034c6:	e002      	b.n	80034ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd fac1 	bl	8000a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e002      	b.n	80034d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b0c0      	sub	sp, #256	; 0x100
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	ea40 0301 	orr.w	r3, r0, r1
 8003508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	431a      	orrs	r2, r3
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	431a      	orrs	r2, r3
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003538:	f021 010c 	bic.w	r1, r1, #12
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003546:	430b      	orrs	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355a:	6999      	ldr	r1, [r3, #24]
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	ea40 0301 	orr.w	r3, r0, r1
 8003566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b8f      	ldr	r3, [pc, #572]	; (80037ac <UART_SetConfig+0x2cc>)
 8003570:	429a      	cmp	r2, r3
 8003572:	d005      	beq.n	8003580 <UART_SetConfig+0xa0>
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <UART_SetConfig+0x2d0>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d104      	bne.n	800358a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7ff f816 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8003584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003588:	e003      	b.n	8003592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800358a:	f7fe fffd 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800358e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	f040 810c 	bne.w	80037b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ba:	415b      	adcs	r3, r3
 80035bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035c2:	4621      	mov	r1, r4
 80035c4:	eb12 0801 	adds.w	r8, r2, r1
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb43 0901 	adc.w	r9, r3, r1
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e2:	4690      	mov	r8, r2
 80035e4:	4699      	mov	r9, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	eb18 0303 	adds.w	r3, r8, r3
 80035ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035f0:	462b      	mov	r3, r5
 80035f2:	eb49 0303 	adc.w	r3, r9, r3
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003606:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800360a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800360e:	460b      	mov	r3, r1
 8003610:	18db      	adds	r3, r3, r3
 8003612:	653b      	str	r3, [r7, #80]	; 0x50
 8003614:	4613      	mov	r3, r2
 8003616:	eb42 0303 	adc.w	r3, r2, r3
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
 800361c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003624:	f7fc fdea 	bl	80001fc <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <UART_SetConfig+0x2d4>)
 800362e:	fba3 2302 	umull	r2, r3, r3, r2
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	011c      	lsls	r4, r3, #4
 8003636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	1891      	adds	r1, r2, r2
 800364e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003650:	415b      	adcs	r3, r3
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003658:	4641      	mov	r1, r8
 800365a:	eb12 0a01 	adds.w	sl, r2, r1
 800365e:	4649      	mov	r1, r9
 8003660:	eb43 0b01 	adc.w	fp, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003678:	4692      	mov	sl, r2
 800367a:	469b      	mov	fp, r3
 800367c:	4643      	mov	r3, r8
 800367e:	eb1a 0303 	adds.w	r3, sl, r3
 8003682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003686:	464b      	mov	r3, r9
 8003688:	eb4b 0303 	adc.w	r3, fp, r3
 800368c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800369c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ba:	f7fc fd9f 	bl	80001fc <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <UART_SetConfig+0x2d4>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2264      	movs	r2, #100	; 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <UART_SetConfig+0x2d4>)
 80036dc:	fba3 2302 	umull	r2, r3, r3, r2
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e8:	441c      	add	r4, r3
 80036ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	1891      	adds	r1, r2, r2
 8003702:	63b9      	str	r1, [r7, #56]	; 0x38
 8003704:	415b      	adcs	r3, r3
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800370c:	4641      	mov	r1, r8
 800370e:	1851      	adds	r1, r2, r1
 8003710:	6339      	str	r1, [r7, #48]	; 0x30
 8003712:	4649      	mov	r1, r9
 8003714:	414b      	adcs	r3, r1
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003724:	4659      	mov	r1, fp
 8003726:	00cb      	lsls	r3, r1, #3
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372e:	4651      	mov	r1, sl
 8003730:	00ca      	lsls	r2, r1, #3
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	4603      	mov	r3, r0
 8003738:	4642      	mov	r2, r8
 800373a:	189b      	adds	r3, r3, r2
 800373c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003740:	464b      	mov	r3, r9
 8003742:	460a      	mov	r2, r1
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003758:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800375c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003760:	460b      	mov	r3, r1
 8003762:	18db      	adds	r3, r3, r3
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	4613      	mov	r3, r2
 8003768:	eb42 0303 	adc.w	r3, r2, r3
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003776:	f7fc fd41 	bl	80001fc <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <UART_SetConfig+0x2d4>)
 8003780:	fba3 1302 	umull	r1, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2164      	movs	r1, #100	; 0x64
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3332      	adds	r3, #50	; 0x32
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <UART_SetConfig+0x2d4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4422      	add	r2, r4
 80037a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037a8:	e105      	b.n	80039b6 <UART_SetConfig+0x4d6>
 80037aa:	bf00      	nop
 80037ac:	40011000 	.word	0x40011000
 80037b0:	40011400 	.word	0x40011400
 80037b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037ca:	4642      	mov	r2, r8
 80037cc:	464b      	mov	r3, r9
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	6239      	str	r1, [r7, #32]
 80037d2:	415b      	adcs	r3, r3
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037da:	4641      	mov	r1, r8
 80037dc:	1854      	adds	r4, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb43 0501 	adc.w	r5, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003800:	464b      	mov	r3, r9
 8003802:	eb45 0303 	adc.w	r3, r5, r3
 8003806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003826:	4629      	mov	r1, r5
 8003828:	008b      	lsls	r3, r1, #2
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003830:	4621      	mov	r1, r4
 8003832:	008a      	lsls	r2, r1, #2
 8003834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003838:	f7fc fce0 	bl	80001fc <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <UART_SetConfig+0x4e4>)
 8003842:	fba3 2302 	umull	r2, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	011c      	lsls	r4, r3, #4
 800384a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384e:	2200      	movs	r2, #0
 8003850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	1891      	adds	r1, r2, r2
 8003862:	61b9      	str	r1, [r7, #24]
 8003864:	415b      	adcs	r3, r3
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	4641      	mov	r1, r8
 800386e:	1851      	adds	r1, r2, r1
 8003870:	6139      	str	r1, [r7, #16]
 8003872:	4649      	mov	r1, r9
 8003874:	414b      	adcs	r3, r1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003884:	4659      	mov	r1, fp
 8003886:	00cb      	lsls	r3, r1, #3
 8003888:	4651      	mov	r1, sl
 800388a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800388e:	4651      	mov	r1, sl
 8003890:	00ca      	lsls	r2, r1, #3
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	4603      	mov	r3, r0
 8003898:	4642      	mov	r2, r8
 800389a:	189b      	adds	r3, r3, r2
 800389c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038a0:	464b      	mov	r3, r9
 80038a2:	460a      	mov	r2, r1
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038c4:	4649      	mov	r1, r9
 80038c6:	008b      	lsls	r3, r1, #2
 80038c8:	4641      	mov	r1, r8
 80038ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ce:	4641      	mov	r1, r8
 80038d0:	008a      	lsls	r2, r1, #2
 80038d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038d6:	f7fc fc91 	bl	80001fc <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <UART_SetConfig+0x4e4>)
 80038e0:	fba3 1302 	umull	r1, r3, r3, r2
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	2164      	movs	r1, #100	; 0x64
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	3332      	adds	r3, #50	; 0x32
 80038f2:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <UART_SetConfig+0x4e4>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	441c      	add	r4, r3
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	673b      	str	r3, [r7, #112]	; 0x70
 8003908:	677a      	str	r2, [r7, #116]	; 0x74
 800390a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800390e:	4642      	mov	r2, r8
 8003910:	464b      	mov	r3, r9
 8003912:	1891      	adds	r1, r2, r2
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	415b      	adcs	r3, r3
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800391e:	4641      	mov	r1, r8
 8003920:	1851      	adds	r1, r2, r1
 8003922:	6039      	str	r1, [r7, #0]
 8003924:	4649      	mov	r1, r9
 8003926:	414b      	adcs	r3, r1
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003936:	4659      	mov	r1, fp
 8003938:	00cb      	lsls	r3, r1, #3
 800393a:	4651      	mov	r1, sl
 800393c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003940:	4651      	mov	r1, sl
 8003942:	00ca      	lsls	r2, r1, #3
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	4603      	mov	r3, r0
 800394a:	4642      	mov	r2, r8
 800394c:	189b      	adds	r3, r3, r2
 800394e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003950:	464b      	mov	r3, r9
 8003952:	460a      	mov	r2, r1
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	663b      	str	r3, [r7, #96]	; 0x60
 8003964:	667a      	str	r2, [r7, #100]	; 0x64
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003972:	4649      	mov	r1, r9
 8003974:	008b      	lsls	r3, r1, #2
 8003976:	4641      	mov	r1, r8
 8003978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397c:	4641      	mov	r1, r8
 800397e:	008a      	lsls	r2, r1, #2
 8003980:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003984:	f7fc fc3a 	bl	80001fc <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <UART_SetConfig+0x4e4>)
 800398e:	fba3 1302 	umull	r1, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2164      	movs	r1, #100	; 0x64
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	3332      	adds	r3, #50	; 0x32
 80039a0:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <UART_SetConfig+0x4e4>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4422      	add	r2, r4
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 f842 	bl	8003a64 <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08003dbc 	.word	0x08003dbc
 8003a04:	08003dbc 	.word	0x08003dbc
 8003a08:	08003dbc 	.word	0x08003dbc
 8003a0c:	08003dc0 	.word	0x08003dc0

08003a10 <memcpy>:
 8003a10:	440a      	add	r2, r1
 8003a12:	4291      	cmp	r1, r2
 8003a14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a18:	d100      	bne.n	8003a1c <memcpy+0xc>
 8003a1a:	4770      	bx	lr
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a26:	4291      	cmp	r1, r2
 8003a28:	d1f9      	bne.n	8003a1e <memcpy+0xe>
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <memset>:
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <strncmp>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	b17a      	cbz	r2, 8003a60 <strncmp+0x24>
 8003a40:	4603      	mov	r3, r0
 8003a42:	3901      	subs	r1, #1
 8003a44:	1884      	adds	r4, r0, r2
 8003a46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003a4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003a4e:	4290      	cmp	r0, r2
 8003a50:	d101      	bne.n	8003a56 <strncmp+0x1a>
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	d101      	bne.n	8003a5a <strncmp+0x1e>
 8003a56:	1a80      	subs	r0, r0, r2
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d1f3      	bne.n	8003a46 <strncmp+0xa>
 8003a5e:	e7fa      	b.n	8003a56 <strncmp+0x1a>
 8003a60:	4610      	mov	r0, r2
 8003a62:	e7f9      	b.n	8003a58 <strncmp+0x1c>

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
