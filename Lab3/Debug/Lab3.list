
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d8  080054d8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e0  080054e0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080054e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00001124  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011c0  200011c0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6a4  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240c  00000000  00000000  0002f770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  000328f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f80  00000000  00000000  00033578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109e6  00000000  00000000  000364f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8041  00000000  00000000  00046ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ef1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b68  00000000  00000000  0011ef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050f4 	.word	0x080050f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	080050f4 	.word	0x080050f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <is_buf_empty>:

bool is_buf_empty(struct Buffer* buf) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <is_buf_full>:

bool is_buf_full(struct Buffer* buf) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == 2048 - 1));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80005fe:	3301      	adds	r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8000606:	4293      	cmp	r3, r2
 8000608:	d00b      	beq.n	8000622 <is_buf_full+0x32>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000610:	2b00      	cmp	r3, #0
 8000612:	d108      	bne.n	8000626 <is_buf_full+0x36>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800061a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <is_buf_full+0x36>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <is_buf_full+0x38>
 8000626:	2300      	movs	r3, #0
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800064a:	e01e      	b.n	800068a <buf_push+0x50>
		if (is_buf_full(buf)) {
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffcf 	bl	80005f0 <is_buf_full>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11d      	bne.n	8000694 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800065e:	3301      	adds	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000666:	b29a      	uxth	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	5499      	strb	r1, [r3, r2]
		data++;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
		written++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3dc      	bcc.n	800064c <buf_push+0x12>
 8000692:	e000      	b.n	8000696 <buf_push+0x5c>
			break;
 8000694:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ffaa 	bl	80005f0 <is_buf_full>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00a      	beq.n	80006be <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2100      	movs	r1, #0
 80006ca:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <buf_pop>:

bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff74 	bl	80005d6 <is_buf_empty>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <buf_pop+0x1c>
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e04e      	b.n	8000796 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006fe:	3301      	adds	r3, #1
 8000700:	b29b      	uxth	r3, r3
 8000702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000706:	b29a      	uxth	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 8000712:	e01b      	b.n	800074c <buf_pop+0x70>
		if (read < size) {
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d20c      	bcs.n	8000736 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000722:	4619      	mov	r1, r3
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	5c52      	ldrb	r2, [r2, r1]
 800072e:	701a      	strb	r2, [r3, #0]
			read++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800073c:	3301      	adds	r3, #1
 800073e:	b29b      	uxth	r3, r3
 8000740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000744:	b29a      	uxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1db      	bne.n	8000714 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d102      	bne.n	800076a <buf_pop+0x8e>
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	e000      	b.n	800076c <buf_pop+0x90>
 800076a:	2200      	movs	r2, #0
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000784:	429a      	cmp	r2, r3
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <buf_push_itsafe>:

void buf_push_itsafe(struct Buffer* buf, uint8_t* data, size_t size) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b088      	sub	sp, #32
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80007aa:	f3ef 8310 	mrs	r3, PRIMASK
 80007ae:	617b      	str	r3, [r7, #20]
  return(result);
 80007b0:	697b      	ldr	r3, [r7, #20]
	uint32_t pmask = __get_PRIMASK();
 80007b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
	__disable_irq();
	buf_push(buf, data, size);
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ff3c 	bl	800063a <buf_push>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	f383 8810 	msr	PRIMASK, r3
}
 80007cc:	bf00      	nop
	__set_PRIMASK(pmask);
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <buf_pop_itsafe>:

bool buf_pop_itsafe(struct Buffer* buf, uint8_t* data, size_t size) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b088      	sub	sp, #32
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80007e2:	f3ef 8310 	mrs	r3, PRIMASK
 80007e6:	613b      	str	r3, [r7, #16]
  return(result);
 80007e8:	693b      	ldr	r3, [r7, #16]
	uint32_t pmask = __get_PRIMASK();
 80007ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
	__disable_irq();
	bool result = buf_pop(buf, data, size);
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f7ff ff71 	bl	80006dc <buf_pop>
 80007fa:	4603      	mov	r3, r0
 80007fc:	76fb      	strb	r3, [r7, #27]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f383 8810 	msr	PRIMASK, r3
}
 8000808:	bf00      	nop
	__set_PRIMASK(pmask);
	return result;
 800080a:	7efb      	ldrb	r3, [r7, #27]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a24      	ldr	r2, [pc, #144]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_GPIO_Init+0xa0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_GPIO_Init+0xa0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <MX_GPIO_Init+0xa0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <MX_GPIO_Init+0xa0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_GPIO_Init+0xa0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <transmit+0x30>)
 80008cc:	f002 fff9 	bl	80038c2 <HAL_UART_Transmit_IT>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d104      	bne.n	80008e0 <transmit+0x28>
		buf_push_itsafe(&transmitBuffer, data, size);
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <transmit+0x34>)
 80008dc:	f7ff ff5f 	bl	800079e <buf_push_itsafe>
	}
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20001168 	.word	0x20001168
 80008ec:	200008c0 	.word	0x200008c0

080008f0 <transmitc>:

void transmitc(char* data) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fc79 	bl	80001f0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffd8 	bl	80008b8 <transmit>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <receive>:

void receive() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 8000914:	2201      	movs	r2, #1
 8000916:	4903      	ldr	r1, [pc, #12]	; (8000924 <receive+0x14>)
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <receive+0x18>)
 800091a:	f003 f817 	bl	800394c <HAL_UART_Receive_IT>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200010c8 	.word	0x200010c8
 8000928:	20001168 	.word	0x20001168

0800092c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	buf_push_itsafe(&receiveBuffer, char_buf, sizeof(char_buf));
 8000934:	2201      	movs	r2, #1
 8000936:	4906      	ldr	r1, [pc, #24]	; (8000950 <HAL_UART_RxCpltCallback+0x24>)
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_UART_RxCpltCallback+0x28>)
 800093a:	f7ff ff30 	bl	800079e <buf_push_itsafe>
	transmit(char_buf, sizeof(char_buf));
 800093e:	2101      	movs	r1, #1
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <HAL_UART_RxCpltCallback+0x24>)
 8000942:	f7ff ffb9 	bl	80008b8 <transmit>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200010c8 	.word	0x200010c8
 8000954:	200000b8 	.word	0x200000b8

08000958 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000958:	b580      	push	{r7, lr}
 800095a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800095e:	af00      	add	r7, sp, #0
 8000960:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000964:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000968:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  bool is_pop = buf_pop_itsafe(&transmitBuffer, buf, sizeof(buf));
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000972:	4619      	mov	r1, r3
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <HAL_UART_TxCpltCallback+0x54>)
 8000976:	f7ff ff2e 	bl	80007d6 <buf_pop_itsafe>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
  if (is_pop) {
 8000980:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00c      	beq.n	80009a2 <HAL_UART_TxCpltCallback+0x4a>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc2f 	bl	80001f0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <HAL_UART_TxCpltCallback+0x58>)
 800099e:	f002 ff90 	bl	80038c2 <HAL_UART_Transmit_IT>
  }
}
 80009a2:	bf00      	nop
 80009a4:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200008c0 	.word	0x200008c0
 80009b0:	20001168 	.word	0x20001168

080009b4 <HAL_TIM_PeriodElapsedCallback>:

size_t edit_mode = 0;
uint16_t edit_mode_led = 0;
uint16_t edit_mode_brightness = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d15e      	bne.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
		  if (cur_mode != -1) {
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ce:	d059      	beq.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
			  if (cur_mode >= sizeof(mode_leds) / sizeof(uint16_t)) {
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d90c      	bls.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x3e>
				  htim4.Instance->CCR2 = 0;
 80009d8:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
				  htim4.Instance->CCR3 = 0;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2200      	movs	r2, #0
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
				  htim4.Instance->CCR4 = 0;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
 80009f0:	e044      	b.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0xc8>
			  } else {
				  uint16_t leds = mode_leds[cur_mode];
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fc:	81fb      	strh	r3, [r7, #14]
				  uint16_t brightness = mode_brightness[cur_mode];
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a08:	81bb      	strh	r3, [r7, #12]

				  if ((leds & 0x1) != 0) {
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x74>
					  htim4.Instance->CCR2 = brightness * 40;
 8000a14:	89ba      	ldrh	r2, [r7, #12]
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
 8000a26:	e003      	b.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x7c>
				  } else {
					  htim4.Instance->CCR2 = 0;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
				  }

				  if ((leds & 0x2) != 0) {
 8000a30:	89fb      	ldrh	r3, [r7, #14]
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d009      	beq.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x9a>
					  htim4.Instance->CCR3 = brightness * 40;
 8000a3a:	89ba      	ldrh	r2, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a4c:	e003      	b.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0xa2>
				  } else {
					  htim4.Instance->CCR3 = 0;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
				  }

				  if ((leds & 0x4) != 0) {
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0xc0>
					  htim4.Instance->CCR4 = brightness * 40;
 8000a60:	89ba      	ldrh	r2, [r7, #12]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
 8000a72:	e003      	b.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0xc8>
				  } else {
					  htim4.Instance->CCR4 = 0;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	641a      	str	r2, [r3, #64]	; 0x40
				  }
			  }

			  cur_mode = -1;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a82:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40001000 	.word	0x40001000
 8000a94:	20000028 	.word	0x20000028
 8000a98:	200010d8 	.word	0x200010d8
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000014 	.word	0x20000014

08000aa4 <leds_str.1>:
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_TIM4_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  char leds_str(uint16_t leds) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	f8c7 c000 	str.w	ip, [r7]
	  if (leds == 0x1) return 'G';
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d101      	bne.n	8000abc <leds_str.1+0x18>
 8000ab8:	2347      	movs	r3, #71	; 0x47
 8000aba:	e00a      	b.n	8000ad2 <leds_str.1+0x2e>
	  if (leds == 0x2) return 'Y';
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d101      	bne.n	8000ac6 <leds_str.1+0x22>
 8000ac2:	2359      	movs	r3, #89	; 0x59
 8000ac4:	e005      	b.n	8000ad2 <leds_str.1+0x2e>
	  if (leds == 0x4) return 'R';
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d101      	bne.n	8000ad0 <leds_str.1+0x2c>
 8000acc:	2352      	movs	r3, #82	; 0x52
 8000ace:	e000      	b.n	8000ad2 <leds_str.1+0x2e>
	  return '?';
 8000ad0:	233f      	movs	r3, #63	; 0x3f
  }
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <main>:
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
int main(void)
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8000aec:	f000 fdf6 	bl	80016dc <HAL_Init>
  buf_init(&receiveBuffer);
 8000af0:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <main+0xc0>)
 8000af2:	f7ff fd57 	bl	80005a4 <buf_init>
  buf_init(&transmitBuffer);
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <main+0xc4>)
 8000af8:	f7ff fd54 	bl	80005a4 <buf_init>
  SystemClock_Config();
 8000afc:	f000 faec 	bl	80010d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000b00:	f7ff fe88 	bl	8000814 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000b04:	f000 fd46 	bl	8001594 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000b08:	f000 fc0a 	bl	8001320 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000b0c:	f000 fc94 	bl	8001438 <MX_TIM6_Init>
			  transmitc(buf);
		  }
	  }
  }

  if (!hello_print) {
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <main+0xc8>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <main+0x54>
	  hello_print = true;
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <main+0xc8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	  transmitc("\n\r\n\rProgramm started\n\r");
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <main+0xcc>)
 8000b26:	f7ff fee3 	bl	80008f0 <transmitc>
	  print_mode_message();
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	469c      	mov	ip, r3
 8000b30:	f000 f848 	bl	8000bc4 <print_mode_message.0>
  }

  cur_mode = 0;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <main+0xd0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0xd4>)
 8000b3e:	f001 ff51 	bl	80029e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b42:	2108      	movs	r1, #8
 8000b44:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <main+0xd4>)
 8000b46:	f001 ff4d 	bl	80029e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b4a:	210c      	movs	r1, #12
 8000b4c:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <main+0xd4>)
 8000b4e:	f001 ff49 	bl	80029e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <main+0xd8>)
 8000b54:	f001 fe7c 	bl	8002850 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receive();
 8000b58:	f7ff feda 	bl	8000910 <receive>

	  uint8_t read[2] = {0};
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	80bb      	strh	r3, [r7, #4]

	  bool is_pop = buf_pop_itsafe(&receiveBuffer, read, sizeof(read));
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2202      	movs	r2, #2
 8000b64:	4619      	mov	r1, r3
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <main+0xc0>)
 8000b68:	f7ff fe35 	bl	80007d6 <buf_pop_itsafe>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]

	  if (is_pop) {
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f0      	beq.n	8000b58 <main+0x78>
		  char c = (char) read[0];
 8000b76:	793b      	ldrb	r3, [r7, #4]
 8000b78:	73bb      	strb	r3, [r7, #14]
		  if (c == '\r') {
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	2b0d      	cmp	r3, #13
 8000b7e:	d103      	bne.n	8000b88 <main+0xa8>
			  transmitc("\n");
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <main+0xdc>)
 8000b82:	f7ff feb5 	bl	80008f0 <transmitc>
 8000b86:	e002      	b.n	8000b8e <main+0xae>
		  } else {
			  transmitc("\n\r");
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <main+0xe0>)
 8000b8a:	f7ff feb1 	bl	80008f0 <transmitc>
		  }
		  handle_command(c);
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	f107 0208 	add.w	r2, r7, #8
 8000b94:	4694      	mov	ip, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8da 	bl	8000d50 <handle_command.2>
  {
 8000b9c:	e7dc      	b.n	8000b58 <main+0x78>
 8000b9e:	bf00      	nop
 8000ba0:	200000b8 	.word	0x200000b8
 8000ba4:	200008c0 	.word	0x200008c0
 8000ba8:	200010c9 	.word	0x200010c9
 8000bac:	0800510c 	.word	0x0800510c
 8000bb0:	20000028 	.word	0x20000028
 8000bb4:	200010d8 	.word	0x200010d8
 8000bb8:	20001120 	.word	0x20001120
 8000bbc:	08005124 	.word	0x08005124
 8000bc0:	08005128 	.word	0x08005128

08000bc4 <print_mode_message.0>:
  void print_mode_message() {
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b0fb      	sub	sp, #492	; 0x1ec
 8000bc8:	af12      	add	r7, sp, #72	; 0x48
 8000bca:	4664      	mov	r4, ip
 8000bcc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bd0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000bd4:	f8c3 c000 	str.w	ip, [r3]
	  char mode_leds_str[9] = {0};
 8000bd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	711a      	strb	r2, [r3, #4]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000bf2:	e018      	b.n	8000c26 <print_mode_message.0+0x62>
		  mode_leds_str[i] = leds_str(mode_leds[i]);
 8000bf4:	4a53      	ldr	r2, [pc, #332]	; (8000d44 <print_mode_message.0+0x180>)
 8000bf6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfe:	46a4      	mov	ip, r4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff4f 	bl	8000aa4 <leds_str.1>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c0e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000c12:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c16:	4413      	add	r3, r2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000c1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c20:	3301      	adds	r3, #1
 8000c22:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d9e2      	bls.n	8000bf4 <print_mode_message.0+0x30>
	  char format[] = "Modes:\n\r1-%c%d\n\r2-%c%d\n\r3-%c%d\n\r4-%c%d\n\r5-%c%d\n\r6-%c%d\n\r7-%c%d\n\r8-%c%d\n\r9-%c%d\n\r> ";
 8000c2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c32:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000c36:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <print_mode_message.0+0x184>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	2353      	movs	r3, #83	; 0x53
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f003 fdce 	bl	80047e0 <memcpy>
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c4c:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000c4e:	469c      	mov	ip, r3
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <print_mode_message.0+0x188>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c56:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c5e:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), format,
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <print_mode_message.0+0x188>)
 8000c64:	885b      	ldrh	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c70:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <print_mode_message.0+0x188>)
 8000c76:	889b      	ldrh	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000c78:	623b      	str	r3, [r7, #32]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c82:	78db      	ldrb	r3, [r3, #3]
	  snprintf(buf, sizeof(buf), format,
 8000c84:	61fb      	str	r3, [r7, #28]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <print_mode_message.0+0x188>)
 8000c88:	88db      	ldrh	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000c8a:	61bb      	str	r3, [r7, #24]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c94:	791b      	ldrb	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000c96:	617b      	str	r3, [r7, #20]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <print_mode_message.0+0x188>)
 8000c9a:	891b      	ldrh	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000c9c:	613b      	str	r3, [r7, #16]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c9e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ca2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ca6:	795b      	ldrb	r3, [r3, #5]
	  snprintf(buf, sizeof(buf), format,
 8000ca8:	60fb      	str	r3, [r7, #12]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <print_mode_message.0+0x188>)
 8000cac:	895b      	ldrh	r3, [r3, #10]
	  snprintf(buf, sizeof(buf), format,
 8000cae:	60bb      	str	r3, [r7, #8]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cb0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000cb8:	799b      	ldrb	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000cba:	607b      	str	r3, [r7, #4]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <print_mode_message.0+0x188>)
 8000cbe:	899b      	ldrh	r3, [r3, #12]
	  snprintf(buf, sizeof(buf), format,
 8000cc0:	461e      	mov	r6, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cc2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000cca:	79db      	ldrb	r3, [r3, #7]
	  snprintf(buf, sizeof(buf), format,
 8000ccc:	461d      	mov	r5, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <print_mode_message.0+0x188>)
 8000cd0:	89db      	ldrh	r3, [r3, #14]
	  snprintf(buf, sizeof(buf), format,
 8000cd2:	461c      	mov	r4, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cd4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000cdc:	7a1b      	ldrb	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000cde:	4619      	mov	r1, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <print_mode_message.0+0x188>)
 8000ce2:	8a1b      	ldrh	r3, [r3, #16]
	  snprintf(buf, sizeof(buf), format,
 8000ce4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000ce8:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000cec:	9310      	str	r3, [sp, #64]	; 0x40
 8000cee:	910f      	str	r1, [sp, #60]	; 0x3c
 8000cf0:	940e      	str	r4, [sp, #56]	; 0x38
 8000cf2:	950d      	str	r5, [sp, #52]	; 0x34
 8000cf4:	960c      	str	r6, [sp, #48]	; 0x30
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	910b      	str	r1, [sp, #44]	; 0x2c
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	910a      	str	r1, [sp, #40]	; 0x28
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	9109      	str	r1, [sp, #36]	; 0x24
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	9108      	str	r1, [sp, #32]
 8000d06:	6979      	ldr	r1, [r7, #20]
 8000d08:	9107      	str	r1, [sp, #28]
 8000d0a:	69b9      	ldr	r1, [r7, #24]
 8000d0c:	9106      	str	r1, [sp, #24]
 8000d0e:	69f9      	ldr	r1, [r7, #28]
 8000d10:	9105      	str	r1, [sp, #20]
 8000d12:	6a39      	ldr	r1, [r7, #32]
 8000d14:	9104      	str	r1, [sp, #16]
 8000d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d18:	9103      	str	r1, [sp, #12]
 8000d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d1c:	9102      	str	r1, [sp, #8]
 8000d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d20:	9101      	str	r1, [sp, #4]
 8000d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4663      	mov	r3, ip
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	f003 fd6e 	bl	800480c <sniprintf>
	  transmitc(buf);
 8000d30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fddb 	bl	80008f0 <transmitc>
  }
 8000d3a:	bf00      	nop
 8000d3c:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	0800512c 	.word	0x0800512c
 8000d4c:	20000014 	.word	0x20000014

08000d50 <handle_command.2>:
  void handle_command(char cmd) {
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b0a5      	sub	sp, #148	; 0x94
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	4664      	mov	r4, ip
 8000d5c:	f8c7 c000 	str.w	ip, [r7]
	  if (state == ST_MAIN) {
 8000d60:	4b95      	ldr	r3, [pc, #596]	; (8000fb8 <handle_command.2+0x268>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d133      	bne.n	8000dd0 <handle_command.2+0x80>
		  if (cmd >= '1' && cmd <= '9') {
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b30      	cmp	r3, #48	; 0x30
 8000d6c:	d914      	bls.n	8000d98 <handle_command.2+0x48>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b39      	cmp	r3, #57	; 0x39
 8000d72:	d811      	bhi.n	8000d98 <handle_command.2+0x48>
			  cur_mode = (cmd - '1');
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3b31      	subs	r3, #49	; 0x31
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b90      	ldr	r3, [pc, #576]	; (8000fbc <handle_command.2+0x26c>)
 8000d7c:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f107 000c 	add.w	r0, r7, #12
 8000d84:	4a8e      	ldr	r2, [pc, #568]	; (8000fc0 <handle_command.2+0x270>)
 8000d86:	2120      	movs	r1, #32
 8000d88:	f003 fd40 	bl	800480c <sniprintf>
			  transmitc(buf);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdad 	bl	80008f0 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000d96:	e188      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '0') {
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b30      	cmp	r3, #48	; 0x30
 8000d9c:	d106      	bne.n	8000dac <handle_command.2+0x5c>
			  cur_mode = 100;
 8000d9e:	4b87      	ldr	r3, [pc, #540]	; (8000fbc <handle_command.2+0x26c>)
 8000da0:	2264      	movs	r2, #100	; 0x64
 8000da2:	601a      	str	r2, [r3, #0]
			  transmitc("All LEDs off\n\r> ");
 8000da4:	4887      	ldr	r0, [pc, #540]	; (8000fc4 <handle_command.2+0x274>)
 8000da6:	f7ff fda3 	bl	80008f0 <transmitc>
  }
 8000daa:	e17e      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b0d      	cmp	r3, #13
 8000db0:	d10a      	bne.n	8000dc8 <handle_command.2+0x78>
			  state = ST_EDIT_WAIT_MODE;
 8000db2:	4b81      	ldr	r3, [pc, #516]	; (8000fb8 <handle_command.2+0x268>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	801a      	strh	r2, [r3, #0]
			  edit_mode = -1;
 8000db8:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <handle_command.2+0x278>)
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dbe:	601a      	str	r2, [r3, #0]
			  transmitc("Enter edit mode\n\rChoose mode to edit [1-9]: ");
 8000dc0:	4882      	ldr	r0, [pc, #520]	; (8000fcc <handle_command.2+0x27c>)
 8000dc2:	f7ff fd95 	bl	80008f0 <transmitc>
  }
 8000dc6:	e170      	b.n	80010aa <handle_command.2+0x35a>
			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8000dc8:	4881      	ldr	r0, [pc, #516]	; (8000fd0 <handle_command.2+0x280>)
 8000dca:	f7ff fd91 	bl	80008f0 <transmitc>
  }
 8000dce:	e16c      	b.n	80010aa <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_MODE) {
 8000dd0:	4b79      	ldr	r3, [pc, #484]	; (8000fb8 <handle_command.2+0x268>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d147      	bne.n	8000e68 <handle_command.2+0x118>
		  if (cmd >= '1' && cmd <= '9') {
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b30      	cmp	r3, #48	; 0x30
 8000ddc:	d916      	bls.n	8000e0c <handle_command.2+0xbc>
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b39      	cmp	r3, #57	; 0x39
 8000de2:	d813      	bhi.n	8000e0c <handle_command.2+0xbc>
			  edit_mode = (cmd - '1');
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3b31      	subs	r3, #49	; 0x31
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <handle_command.2+0x278>)
 8000dec:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000dee:	4b76      	ldr	r3, [pc, #472]	; (8000fc8 <handle_command.2+0x278>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3331      	adds	r3, #49	; 0x31
 8000df4:	f107 000c 	add.w	r0, r7, #12
 8000df8:	4a76      	ldr	r2, [pc, #472]	; (8000fd4 <handle_command.2+0x284>)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	f003 fd06 	bl	800480c <sniprintf>
			  transmitc(buf);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd73 	bl	80008f0 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000e0a:	e14e      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b0d      	cmp	r3, #13
 8000e10:	d112      	bne.n	8000e38 <handle_command.2+0xe8>
			  if (edit_mode == -1) {
 8000e12:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <handle_command.2+0x278>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1a:	d103      	bne.n	8000e24 <handle_command.2+0xd4>
				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 8000e1c:	486e      	ldr	r0, [pc, #440]	; (8000fd8 <handle_command.2+0x288>)
 8000e1e:	f7ff fd67 	bl	80008f0 <transmitc>
  }
 8000e22:	e142      	b.n	80010aa <handle_command.2+0x35a>
				  state = ST_EDIT_WAIT_LED;
 8000e24:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <handle_command.2+0x268>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	801a      	strh	r2, [r3, #0]
				  edit_mode_led = 0;
 8000e2a:	4b6c      	ldr	r3, [pc, #432]	; (8000fdc <handle_command.2+0x28c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	801a      	strh	r2, [r3, #0]
				  transmitc("Choose led for mode [g,y,r]: ");
 8000e30:	486b      	ldr	r0, [pc, #428]	; (8000fe0 <handle_command.2+0x290>)
 8000e32:	f7ff fd5d 	bl	80008f0 <transmitc>
  }
 8000e36:	e138      	b.n	80010aa <handle_command.2+0x35a>
			  if (edit_mode == -1) {
 8000e38:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <handle_command.2+0x278>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e40:	d103      	bne.n	8000e4a <handle_command.2+0xfa>
				  transmitc("Unknown. Choose mode to edit [1-9]: ");
 8000e42:	4868      	ldr	r0, [pc, #416]	; (8000fe4 <handle_command.2+0x294>)
 8000e44:	f7ff fd54 	bl	80008f0 <transmitc>
  }
 8000e48:	e12f      	b.n	80010aa <handle_command.2+0x35a>
				  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <handle_command.2+0x278>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3331      	adds	r3, #49	; 0x31
 8000e50:	f107 000c 	add.w	r0, r7, #12
 8000e54:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <handle_command.2+0x284>)
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	f003 fcd8 	bl	800480c <sniprintf>
				  transmitc(buf);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fd45 	bl	80008f0 <transmitc>
  }
 8000e66:	e120      	b.n	80010aa <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_LED) {
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <handle_command.2+0x268>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d157      	bne.n	8000f20 <handle_command.2+0x1d0>
		  if (cmd == 'g') {
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b67      	cmp	r3, #103	; 0x67
 8000e74:	d106      	bne.n	8000e84 <handle_command.2+0x134>
			  edit_mode_led = 0x1;
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <handle_command.2+0x28c>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	801a      	strh	r2, [r3, #0]
			  transmitc("Green led. Enter or choose another led [g,y,r]: ");
 8000e7c:	485a      	ldr	r0, [pc, #360]	; (8000fe8 <handle_command.2+0x298>)
 8000e7e:	f7ff fd37 	bl	80008f0 <transmitc>
  }
 8000e82:	e112      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == 'y') {
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b79      	cmp	r3, #121	; 0x79
 8000e88:	d106      	bne.n	8000e98 <handle_command.2+0x148>
			  edit_mode_led = 0x2;
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <handle_command.2+0x28c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	801a      	strh	r2, [r3, #0]
			  transmitc("Yellow led. Enter or choose another led [g,y,r]: ");
 8000e90:	4856      	ldr	r0, [pc, #344]	; (8000fec <handle_command.2+0x29c>)
 8000e92:	f7ff fd2d 	bl	80008f0 <transmitc>
  }
 8000e96:	e108      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == 'r') {
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b72      	cmp	r3, #114	; 0x72
 8000e9c:	d106      	bne.n	8000eac <handle_command.2+0x15c>
			  edit_mode_led = 0x4;
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <handle_command.2+0x28c>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	801a      	strh	r2, [r3, #0]
			  transmitc("Red led. Enter or choose another led [g,y,r]: ");
 8000ea4:	4852      	ldr	r0, [pc, #328]	; (8000ff0 <handle_command.2+0x2a0>)
 8000ea6:	f7ff fd23 	bl	80008f0 <transmitc>
  }
 8000eaa:	e0fe      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b0d      	cmp	r3, #13
 8000eb0:	d111      	bne.n	8000ed6 <handle_command.2+0x186>
			  if (edit_mode_led == 0) {
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <handle_command.2+0x28c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <handle_command.2+0x172>
				  transmitc("No led. Choose led for mode [g,y,r]: ");
 8000eba:	484e      	ldr	r0, [pc, #312]	; (8000ff4 <handle_command.2+0x2a4>)
 8000ebc:	f7ff fd18 	bl	80008f0 <transmitc>
  }
 8000ec0:	e0f3      	b.n	80010aa <handle_command.2+0x35a>
				  state = ST_EDIT_WAIT_BRIGHT;
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <handle_command.2+0x268>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	801a      	strh	r2, [r3, #0]
				  edit_mode_brightness = 40;
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <handle_command.2+0x2a8>)
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	801a      	strh	r2, [r3, #0]
				  transmitc("40%. Enter or choose another brightness: ");
 8000ece:	484b      	ldr	r0, [pc, #300]	; (8000ffc <handle_command.2+0x2ac>)
 8000ed0:	f7ff fd0e 	bl	80008f0 <transmitc>
  }
 8000ed4:	e0e9      	b.n	80010aa <handle_command.2+0x35a>
			  if (edit_mode_led == 0) {
 8000ed6:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <handle_command.2+0x28c>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <handle_command.2+0x196>
				  transmitc("Unknown. Choose led for mode [g,y,r]: ");
 8000ede:	4848      	ldr	r0, [pc, #288]	; (8001000 <handle_command.2+0x2b0>)
 8000ee0:	f7ff fd06 	bl	80008f0 <transmitc>
  }
 8000ee4:	e0e1      	b.n	80010aa <handle_command.2+0x35a>
				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <handle_command.2+0x28c>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d007      	beq.n	8000efe <handle_command.2+0x1ae>
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <handle_command.2+0x28c>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d101      	bne.n	8000efa <handle_command.2+0x1aa>
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <handle_command.2+0x2b4>)
 8000ef8:	e002      	b.n	8000f00 <handle_command.2+0x1b0>
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <handle_command.2+0x2b8>)
 8000efc:	e000      	b.n	8000f00 <handle_command.2+0x1b0>
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <handle_command.2+0x2bc>)
 8000f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  snprintf(buf, sizeof(buf), "%s led. Enter or choose another led [g,y,r]: ", led);
 8000f04:	f107 000c 	add.w	r0, r7, #12
 8000f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f0c:	4a40      	ldr	r2, [pc, #256]	; (8001010 <handle_command.2+0x2c0>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	f003 fc7c 	bl	800480c <sniprintf>
				  transmitc(buf);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fce9 	bl	80008f0 <transmitc>
  }
 8000f1e:	e0c4      	b.n	80010aa <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <handle_command.2+0x268>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	f040 80c0 	bne.w	80010aa <handle_command.2+0x35a>
		  if (cmd >= '1' && cmd <= '9') {
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b30      	cmp	r3, #48	; 0x30
 8000f2e:	d91a      	bls.n	8000f66 <handle_command.2+0x216>
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b39      	cmp	r3, #57	; 0x39
 8000f34:	d817      	bhi.n	8000f66 <handle_command.2+0x216>
			  edit_mode_brightness = (cmd - '0') * 10;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3b30      	subs	r3, #48	; 0x30
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f48:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	f107 000c 	add.w	r0, r7, #12
 8000f52:	4a30      	ldr	r2, [pc, #192]	; (8001014 <handle_command.2+0x2c4>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	f003 fc59 	bl	800480c <sniprintf>
			  transmitc(buf);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fcc6 	bl	80008f0 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000f64:	e0a1      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '0') {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b30      	cmp	r3, #48	; 0x30
 8000f6a:	d106      	bne.n	8000f7a <handle_command.2+0x22a>
			  edit_mode_brightness = 100;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f6e:	2264      	movs	r2, #100	; 0x64
 8000f70:	801a      	strh	r2, [r3, #0]
			  transmitc("100%. Enter or choose another: ");
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <handle_command.2+0x2c8>)
 8000f74:	f7ff fcbc 	bl	80008f0 <transmitc>
  }
 8000f78:	e097      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '+') {
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b2b      	cmp	r3, #43	; 0x2b
 8000f7e:	d14d      	bne.n	800101c <handle_command.2+0x2cc>
			  edit_mode_brightness += 10;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	330a      	adds	r3, #10
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d902      	bls.n	8000f9a <handle_command.2+0x24a>
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f96:	2264      	movs	r2, #100	; 0x64
 8000f98:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <handle_command.2+0x2a8>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	f107 000c 	add.w	r0, r7, #12
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <handle_command.2+0x2c4>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	f003 fc31 	bl	800480c <sniprintf>
			  transmitc(buf);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fc9e 	bl	80008f0 <transmitc>
  }
 8000fb4:	e079      	b.n	80010aa <handle_command.2+0x35a>
 8000fb6:	bf00      	nop
 8000fb8:	200010ca 	.word	0x200010ca
 8000fbc:	20000028 	.word	0x20000028
 8000fc0:	08005180 	.word	0x08005180
 8000fc4:	08005198 	.word	0x08005198
 8000fc8:	200010cc 	.word	0x200010cc
 8000fcc:	080051ac 	.word	0x080051ac
 8000fd0:	080051dc 	.word	0x080051dc
 8000fd4:	0800520c 	.word	0x0800520c
 8000fd8:	08005240 	.word	0x08005240
 8000fdc:	200010d0 	.word	0x200010d0
 8000fe0:	08005270 	.word	0x08005270
 8000fe4:	08005290 	.word	0x08005290
 8000fe8:	080052b8 	.word	0x080052b8
 8000fec:	080052ec 	.word	0x080052ec
 8000ff0:	08005320 	.word	0x08005320
 8000ff4:	08005350 	.word	0x08005350
 8000ff8:	200010d2 	.word	0x200010d2
 8000ffc:	08005378 	.word	0x08005378
 8001000:	080053a4 	.word	0x080053a4
 8001004:	080053cc 	.word	0x080053cc
 8001008:	080053d4 	.word	0x080053d4
 800100c:	080053d8 	.word	0x080053d8
 8001010:	080053e0 	.word	0x080053e0
 8001014:	08005410 	.word	0x08005410
 8001018:	08005430 	.word	0x08005430
		  } else if (cmd == '-') {
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b2d      	cmp	r3, #45	; 0x2d
 8001020:	d11a      	bne.n	8001058 <handle_command.2+0x308>
			  edit_mode_brightness -= 10;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <handle_command.2+0x364>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	3b0a      	subs	r3, #10
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <handle_command.2+0x364>)
 800102c:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <handle_command.2+0x364>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	2b09      	cmp	r3, #9
 8001034:	d802      	bhi.n	800103c <handle_command.2+0x2ec>
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <handle_command.2+0x364>)
 8001038:	220a      	movs	r2, #10
 800103a:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <handle_command.2+0x364>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f107 000c 	add.w	r0, r7, #12
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <handle_command.2+0x368>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	f003 fbe0 	bl	800480c <sniprintf>
			  transmitc(buf);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc4d 	bl	80008f0 <transmitc>
  }
 8001056:	e028      	b.n	80010aa <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b0d      	cmp	r3, #13
 800105c:	d117      	bne.n	800108e <handle_command.2+0x33e>
			  state = ST_MAIN;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <handle_command.2+0x36c>)
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
			  mode_leds[edit_mode] = edit_mode_led;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <handle_command.2+0x370>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <handle_command.2+0x374>)
 800106a:	8811      	ldrh	r1, [r2, #0]
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <handle_command.2+0x378>)
 800106e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  mode_brightness[edit_mode] = edit_mode_brightness;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <handle_command.2+0x370>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <handle_command.2+0x364>)
 8001078:	8811      	ldrh	r1, [r2, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <handle_command.2+0x37c>)
 800107c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  transmitc("Exit edit mode");
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <handle_command.2+0x380>)
 8001082:	f7ff fc35 	bl	80008f0 <transmitc>
			  print_mode_message();
 8001086:	46a4      	mov	ip, r4
 8001088:	f7ff fd9c 	bl	8000bc4 <print_mode_message.0>
  }
 800108c:	e00d      	b.n	80010aa <handle_command.2+0x35a>
			  snprintf(buf, sizeof(buf), "Unknown. %d%%. Enter or choose another: ", edit_mode_brightness);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <handle_command.2+0x364>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	f107 000c 	add.w	r0, r7, #12
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <handle_command.2+0x384>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	f003 fbb7 	bl	800480c <sniprintf>
			  transmitc(buf);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fc24 	bl	80008f0 <transmitc>
  }
 80010a8:	e7ff      	b.n	80010aa <handle_command.2+0x35a>
 80010aa:	bf00      	nop
 80010ac:	3794      	adds	r7, #148	; 0x94
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200010d2 	.word	0x200010d2
 80010b8:	08005410 	.word	0x08005410
 80010bc:	200010ca 	.word	0x200010ca
 80010c0:	200010cc 	.word	0x200010cc
 80010c4:	200010d0 	.word	0x200010d0
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000014 	.word	0x20000014
 80010d0:	08005450 	.word	0x08005450
 80010d4:	08005460 	.word	0x08005460

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fb88 	bl	80047fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <SystemClock_Config+0xd8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <SystemClock_Config+0xd8>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <SystemClock_Config+0xd8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <SystemClock_Config+0xdc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <SystemClock_Config+0xdc>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <SystemClock_Config+0xdc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800114c:	230f      	movs	r3, #15
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001150:	236c      	movs	r3, #108	; 0x6c
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fecd 	bl	8001f00 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800116c:	f000 f824 	bl	80011b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001170:	f000 fe76 	bl	8001e60 <HAL_PWREx_EnableOverDrive>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800117a:	f000 f81d 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f929 	bl	80023f0 <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011a4:	f000 f808 	bl	80011b8 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 fa8e 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM6_DAC_IRQHandler+0x10>)
 800126e:	f001 fc81 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20001120 	.word	0x20001120

0800127c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USART6_IRQHandler+0x10>)
 8001282:	f002 fb93 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20001168 	.word	0x20001168

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f003 fa64 	bl	800478c <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20030000 	.word	0x20030000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200010d4 	.word	0x200010d4
 80012f8:	200011c0 	.word	0x200011c0

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_TIM4_Init+0x110>)
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <MX_TIM4_Init+0x114>)
 8001354:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 44;
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <MX_TIM4_Init+0x110>)
 8001358:	222c      	movs	r2, #44	; 0x2c
 800135a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <MX_TIM4_Init+0x110>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <MX_TIM4_Init+0x110>)
 8001364:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001368:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <MX_TIM4_Init+0x110>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <MX_TIM4_Init+0x110>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001376:	482e      	ldr	r0, [pc, #184]	; (8001430 <MX_TIM4_Init+0x110>)
 8001378:	f001 fa1a 	bl	80027b0 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001382:	f7ff ff19 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	4619      	mov	r1, r3
 8001392:	4827      	ldr	r0, [pc, #156]	; (8001430 <MX_TIM4_Init+0x110>)
 8001394:	f001 fdb8 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800139e:	f7ff ff0b 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <MX_TIM4_Init+0x110>)
 80013a4:	f001 fac4 	bl	8002930 <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013ae:	f7ff ff03 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4619      	mov	r1, r3
 80013c0:	481b      	ldr	r0, [pc, #108]	; (8001430 <MX_TIM4_Init+0x110>)
 80013c2:	f002 f9a1 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013cc:	f7ff fef4 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d0:	2360      	movs	r3, #96	; 0x60
 80013d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2204      	movs	r2, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <MX_TIM4_Init+0x110>)
 80013e8:	f001 fccc 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013f2:	f7ff fee1 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2208      	movs	r2, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM4_Init+0x110>)
 80013fe:	f001 fcc1 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001408:	f7ff fed6 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	220c      	movs	r2, #12
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM4_Init+0x110>)
 8001414:	f001 fcb6 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800141e:	f7ff fecb 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM4_Init+0x110>)
 8001424:	f000 f87c 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200010d8 	.word	0x200010d8
 8001434:	40000800 	.word	0x40000800

08001438 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_TIM6_Init+0x64>)
 8001448:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <MX_TIM6_Init+0x68>)
 800144a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_TIM6_Init+0x64>)
 800144e:	222c      	movs	r2, #44	; 0x2c
 8001450:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_TIM6_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 11999;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_TIM6_Init+0x64>)
 800145a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800145e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_TIM6_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_TIM6_Init+0x64>)
 8001468:	f001 f9a2 	bl	80027b0 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001472:	f7ff fea1 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <MX_TIM6_Init+0x64>)
 8001484:	f002 f940 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800148e:	f7ff fe93 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20001120 	.word	0x20001120
 80014a0:	40001000 	.word	0x40001000

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10e      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014d2:	e01a      	b.n	800150a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_TIM_Base_MspInit+0x78>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d115      	bne.n	800150a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2036      	movs	r0, #54	; 0x36
 8001500:	f000 fa39 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001504:	2036      	movs	r0, #54	; 0x36
 8001506:	f000 fa52 	bl	80019ae <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40000800 	.word	0x40000800
 8001518:	40023800 	.word	0x40023800
 800151c:	40001000 	.word	0x40001000

08001520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_TIM_MspPostInit+0x68>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11e      	bne.n	8001580 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800155e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001570:	2302      	movs	r3, #2
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_TIM_MspPostInit+0x70>)
 800157c:	f000 fac4 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40000800 	.word	0x40000800
 800158c:	40023800 	.word	0x40023800
 8001590:	40020c00 	.word	0x40020c00

08001594 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART6_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART6_UART_Init+0x4c>)
 80015cc:	f002 f92c 	bl	8003828 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f7ff fdef 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20001168 	.word	0x20001168
 80015e4:	40011400 	.word	0x40011400

080015e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_UART_MspInit+0x94>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d133      	bne.n	8001672 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_UART_MspInit+0x98>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x98>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001652:	2308      	movs	r3, #8
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <HAL_UART_MspInit+0x9c>)
 800165e:	f000 fa53 	bl	8001b08 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2047      	movs	r0, #71	; 0x47
 8001668:	f000 f985 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800166c:	2047      	movs	r0, #71	; 0x47
 800166e:	f000 f99e 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40011400 	.word	0x40011400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b2:	f7ff fe23 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f003 f86f 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fa11 	bl	8000ae0 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80016cc:	080054e8 	.word	0x080054e8
  ldr r2, =_sbss
 80016d0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80016d4:	200011c0 	.word	0x200011c0

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f92b 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	200f      	movs	r0, #15
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fd58 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f943 	bl	80019ca <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	f000 f90b 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000002c 	.word	0x2000002c
 8001778:	20000034 	.word	0x20000034
 800177c:	20000030 	.word	0x20000030

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000034 	.word	0x20000034
 80017a4:	200011ac 	.word	0x200011ac

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200011ac 	.word	0x200011ac

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff29 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff3e 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff31 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff feda 	bl	80017a8 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e052      	b.n	8001aba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0216 	bic.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <HAL_DMA_Abort+0x62>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a64:	e013      	b.n	8001a8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a66:	f7ff fe9f 	bl	80017a8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d90c      	bls.n	8001a8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e015      	b.n	8001aba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e4      	bne.n	8001a66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e00c      	b.n	8001afa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e177      	b.n	8001e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8166 	bne.w	8001e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80c0 	beq.w	8001e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a61      	ldr	r2, [pc, #388]	; (8001e30 <HAL_GPIO_Init+0x328>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_GPIO_Init+0x32c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d037      	beq.n	8001d46 <HAL_GPIO_Init+0x23e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_GPIO_Init+0x330>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d031      	beq.n	8001d42 <HAL_GPIO_Init+0x23a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_GPIO_Init+0x334>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02b      	beq.n	8001d3e <HAL_GPIO_Init+0x236>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a55      	ldr	r2, [pc, #340]	; (8001e40 <HAL_GPIO_Init+0x338>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d025      	beq.n	8001d3a <HAL_GPIO_Init+0x232>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x33c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01f      	beq.n	8001d36 <HAL_GPIO_Init+0x22e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_GPIO_Init+0x340>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d019      	beq.n	8001d32 <HAL_GPIO_Init+0x22a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_GPIO_Init+0x344>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0x226>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x348>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00d      	beq.n	8001d2a <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_GPIO_Init+0x34c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_GPIO_Init+0x350>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_GPIO_Init+0x21a>
 8001d1e:	2309      	movs	r3, #9
 8001d20:	e012      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d22:	230a      	movs	r3, #10
 8001d24:	e010      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d26:	2308      	movs	r3, #8
 8001d28:	e00e      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00c      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d2e:	2306      	movs	r3, #6
 8001d30:	e00a      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x240>
 8001d46:	2300      	movs	r3, #0
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x328>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dde:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_GPIO_Init+0x354>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	f67f ae84 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40021400 	.word	0x40021400
 8001e4c:	40021800 	.word	0x40021800
 8001e50:	40021c00 	.word	0x40021c00
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40022400 	.word	0x40022400
 8001e5c:	40013c00 	.word	0x40013c00

08001e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8c:	f7ff fc8c 	bl	80017a8 <HAL_GetTick>
 8001e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e92:	e009      	b.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e94:	f7ff fc88 	bl	80017a8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea2:	d901      	bls.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e01f      	b.n	8001ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebc:	f7ff fc74 	bl	80017a8 <HAL_GetTick>
 8001ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ec2:	e009      	b.n	8001ed8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ec4:	f7ff fc70 	bl	80017a8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed2:	d901      	bls.n	8001ed8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e007      	b.n	8001ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	420e0040 	.word	0x420e0040
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	420e0044 	.word	0x420e0044

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e267      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e242      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b69      	ldr	r3, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fbf6 	bl	80017a8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fbf2 	bl	80017a8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e207      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fbe2 	bl	80017a8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fbde 	bl	80017a8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f3      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c7      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fb97 	bl	80017a8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fb93 	bl	80017a8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a8      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb76 	bl	80017a8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fb72 	bl	80017a8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e187      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fb56 	bl	80017a8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fb52 	bl	80017a8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e167      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fb3f 	bl	80017a8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff fb3b 	bl	80017a8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e150      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b74      	ldr	r3, [pc, #464]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a73      	ldr	r2, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fafb 	bl	80017a8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff faf7 	bl	80017a8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e10c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
 80021dc:	4b64      	ldr	r3, [pc, #400]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x30c>
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 800220c:	4b58      	ldr	r3, [pc, #352]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a57      	ldr	r2, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fabc 	bl	80017a8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fab8 	bl	80017a8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0cb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x334>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff faa6 	bl	80017a8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff faa2 	bl	80017a8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0b5      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a38      	ldr	r2, [pc, #224]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a1 	beq.w	80023e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fa76 	bl	80017a8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff fa72 	bl	80017a8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e087      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491b      	ldr	r1, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff fa4b 	bl	80017a8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff fa47 	bl	80017a8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e05c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x416>
 8002334:	e054      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fa34 	bl	80017a8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fa30 	bl	80017a8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e045      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
 8002362:	e03d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e038      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x4ec>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d028      	beq.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cc      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d044      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e067      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4934      	ldr	r1, [pc, #208]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7ff f962 	bl	80017a8 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7ff f95e 	bl	80017a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e04f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f8c2 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	0800548c 	.word	0x0800548c
 80025b4:	2000002c 	.word	0x2000002c
 80025b8:	20000030 	.word	0x20000030

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b090      	sub	sp, #64	; 0x40
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80a1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e09b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025f4:	e09b      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025fa:	e098      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d028      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	2200      	movs	r2, #0
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	627a      	str	r2, [r7, #36]	; 0x24
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002624:	2100      	movs	r1, #0
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002628:	fb03 f201 	mul.w	r2, r3, r1
 800262c:	2300      	movs	r3, #0
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	4413      	add	r3, r2
 8002634:	4a43      	ldr	r2, [pc, #268]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002636:	fba0 1202 	umull	r1, r2, r0, r2
 800263a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800263c:	460a      	mov	r2, r1
 800263e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002642:	4413      	add	r3, r2
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2200      	movs	r2, #0
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	61fa      	str	r2, [r7, #28]
 800264e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002656:	f7fd fe23 	bl	80002a0 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4613      	mov	r3, r2
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002662:	e053      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	617a      	str	r2, [r7, #20]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002676:	f04f 0b00 	mov.w	fp, #0
 800267a:	4652      	mov	r2, sl
 800267c:	465b      	mov	r3, fp
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ebb2 080a 	subs.w	r8, r2, sl
 8002696:	eb63 090b 	sbc.w	r9, r3, fp
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ae:	ebb2 0408 	subs.w	r4, r2, r8
 80026b2:	eb63 0509 	sbc.w	r5, r3, r9
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	00eb      	lsls	r3, r5, #3
 80026c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c4:	00e2      	lsls	r2, r4, #3
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	eb14 030a 	adds.w	r3, r4, sl
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	eb45 030b 	adc.w	r3, r5, fp
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	2200      	movs	r2, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002700:	f7fd fdce 	bl	80002a0 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800271c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002730:	4618      	mov	r0, r3
 8002732:	3740      	adds	r7, #64	; 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	017d7840 	.word	0x017d7840

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	2000002c 	.word	0x2000002c

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	0800549c 	.word	0x0800549c

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	0800549c 	.word	0x0800549c

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e041      	b.n	8002846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fe64 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 fc7a 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04e      	b.n	8002906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <HAL_TIM_Base_Start_IT+0xc4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d022      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002892:	d01d      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_TIM_Base_Start_IT+0xc8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_TIM_Base_Start_IT+0xcc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00e      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_TIM_Base_Start_IT+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_TIM_Base_Start_IT+0xd8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x80>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_TIM_Base_Start_IT+0xdc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d010      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	e007      	b.n	8002904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40010400 	.word	0x40010400
 8002928:	40014000 	.word	0x40014000
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f839 	bl	80029ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fbba 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_TIM_PWM_Start+0x24>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e022      	b.n	8002a4e <HAL_TIM_PWM_Start+0x6a>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d109      	bne.n	8002a22 <HAL_TIM_PWM_Start+0x3e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e015      	b.n	8002a4e <HAL_TIM_PWM_Start+0x6a>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x58>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e008      	b.n	8002a4e <HAL_TIM_PWM_Start+0x6a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07c      	b.n	8002b50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x82>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a64:	e013      	b.n	8002a8e <HAL_TIM_PWM_Start+0xaa>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x92>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a74:	e00b      	b.n	8002a8e <HAL_TIM_PWM_Start+0xaa>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_PWM_Start+0xa2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	e003      	b.n	8002a8e <HAL_TIM_PWM_Start+0xaa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fe10 	bl	80036bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_TIM_PWM_Start+0x174>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIM_PWM_Start+0xcc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <HAL_TIM_PWM_Start+0x178>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_PWM_Start+0xd0>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_TIM_PWM_Start+0xd2>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_TIM_PWM_Start+0x174>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d01d      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_TIM_PWM_Start+0x17c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_TIM_PWM_Start+0x180>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_TIM_PWM_Start+0x184>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_TIM_PWM_Start+0x178>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_TIM_PWM_Start+0x188>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIM_PWM_Start+0x136>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_TIM_PWM_Start+0x18c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d111      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d010      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	e007      	b.n	8002b4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800
 8002b68:	40000c00 	.word	0x40000c00
 8002b6c:	40014000 	.word	0x40014000
 8002b70:	40001800 	.word	0x40001800

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa77 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa69 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa7a 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa4d 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa3f 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa50 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa23 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa15 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa26 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9f9 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9eb 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f9fc 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd fe5e 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fd78 	bl	8003814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9c1 	bl	80030d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fd42 	bl	8003800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0ae      	b.n	8002f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	f200 809f 	bhi.w	8002ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002ef1 	.word	0x08002ef1
 8002dc0:	08002ef1 	.word	0x08002ef1
 8002dc4:	08002ef1 	.word	0x08002ef1
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	08002ef1 	.word	0x08002ef1
 8002dd0:	08002ef1 	.word	0x08002ef1
 8002dd4:	08002ef1 	.word	0x08002ef1
 8002dd8:	08002e6f 	.word	0x08002e6f
 8002ddc:	08002ef1 	.word	0x08002ef1
 8002de0:	08002ef1 	.word	0x08002ef1
 8002de4:	08002ef1 	.word	0x08002ef1
 8002de8:	08002eaf 	.word	0x08002eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa18 	bl	8003228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6999      	ldr	r1, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	619a      	str	r2, [r3, #24]
      break;
 8002e2a:	e064      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fa68 	bl	8003308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	021a      	lsls	r2, r3, #8
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	619a      	str	r2, [r3, #24]
      break;
 8002e6c:	e043      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fabd 	bl	80033f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0204 	bic.w	r2, r2, #4
 8002e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]
      break;
 8002eac:	e023      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fb11 	bl	80034dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	61da      	str	r2, [r3, #28]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_ConfigClockSource+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0b4      	b.n	800308e <HAL_TIM_ConfigClockSource+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d03e      	beq.n	8002fdc <HAL_TIM_ConfigClockSource+0xd4>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	f200 8087 	bhi.w	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	f000 8086 	beq.w	800307a <HAL_TIM_ConfigClockSource+0x172>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d87f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b70      	cmp	r3, #112	; 0x70
 8002f76:	d01a      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xa6>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d87b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b60      	cmp	r3, #96	; 0x60
 8002f7e:	d050      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x11a>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d877      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d03c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xfa>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d873      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d058      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x13a>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d86f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b30      	cmp	r3, #48	; 0x30
 8002f96:	d064      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d867      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d05a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	e062      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f000 fb5d 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
      break;
 8002fda:	e04f      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f000 fb46 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	461a      	mov	r2, r3
 8003010:	f000 faba 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	; 0x50
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb13 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003020:	e02c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 fad9 	bl	80035e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	; 0x60
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fb03 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003040:	e01c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 fa9a 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	4618      	mov	r0, r3
 800305c:	f000 faf3 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003060:	e00c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f000 faea 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003072:	e003      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e000      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a40      	ldr	r2, [pc, #256]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d108      	bne.n	800313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <TIM_Base_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d027      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d023      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d017      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <TIM_Base_SetConfig+0x128>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00f      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <TIM_Base_SetConfig+0x130>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a25      	ldr	r2, [pc, #148]	; (800321c <TIM_Base_SetConfig+0x134>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <TIM_Base_SetConfig+0x138>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <TIM_Base_SetConfig+0x13c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <TIM_Base_SetConfig+0x124>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	40001800 	.word	0x40001800
 8003220:	40001c00 	.word	0x40001c00
 8003224:	40002000 	.word	0x40002000

08003228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0201 	bic.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 0302 	bic.w	r3, r3, #2
 8003270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a20      	ldr	r2, [pc, #128]	; (8003300 <TIM_OC1_SetConfig+0xd8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_OC1_SetConfig+0x64>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <TIM_OC1_SetConfig+0xdc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10c      	bne.n	80032a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0308 	bic.w	r3, r3, #8
 8003292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <TIM_OC1_SetConfig+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_OC1_SetConfig+0x8e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <TIM_OC1_SetConfig+0xdc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40010000 	.word	0x40010000
 8003304:	40010400 	.word	0x40010400

08003308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0210 	bic.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <TIM_OC2_SetConfig+0xe4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC2_SetConfig+0x68>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <TIM_OC2_SetConfig+0xe8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10d      	bne.n	800338c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a17      	ldr	r2, [pc, #92]	; (80033ec <TIM_OC2_SetConfig+0xe4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_OC2_SetConfig+0x94>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <TIM_OC2_SetConfig+0xe8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d113      	bne.n	80033c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010400 	.word	0x40010400

080033f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800343c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <TIM_OC3_SetConfig+0xe0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_OC3_SetConfig+0x66>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <TIM_OC3_SetConfig+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10d      	bne.n	8003476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <TIM_OC3_SetConfig+0xe0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <TIM_OC3_SetConfig+0x92>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <TIM_OC3_SetConfig+0xe4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800348c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40010400 	.word	0x40010400

080034dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <TIM_OC4_SetConfig+0xa4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC4_SetConfig+0x68>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a11      	ldr	r2, [pc, #68]	; (8003584 <TIM_OC4_SetConfig+0xa8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d109      	bne.n	8003558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40010400 	.word	0x40010400

08003588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 030a 	bic.w	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0307 	orr.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e05a      	b.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d01d      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10c      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40010400 	.word	0x40010400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40001800 	.word	0x40001800

08003800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e03f      	b.n	80038ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd feca 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fd19 	bl	80042a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	4613      	mov	r3, r2
 80038ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d130      	bne.n	800393e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_UART_Transmit_IT+0x26>
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e029      	b.n	8003940 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit_IT+0x38>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e022      	b.n	8003940 <HAL_UART_Transmit_IT+0x7e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2221      	movs	r2, #33	; 0x21
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003938:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b20      	cmp	r3, #32
 8003964:	d11d      	bne.n	80039a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_UART_Receive_IT+0x26>
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e016      	b.n	80039a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_UART_Receive_IT+0x38>
 8003980:	2302      	movs	r3, #2
 8003982:	e00f      	b.n	80039a4 <HAL_UART_Receive_IT+0x58>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	461a      	mov	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 faab 	bl	8003ef4 <UART_Start_Receive_IT>
 800399e:	4603      	mov	r3, r0
 80039a0:	e000      	b.n	80039a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b0ba      	sub	sp, #232	; 0xe8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_UART_IRQHandler+0x66>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fb8f 	bl	800412e <UART_Receive_IT>
      return;
 8003a10:	e256      	b.n	8003ec0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80de 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x22c>
 8003a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80d1 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xae>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_UART_IRQHandler+0xd2>
 8003a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0202 	orr.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xf6>
 8003a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x126>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0208 	orr.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 81ed 	beq.w	8003eb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_UART_IRQHandler+0x14e>
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb1a 	bl	800412e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <HAL_UART_IRQHandler+0x17a>
 8003b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d04f      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa22 	bl	8003f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d141      	bne.n	8003bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1d9      	bne.n	8003b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d013      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4a7d      	ldr	r2, [pc, #500]	; (8003d88 <HAL_UART_IRQHandler+0x3dc>)
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd ff91 	bl	8001ac2 <HAL_DMA_Abort_IT>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00e      	b.n	8003bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f986 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e00a      	b.n	8003bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f982 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e006      	b.n	8003bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f97e 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bd2:	e170      	b.n	8003eb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	bf00      	nop
    return;
 8003bd6:	e16e      	b.n	8003eb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 814a 	bne.w	8003e76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8143 	beq.w	8003e76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 813c 	beq.w	8003e76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	f040 80b4 	bne.w	8003d8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8140 	beq.w	8003eba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c42:	429a      	cmp	r2, r3
 8003c44:	f080 8139 	bcs.w	8003eba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5a:	f000 8088 	beq.w	8003d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1d9      	bne.n	8003c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e1      	bne.n	8003caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3314      	adds	r3, #20
 8003cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3314      	adds	r3, #20
 8003d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e3      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	f023 0310 	bic.w	r3, r3, #16
 8003d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d50:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e3      	bne.n	8003d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd fe3a 	bl	80019e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8ac 	bl	8003edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d84:	e099      	b.n	8003eba <HAL_UART_IRQHandler+0x50e>
 8003d86:	bf00      	nop
 8003d88:	08004037 	.word	0x08004037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 808b 	beq.w	8003ebe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e3      	bne.n	8003db2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e3      	bne.n	8003dea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0310 	bic.w	r3, r3, #16
 8003e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e54:	61fa      	str	r2, [r7, #28]
 8003e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	617b      	str	r3, [r7, #20]
   return(result);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e3      	bne.n	8003e30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f834 	bl	8003edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e74:	e023      	b.n	8003ebe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_UART_IRQHandler+0x4ea>
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8e5 	bl	800405e <UART_Transmit_IT>
    return;
 8003e94:	e014      	b.n	8003ec0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x514>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f925 	bl	80040fe <UART_EndTransmit_IT>
    return;
 8003eb4:	e004      	b.n	8003ec0 <HAL_UART_IRQHandler+0x514>
    return;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8003ebe:	bf00      	nop
  }
}
 8003ec0:	37e8      	adds	r7, #232	; 0xe8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2222      	movs	r2, #34	; 0x22
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0220 	orr.w	r2, r2, #32
 8003f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b095      	sub	sp, #84	; 0x54
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f98:	643a      	str	r2, [r7, #64]	; 0x40
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d119      	bne.n	800401c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004008:	61ba      	str	r2, [r7, #24]
 800400a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	613b      	str	r3, [r7, #16]
   return(result);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800402a:	bf00      	nop
 800402c:	3754      	adds	r7, #84	; 0x54
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff39 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b21      	cmp	r3, #33	; 0x21
 8004070:	d13e      	bne.n	80040f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d114      	bne.n	80040a6 <UART_Transmit_IT+0x48>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d110      	bne.n	80040a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	e008      	b.n	80040b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6211      	str	r1, [r2, #32]
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fc1a 	bl	8000958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b08c      	sub	sp, #48	; 0x30
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b22      	cmp	r3, #34	; 0x22
 8004140:	f040 80ab 	bne.w	800429a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d117      	bne.n	800417e <UART_Receive_IT+0x50>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416c:	b29a      	uxth	r2, r3
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
 800417c:	e026      	b.n	80041cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004190:	d007      	beq.n	80041a2 <UART_Receive_IT+0x74>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <UART_Receive_IT+0x82>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e008      	b.n	80041c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4619      	mov	r1, r3
 80041da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d15a      	bne.n	8004296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0220 	bic.w	r2, r2, #32
 80041ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	d135      	bne.n	800428c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	623a      	str	r2, [r7, #32]
 8004248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	69f9      	ldr	r1, [r7, #28]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	61bb      	str	r3, [r7, #24]
   return(result);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d10a      	bne.n	800427e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fe29 	bl	8003edc <HAL_UARTEx_RxEventCallback>
 800428a:	e002      	b.n	8004292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fc fb4d 	bl	800092c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e002      	b.n	800429c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3730      	adds	r7, #48	; 0x30
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b0c0      	sub	sp, #256	; 0x100
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	ea40 0301 	orr.w	r3, r0, r1
 80042cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042fc:	f021 010c 	bic.w	r1, r1, #12
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	6999      	ldr	r1, [r3, #24]
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	ea40 0301 	orr.w	r3, r0, r1
 800432a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8f      	ldr	r3, [pc, #572]	; (8004570 <UART_SetConfig+0x2cc>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d005      	beq.n	8004344 <UART_SetConfig+0xa0>
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8d      	ldr	r3, [pc, #564]	; (8004574 <UART_SetConfig+0x2d0>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d104      	bne.n	800434e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fa20 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8004348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800434c:	e003      	b.n	8004356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7fe fa07 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8004352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	f040 810c 	bne.w	800457c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800436e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	1891      	adds	r1, r2, r2
 800437c:	65b9      	str	r1, [r7, #88]	; 0x58
 800437e:	415b      	adcs	r3, r3
 8004380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004386:	4621      	mov	r1, r4
 8004388:	eb12 0801 	adds.w	r8, r2, r1
 800438c:	4629      	mov	r1, r5
 800438e:	eb43 0901 	adc.w	r9, r3, r1
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800439e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a6:	4690      	mov	r8, r2
 80043a8:	4699      	mov	r9, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	eb18 0303 	adds.w	r3, r8, r3
 80043b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043b4:	462b      	mov	r3, r5
 80043b6:	eb49 0303 	adc.w	r3, r9, r3
 80043ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043d2:	460b      	mov	r3, r1
 80043d4:	18db      	adds	r3, r3, r3
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
 80043d8:	4613      	mov	r3, r2
 80043da:	eb42 0303 	adc.w	r3, r2, r3
 80043de:	657b      	str	r3, [r7, #84]	; 0x54
 80043e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043e8:	f7fb ff5a 	bl	80002a0 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b61      	ldr	r3, [pc, #388]	; (8004578 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	64b9      	str	r1, [r7, #72]	; 0x48
 8004414:	415b      	adcs	r3, r3
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800441c:	4641      	mov	r1, r8
 800441e:	eb12 0a01 	adds.w	sl, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0b01 	adc.w	fp, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443c:	4692      	mov	sl, r2
 800443e:	469b      	mov	fp, r3
 8004440:	4643      	mov	r3, r8
 8004442:	eb1a 0303 	adds.w	r3, sl, r3
 8004446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800444a:	464b      	mov	r3, r9
 800444c:	eb4b 0303 	adc.w	r3, fp, r3
 8004450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004468:	460b      	mov	r3, r1
 800446a:	18db      	adds	r3, r3, r3
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
 800446e:	4613      	mov	r3, r2
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
 8004476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800447a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800447e:	f7fb ff0f 	bl	80002a0 <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4611      	mov	r1, r2
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2301 	umull	r2, r3, r3, r1
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2264      	movs	r2, #100	; 0x64
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	1acb      	subs	r3, r1, r3
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800449e:	4b36      	ldr	r3, [pc, #216]	; (8004578 <UART_SetConfig+0x2d4>)
 80044a0:	fba3 2302 	umull	r2, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ac:	441c      	add	r4, r3
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044c8:	415b      	adcs	r3, r3
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6339      	str	r1, [r7, #48]	; 0x30
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800451c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004524:	460b      	mov	r3, r1
 8004526:	18db      	adds	r3, r3, r3
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	4613      	mov	r3, r2
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800453a:	f7fb feb1 	bl	80002a0 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <UART_SetConfig+0x2d4>)
 8004544:	fba3 1302 	umull	r1, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	2164      	movs	r1, #100	; 0x64
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <UART_SetConfig+0x2d4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	f003 0207 	and.w	r2, r3, #7
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4422      	add	r2, r4
 800456a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800456c:	e105      	b.n	800477a <UART_SetConfig+0x4d6>
 800456e:	bf00      	nop
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800457c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800458a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800458e:	4642      	mov	r2, r8
 8004590:	464b      	mov	r3, r9
 8004592:	1891      	adds	r1, r2, r2
 8004594:	6239      	str	r1, [r7, #32]
 8004596:	415b      	adcs	r3, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800459e:	4641      	mov	r1, r8
 80045a0:	1854      	adds	r4, r2, r1
 80045a2:	4649      	mov	r1, r9
 80045a4:	eb43 0501 	adc.w	r5, r3, r1
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	00eb      	lsls	r3, r5, #3
 80045b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	4614      	mov	r4, r2
 80045ba:	461d      	mov	r5, r3
 80045bc:	4643      	mov	r3, r8
 80045be:	18e3      	adds	r3, r4, r3
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045c4:	464b      	mov	r3, r9
 80045c6:	eb45 0303 	adc.w	r3, r5, r3
 80045ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ea:	4629      	mov	r1, r5
 80045ec:	008b      	lsls	r3, r1, #2
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f4:	4621      	mov	r1, r4
 80045f6:	008a      	lsls	r2, r1, #2
 80045f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045fc:	f7fb fe50 	bl	80002a0 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b60      	ldr	r3, [pc, #384]	; (8004788 <UART_SetConfig+0x4e4>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011c      	lsls	r4, r3, #4
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800461c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	61b9      	str	r1, [r7, #24]
 8004628:	415b      	adcs	r3, r3
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6139      	str	r1, [r7, #16]
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	67bb      	str	r3, [r7, #120]	; 0x78
 800467a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800469a:	f7fb fe01 	bl	80002a0 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b39      	ldr	r3, [pc, #228]	; (8004788 <UART_SetConfig+0x4e4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a34      	ldr	r2, [pc, #208]	; (8004788 <UART_SetConfig+0x4e4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c2:	441c      	add	r4, r3
 80046c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c8:	2200      	movs	r2, #0
 80046ca:	673b      	str	r3, [r7, #112]	; 0x70
 80046cc:	677a      	str	r2, [r7, #116]	; 0x74
 80046ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046d2:	4642      	mov	r2, r8
 80046d4:	464b      	mov	r3, r9
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	415b      	adcs	r3, r3
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e2:	4641      	mov	r1, r8
 80046e4:	1851      	adds	r1, r2, r1
 80046e6:	6039      	str	r1, [r7, #0]
 80046e8:	4649      	mov	r1, r9
 80046ea:	414b      	adcs	r3, r1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046fa:	4659      	mov	r1, fp
 80046fc:	00cb      	lsls	r3, r1, #3
 80046fe:	4651      	mov	r1, sl
 8004700:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004704:	4651      	mov	r1, sl
 8004706:	00ca      	lsls	r2, r1, #3
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	4603      	mov	r3, r0
 800470e:	4642      	mov	r2, r8
 8004710:	189b      	adds	r3, r3, r2
 8004712:	66bb      	str	r3, [r7, #104]	; 0x68
 8004714:	464b      	mov	r3, r9
 8004716:	460a      	mov	r2, r1
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	663b      	str	r3, [r7, #96]	; 0x60
 8004728:	667a      	str	r2, [r7, #100]	; 0x64
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004736:	4649      	mov	r1, r9
 8004738:	008b      	lsls	r3, r1, #2
 800473a:	4641      	mov	r1, r8
 800473c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004740:	4641      	mov	r1, r8
 8004742:	008a      	lsls	r2, r1, #2
 8004744:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004748:	f7fb fdaa 	bl	80002a0 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <UART_SetConfig+0x4e4>)
 8004752:	fba3 1302 	umull	r1, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2164      	movs	r1, #100	; 0x64
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	3332      	adds	r3, #50	; 0x32
 8004764:	4a08      	ldr	r2, [pc, #32]	; (8004788 <UART_SetConfig+0x4e4>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4422      	add	r2, r4
 8004778:	609a      	str	r2, [r3, #8]
}
 800477a:	bf00      	nop
 800477c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000038 	.word	0x20000038

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4d0d      	ldr	r5, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2600      	movs	r6, #0
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f000 fca2 	bl	80050f4 <_init>
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2600      	movs	r6, #0
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	080054e0 	.word	0x080054e0
 80047d4:	080054e0 	.word	0x080054e0
 80047d8:	080054e0 	.word	0x080054e0
 80047dc:	080054e4 	.word	0x080054e4

080047e0 <memcpy>:
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047e8:	d100      	bne.n	80047ec <memcpy+0xc>
 80047ea:	4770      	bx	lr
 80047ec:	b510      	push	{r4, lr}
 80047ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f6:	4291      	cmp	r1, r2
 80047f8:	d1f9      	bne.n	80047ee <memcpy+0xe>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <memset>:
 80047fc:	4402      	add	r2, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	d100      	bne.n	8004806 <memset+0xa>
 8004804:	4770      	bx	lr
 8004806:	f803 1b01 	strb.w	r1, [r3], #1
 800480a:	e7f9      	b.n	8004800 <memset+0x4>

0800480c <sniprintf>:
 800480c:	b40c      	push	{r2, r3}
 800480e:	b530      	push	{r4, r5, lr}
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <sniprintf+0x64>)
 8004812:	1e0c      	subs	r4, r1, #0
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	b09d      	sub	sp, #116	; 0x74
 8004818:	da08      	bge.n	800482c <sniprintf+0x20>
 800481a:	238b      	movs	r3, #139	; 0x8b
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004822:	b01d      	add	sp, #116	; 0x74
 8004824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004828:	b002      	add	sp, #8
 800482a:	4770      	bx	lr
 800482c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004830:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004834:	bf14      	ite	ne
 8004836:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800483a:	4623      	moveq	r3, r4
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	9307      	str	r3, [sp, #28]
 8004840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004844:	9002      	str	r0, [sp, #8]
 8004846:	9006      	str	r0, [sp, #24]
 8004848:	f8ad 3016 	strh.w	r3, [sp, #22]
 800484c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800484e:	ab21      	add	r3, sp, #132	; 0x84
 8004850:	a902      	add	r1, sp, #8
 8004852:	4628      	mov	r0, r5
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	f000 f869 	bl	800492c <_svfiprintf_r>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	bfbc      	itt	lt
 800485e:	238b      	movlt	r3, #139	; 0x8b
 8004860:	602b      	strlt	r3, [r5, #0]
 8004862:	2c00      	cmp	r4, #0
 8004864:	d0dd      	beq.n	8004822 <sniprintf+0x16>
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	e7d9      	b.n	8004822 <sniprintf+0x16>
 800486e:	bf00      	nop
 8004870:	20000038 	.word	0x20000038

08004874 <__ssputs_r>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	688e      	ldr	r6, [r1, #8]
 800487a:	429e      	cmp	r6, r3
 800487c:	4682      	mov	sl, r0
 800487e:	460c      	mov	r4, r1
 8004880:	4690      	mov	r8, r2
 8004882:	461f      	mov	r7, r3
 8004884:	d838      	bhi.n	80048f8 <__ssputs_r+0x84>
 8004886:	898a      	ldrh	r2, [r1, #12]
 8004888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800488c:	d032      	beq.n	80048f4 <__ssputs_r+0x80>
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	6909      	ldr	r1, [r1, #16]
 8004892:	eba5 0901 	sub.w	r9, r5, r1
 8004896:	6965      	ldr	r5, [r4, #20]
 8004898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800489c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048a0:	3301      	adds	r3, #1
 80048a2:	444b      	add	r3, r9
 80048a4:	106d      	asrs	r5, r5, #1
 80048a6:	429d      	cmp	r5, r3
 80048a8:	bf38      	it	cc
 80048aa:	461d      	movcc	r5, r3
 80048ac:	0553      	lsls	r3, r2, #21
 80048ae:	d531      	bpl.n	8004914 <__ssputs_r+0xa0>
 80048b0:	4629      	mov	r1, r5
 80048b2:	f000 fb55 	bl	8004f60 <_malloc_r>
 80048b6:	4606      	mov	r6, r0
 80048b8:	b950      	cbnz	r0, 80048d0 <__ssputs_r+0x5c>
 80048ba:	230c      	movs	r3, #12
 80048bc:	f8ca 3000 	str.w	r3, [sl]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	464a      	mov	r2, r9
 80048d4:	f7ff ff84 	bl	80047e0 <memcpy>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	6126      	str	r6, [r4, #16]
 80048e6:	6165      	str	r5, [r4, #20]
 80048e8:	444e      	add	r6, r9
 80048ea:	eba5 0509 	sub.w	r5, r5, r9
 80048ee:	6026      	str	r6, [r4, #0]
 80048f0:	60a5      	str	r5, [r4, #8]
 80048f2:	463e      	mov	r6, r7
 80048f4:	42be      	cmp	r6, r7
 80048f6:	d900      	bls.n	80048fa <__ssputs_r+0x86>
 80048f8:	463e      	mov	r6, r7
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	4632      	mov	r2, r6
 80048fe:	4641      	mov	r1, r8
 8004900:	f000 faa8 	bl	8004e54 <memmove>
 8004904:	68a3      	ldr	r3, [r4, #8]
 8004906:	1b9b      	subs	r3, r3, r6
 8004908:	60a3      	str	r3, [r4, #8]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	4433      	add	r3, r6
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	2000      	movs	r0, #0
 8004912:	e7db      	b.n	80048cc <__ssputs_r+0x58>
 8004914:	462a      	mov	r2, r5
 8004916:	f000 fb97 	bl	8005048 <_realloc_r>
 800491a:	4606      	mov	r6, r0
 800491c:	2800      	cmp	r0, #0
 800491e:	d1e1      	bne.n	80048e4 <__ssputs_r+0x70>
 8004920:	6921      	ldr	r1, [r4, #16]
 8004922:	4650      	mov	r0, sl
 8004924:	f000 fab0 	bl	8004e88 <_free_r>
 8004928:	e7c7      	b.n	80048ba <__ssputs_r+0x46>
	...

0800492c <_svfiprintf_r>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	4698      	mov	r8, r3
 8004932:	898b      	ldrh	r3, [r1, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	b09d      	sub	sp, #116	; 0x74
 8004938:	4607      	mov	r7, r0
 800493a:	460d      	mov	r5, r1
 800493c:	4614      	mov	r4, r2
 800493e:	d50e      	bpl.n	800495e <_svfiprintf_r+0x32>
 8004940:	690b      	ldr	r3, [r1, #16]
 8004942:	b963      	cbnz	r3, 800495e <_svfiprintf_r+0x32>
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	f000 fb0b 	bl	8004f60 <_malloc_r>
 800494a:	6028      	str	r0, [r5, #0]
 800494c:	6128      	str	r0, [r5, #16]
 800494e:	b920      	cbnz	r0, 800495a <_svfiprintf_r+0x2e>
 8004950:	230c      	movs	r3, #12
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004958:	e0d1      	b.n	8004afe <_svfiprintf_r+0x1d2>
 800495a:	2340      	movs	r3, #64	; 0x40
 800495c:	616b      	str	r3, [r5, #20]
 800495e:	2300      	movs	r3, #0
 8004960:	9309      	str	r3, [sp, #36]	; 0x24
 8004962:	2320      	movs	r3, #32
 8004964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004968:	f8cd 800c 	str.w	r8, [sp, #12]
 800496c:	2330      	movs	r3, #48	; 0x30
 800496e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b18 <_svfiprintf_r+0x1ec>
 8004972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004976:	f04f 0901 	mov.w	r9, #1
 800497a:	4623      	mov	r3, r4
 800497c:	469a      	mov	sl, r3
 800497e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004982:	b10a      	cbz	r2, 8004988 <_svfiprintf_r+0x5c>
 8004984:	2a25      	cmp	r2, #37	; 0x25
 8004986:	d1f9      	bne.n	800497c <_svfiprintf_r+0x50>
 8004988:	ebba 0b04 	subs.w	fp, sl, r4
 800498c:	d00b      	beq.n	80049a6 <_svfiprintf_r+0x7a>
 800498e:	465b      	mov	r3, fp
 8004990:	4622      	mov	r2, r4
 8004992:	4629      	mov	r1, r5
 8004994:	4638      	mov	r0, r7
 8004996:	f7ff ff6d 	bl	8004874 <__ssputs_r>
 800499a:	3001      	adds	r0, #1
 800499c:	f000 80aa 	beq.w	8004af4 <_svfiprintf_r+0x1c8>
 80049a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a2:	445a      	add	r2, fp
 80049a4:	9209      	str	r2, [sp, #36]	; 0x24
 80049a6:	f89a 3000 	ldrb.w	r3, [sl]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80a2 	beq.w	8004af4 <_svfiprintf_r+0x1c8>
 80049b0:	2300      	movs	r3, #0
 80049b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ba:	f10a 0a01 	add.w	sl, sl, #1
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	9307      	str	r3, [sp, #28]
 80049c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049c6:	931a      	str	r3, [sp, #104]	; 0x68
 80049c8:	4654      	mov	r4, sl
 80049ca:	2205      	movs	r2, #5
 80049cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d0:	4851      	ldr	r0, [pc, #324]	; (8004b18 <_svfiprintf_r+0x1ec>)
 80049d2:	f7fb fc15 	bl	8000200 <memchr>
 80049d6:	9a04      	ldr	r2, [sp, #16]
 80049d8:	b9d8      	cbnz	r0, 8004a12 <_svfiprintf_r+0xe6>
 80049da:	06d0      	lsls	r0, r2, #27
 80049dc:	bf44      	itt	mi
 80049de:	2320      	movmi	r3, #32
 80049e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e4:	0711      	lsls	r1, r2, #28
 80049e6:	bf44      	itt	mi
 80049e8:	232b      	movmi	r3, #43	; 0x2b
 80049ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ee:	f89a 3000 	ldrb.w	r3, [sl]
 80049f2:	2b2a      	cmp	r3, #42	; 0x2a
 80049f4:	d015      	beq.n	8004a22 <_svfiprintf_r+0xf6>
 80049f6:	9a07      	ldr	r2, [sp, #28]
 80049f8:	4654      	mov	r4, sl
 80049fa:	2000      	movs	r0, #0
 80049fc:	f04f 0c0a 	mov.w	ip, #10
 8004a00:	4621      	mov	r1, r4
 8004a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a06:	3b30      	subs	r3, #48	; 0x30
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	d94e      	bls.n	8004aaa <_svfiprintf_r+0x17e>
 8004a0c:	b1b0      	cbz	r0, 8004a3c <_svfiprintf_r+0x110>
 8004a0e:	9207      	str	r2, [sp, #28]
 8004a10:	e014      	b.n	8004a3c <_svfiprintf_r+0x110>
 8004a12:	eba0 0308 	sub.w	r3, r0, r8
 8004a16:	fa09 f303 	lsl.w	r3, r9, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	9304      	str	r3, [sp, #16]
 8004a1e:	46a2      	mov	sl, r4
 8004a20:	e7d2      	b.n	80049c8 <_svfiprintf_r+0x9c>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	1d19      	adds	r1, r3, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	9103      	str	r1, [sp, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfbb      	ittet	lt
 8004a2e:	425b      	neglt	r3, r3
 8004a30:	f042 0202 	orrlt.w	r2, r2, #2
 8004a34:	9307      	strge	r3, [sp, #28]
 8004a36:	9307      	strlt	r3, [sp, #28]
 8004a38:	bfb8      	it	lt
 8004a3a:	9204      	strlt	r2, [sp, #16]
 8004a3c:	7823      	ldrb	r3, [r4, #0]
 8004a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a40:	d10c      	bne.n	8004a5c <_svfiprintf_r+0x130>
 8004a42:	7863      	ldrb	r3, [r4, #1]
 8004a44:	2b2a      	cmp	r3, #42	; 0x2a
 8004a46:	d135      	bne.n	8004ab4 <_svfiprintf_r+0x188>
 8004a48:	9b03      	ldr	r3, [sp, #12]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	9203      	str	r2, [sp, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bfb8      	it	lt
 8004a54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a58:	3402      	adds	r4, #2
 8004a5a:	9305      	str	r3, [sp, #20]
 8004a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b28 <_svfiprintf_r+0x1fc>
 8004a60:	7821      	ldrb	r1, [r4, #0]
 8004a62:	2203      	movs	r2, #3
 8004a64:	4650      	mov	r0, sl
 8004a66:	f7fb fbcb 	bl	8000200 <memchr>
 8004a6a:	b140      	cbz	r0, 8004a7e <_svfiprintf_r+0x152>
 8004a6c:	2340      	movs	r3, #64	; 0x40
 8004a6e:	eba0 000a 	sub.w	r0, r0, sl
 8004a72:	fa03 f000 	lsl.w	r0, r3, r0
 8004a76:	9b04      	ldr	r3, [sp, #16]
 8004a78:	4303      	orrs	r3, r0
 8004a7a:	3401      	adds	r4, #1
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a82:	4826      	ldr	r0, [pc, #152]	; (8004b1c <_svfiprintf_r+0x1f0>)
 8004a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a88:	2206      	movs	r2, #6
 8004a8a:	f7fb fbb9 	bl	8000200 <memchr>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d038      	beq.n	8004b04 <_svfiprintf_r+0x1d8>
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <_svfiprintf_r+0x1f4>)
 8004a94:	bb1b      	cbnz	r3, 8004ade <_svfiprintf_r+0x1b2>
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	3307      	adds	r3, #7
 8004a9a:	f023 0307 	bic.w	r3, r3, #7
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	9303      	str	r3, [sp, #12]
 8004aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa4:	4433      	add	r3, r6
 8004aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa8:	e767      	b.n	800497a <_svfiprintf_r+0x4e>
 8004aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aae:	460c      	mov	r4, r1
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	e7a5      	b.n	8004a00 <_svfiprintf_r+0xd4>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	3401      	adds	r4, #1
 8004ab8:	9305      	str	r3, [sp, #20]
 8004aba:	4619      	mov	r1, r3
 8004abc:	f04f 0c0a 	mov.w	ip, #10
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ac6:	3a30      	subs	r2, #48	; 0x30
 8004ac8:	2a09      	cmp	r2, #9
 8004aca:	d903      	bls.n	8004ad4 <_svfiprintf_r+0x1a8>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0c5      	beq.n	8004a5c <_svfiprintf_r+0x130>
 8004ad0:	9105      	str	r1, [sp, #20]
 8004ad2:	e7c3      	b.n	8004a5c <_svfiprintf_r+0x130>
 8004ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ad8:	4604      	mov	r4, r0
 8004ada:	2301      	movs	r3, #1
 8004adc:	e7f0      	b.n	8004ac0 <_svfiprintf_r+0x194>
 8004ade:	ab03      	add	r3, sp, #12
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <_svfiprintf_r+0x1f8>)
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f3af 8000 	nop.w
 8004aee:	1c42      	adds	r2, r0, #1
 8004af0:	4606      	mov	r6, r0
 8004af2:	d1d6      	bne.n	8004aa2 <_svfiprintf_r+0x176>
 8004af4:	89ab      	ldrh	r3, [r5, #12]
 8004af6:	065b      	lsls	r3, r3, #25
 8004af8:	f53f af2c 	bmi.w	8004954 <_svfiprintf_r+0x28>
 8004afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afe:	b01d      	add	sp, #116	; 0x74
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	ab03      	add	r3, sp, #12
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <_svfiprintf_r+0x1f8>)
 8004b0c:	a904      	add	r1, sp, #16
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f000 f87a 	bl	8004c08 <_printf_i>
 8004b14:	e7eb      	b.n	8004aee <_svfiprintf_r+0x1c2>
 8004b16:	bf00      	nop
 8004b18:	080054a4 	.word	0x080054a4
 8004b1c:	080054ae 	.word	0x080054ae
 8004b20:	00000000 	.word	0x00000000
 8004b24:	08004875 	.word	0x08004875
 8004b28:	080054aa 	.word	0x080054aa

08004b2c <_printf_common>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	4616      	mov	r6, r2
 8004b32:	4699      	mov	r9, r3
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfb8      	it	lt
 8004b40:	4613      	movlt	r3, r2
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_printf_common+0x26>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	0699      	lsls	r1, r3, #26
 8004b56:	bf42      	ittt	mi
 8004b58:	6833      	ldrmi	r3, [r6, #0]
 8004b5a:	3302      	addmi	r3, #2
 8004b5c:	6033      	strmi	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d106      	bne.n	8004b74 <_printf_common+0x48>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	6832      	ldr	r2, [r6, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc26      	bgt.n	8004bc2 <_printf_common+0x96>
 8004b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b78:	1e13      	subs	r3, r2, #0
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	bf18      	it	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d42b      	bmi.n	8004bdc <_printf_common+0xb0>
 8004b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b88:	4649      	mov	r1, r9
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c0      	blx	r8
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d01e      	beq.n	8004bd0 <_printf_common+0xa4>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	68e5      	ldr	r5, [r4, #12]
 8004b96:	6832      	ldr	r2, [r6, #0]
 8004b98:	f003 0306 	and.w	r3, r3, #6
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	bf08      	it	eq
 8004ba0:	1aad      	subeq	r5, r5, r2
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	bf0c      	ite	eq
 8004ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bac:	2500      	movne	r5, #0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfc4      	itt	gt
 8004bb2:	1a9b      	subgt	r3, r3, r2
 8004bb4:	18ed      	addgt	r5, r5, r3
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xc8>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xa8>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xac>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c6      	b.n	8004b6a <_printf_common+0x3e>
 8004bdc:	18e1      	adds	r1, r4, r3
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	2030      	movs	r0, #48	; 0x30
 8004be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be6:	4422      	add	r2, r4
 8004be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	e7c7      	b.n	8004b84 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa4>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x8e>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c10:	2f78      	cmp	r7, #120	; 0x78
 8004c12:	4691      	mov	r9, r2
 8004c14:	4680      	mov	r8, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	; 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d8 	beq.w	8004dda <_printf_i+0x1d2>
 8004c2a:	2f58      	cmp	r7, #88	; 0x58
 8004c2c:	f000 80a3 	beq.w	8004d76 <_printf_i+0x16e>
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004dc1 	.word	0x08004dc1
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004da3 	.word	0x08004da3
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004de3 	.word	0x08004de3
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004dab 	.word	0x08004dab
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	602a      	str	r2, [r5, #0]
 8004ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0a3      	b.n	8004dfc <_printf_i+0x1f4>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	6829      	ldr	r1, [r5, #0]
 8004cb8:	0606      	lsls	r6, r0, #24
 8004cba:	f101 0304 	add.w	r3, r1, #4
 8004cbe:	d50a      	bpl.n	8004cd6 <_printf_i+0xce>
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	da03      	bge.n	8004cd0 <_printf_i+0xc8>
 8004cc8:	232d      	movs	r3, #45	; 0x2d
 8004cca:	4276      	negs	r6, r6
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	485e      	ldr	r0, [pc, #376]	; (8004e4c <_printf_i+0x244>)
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	e019      	b.n	8004d0a <_printf_i+0x102>
 8004cd6:	680e      	ldr	r6, [r1, #0]
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cde:	bf18      	it	ne
 8004ce0:	b236      	sxthne	r6, r6
 8004ce2:	e7ef      	b.n	8004cc4 <_printf_i+0xbc>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	0601      	lsls	r1, r0, #24
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0xec>
 8004cf0:	681e      	ldr	r6, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0xf2>
 8004cf4:	0646      	lsls	r6, r0, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0xe8>
 8004cf8:	881e      	ldrh	r6, [r3, #0]
 8004cfa:	4854      	ldr	r0, [pc, #336]	; (8004e4c <_printf_i+0x244>)
 8004cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8004cfe:	bf0c      	ite	eq
 8004d00:	2308      	moveq	r3, #8
 8004d02:	230a      	movne	r3, #10
 8004d04:	2100      	movs	r1, #0
 8004d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0a:	6865      	ldr	r5, [r4, #4]
 8004d0c:	60a5      	str	r5, [r4, #8]
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	bfa2      	ittt	ge
 8004d12:	6821      	ldrge	r1, [r4, #0]
 8004d14:	f021 0104 	bicge.w	r1, r1, #4
 8004d18:	6021      	strge	r1, [r4, #0]
 8004d1a:	b90e      	cbnz	r6, 8004d20 <_printf_i+0x118>
 8004d1c:	2d00      	cmp	r5, #0
 8004d1e:	d04d      	beq.n	8004dbc <_printf_i+0x1b4>
 8004d20:	4615      	mov	r5, r2
 8004d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d26:	fb03 6711 	mls	r7, r3, r1, r6
 8004d2a:	5dc7      	ldrb	r7, [r0, r7]
 8004d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d30:	4637      	mov	r7, r6
 8004d32:	42bb      	cmp	r3, r7
 8004d34:	460e      	mov	r6, r1
 8004d36:	d9f4      	bls.n	8004d22 <_printf_i+0x11a>
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d10b      	bne.n	8004d54 <_printf_i+0x14c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07de      	lsls	r6, r3, #31
 8004d40:	d508      	bpl.n	8004d54 <_printf_i+0x14c>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	6861      	ldr	r1, [r4, #4]
 8004d46:	4299      	cmp	r1, r3
 8004d48:	bfde      	ittt	le
 8004d4a:	2330      	movle	r3, #48	; 0x30
 8004d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d54:	1b52      	subs	r2, r2, r5
 8004d56:	6122      	str	r2, [r4, #16]
 8004d58:	f8cd a000 	str.w	sl, [sp]
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	aa03      	add	r2, sp, #12
 8004d60:	4621      	mov	r1, r4
 8004d62:	4640      	mov	r0, r8
 8004d64:	f7ff fee2 	bl	8004b2c <_printf_common>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d14c      	bne.n	8004e06 <_printf_i+0x1fe>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d70:	b004      	add	sp, #16
 8004d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d76:	4835      	ldr	r0, [pc, #212]	; (8004e4c <_printf_i+0x244>)
 8004d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d7c:	6829      	ldr	r1, [r5, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d84:	6029      	str	r1, [r5, #0]
 8004d86:	061d      	lsls	r5, r3, #24
 8004d88:	d514      	bpl.n	8004db4 <_printf_i+0x1ac>
 8004d8a:	07df      	lsls	r7, r3, #31
 8004d8c:	bf44      	itt	mi
 8004d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d92:	6023      	strmi	r3, [r4, #0]
 8004d94:	b91e      	cbnz	r6, 8004d9e <_printf_i+0x196>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f023 0320 	bic.w	r3, r3, #32
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	2310      	movs	r3, #16
 8004da0:	e7b0      	b.n	8004d04 <_printf_i+0xfc>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	2378      	movs	r3, #120	; 0x78
 8004dac:	4828      	ldr	r0, [pc, #160]	; (8004e50 <_printf_i+0x248>)
 8004dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db2:	e7e3      	b.n	8004d7c <_printf_i+0x174>
 8004db4:	0659      	lsls	r1, r3, #25
 8004db6:	bf48      	it	mi
 8004db8:	b2b6      	uxthmi	r6, r6
 8004dba:	e7e6      	b.n	8004d8a <_printf_i+0x182>
 8004dbc:	4615      	mov	r5, r2
 8004dbe:	e7bb      	b.n	8004d38 <_printf_i+0x130>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	6826      	ldr	r6, [r4, #0]
 8004dc4:	6961      	ldr	r1, [r4, #20]
 8004dc6:	1d18      	adds	r0, r3, #4
 8004dc8:	6028      	str	r0, [r5, #0]
 8004dca:	0635      	lsls	r5, r6, #24
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	d501      	bpl.n	8004dd4 <_printf_i+0x1cc>
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <_printf_i+0x1d2>
 8004dd4:	0670      	lsls	r0, r6, #25
 8004dd6:	d5fb      	bpl.n	8004dd0 <_printf_i+0x1c8>
 8004dd8:	8019      	strh	r1, [r3, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	4615      	mov	r5, r2
 8004de0:	e7ba      	b.n	8004d58 <_printf_i+0x150>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	602a      	str	r2, [r5, #0]
 8004de8:	681d      	ldr	r5, [r3, #0]
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	2100      	movs	r1, #0
 8004dee:	4628      	mov	r0, r5
 8004df0:	f7fb fa06 	bl	8000200 <memchr>
 8004df4:	b108      	cbz	r0, 8004dfa <_printf_i+0x1f2>
 8004df6:	1b40      	subs	r0, r0, r5
 8004df8:	6060      	str	r0, [r4, #4]
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e04:	e7a8      	b.n	8004d58 <_printf_i+0x150>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	47d0      	blx	sl
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0ab      	beq.n	8004d6c <_printf_i+0x164>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	079b      	lsls	r3, r3, #30
 8004e18:	d413      	bmi.n	8004e42 <_printf_i+0x23a>
 8004e1a:	68e0      	ldr	r0, [r4, #12]
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	4298      	cmp	r0, r3
 8004e20:	bfb8      	it	lt
 8004e22:	4618      	movlt	r0, r3
 8004e24:	e7a4      	b.n	8004d70 <_printf_i+0x168>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4632      	mov	r2, r6
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	47d0      	blx	sl
 8004e30:	3001      	adds	r0, #1
 8004e32:	d09b      	beq.n	8004d6c <_printf_i+0x164>
 8004e34:	3501      	adds	r5, #1
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	9903      	ldr	r1, [sp, #12]
 8004e3a:	1a5b      	subs	r3, r3, r1
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dcf2      	bgt.n	8004e26 <_printf_i+0x21e>
 8004e40:	e7eb      	b.n	8004e1a <_printf_i+0x212>
 8004e42:	2500      	movs	r5, #0
 8004e44:	f104 0619 	add.w	r6, r4, #25
 8004e48:	e7f5      	b.n	8004e36 <_printf_i+0x22e>
 8004e4a:	bf00      	nop
 8004e4c:	080054b5 	.word	0x080054b5
 8004e50:	080054c6 	.word	0x080054c6

08004e54 <memmove>:
 8004e54:	4288      	cmp	r0, r1
 8004e56:	b510      	push	{r4, lr}
 8004e58:	eb01 0402 	add.w	r4, r1, r2
 8004e5c:	d902      	bls.n	8004e64 <memmove+0x10>
 8004e5e:	4284      	cmp	r4, r0
 8004e60:	4623      	mov	r3, r4
 8004e62:	d807      	bhi.n	8004e74 <memmove+0x20>
 8004e64:	1e43      	subs	r3, r0, #1
 8004e66:	42a1      	cmp	r1, r4
 8004e68:	d008      	beq.n	8004e7c <memmove+0x28>
 8004e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e72:	e7f8      	b.n	8004e66 <memmove+0x12>
 8004e74:	4402      	add	r2, r0
 8004e76:	4601      	mov	r1, r0
 8004e78:	428a      	cmp	r2, r1
 8004e7a:	d100      	bne.n	8004e7e <memmove+0x2a>
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e86:	e7f7      	b.n	8004e78 <memmove+0x24>

08004e88 <_free_r>:
 8004e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d044      	beq.n	8004f18 <_free_r+0x90>
 8004e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e92:	9001      	str	r0, [sp, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f1a1 0404 	sub.w	r4, r1, #4
 8004e9a:	bfb8      	it	lt
 8004e9c:	18e4      	addlt	r4, r4, r3
 8004e9e:	f000 f913 	bl	80050c8 <__malloc_lock>
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <_free_r+0x94>)
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	b933      	cbnz	r3, 8004eb8 <_free_r+0x30>
 8004eaa:	6063      	str	r3, [r4, #4]
 8004eac:	6014      	str	r4, [r2, #0]
 8004eae:	b003      	add	sp, #12
 8004eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb4:	f000 b90e 	b.w	80050d4 <__malloc_unlock>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x46>
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1961      	adds	r1, r4, r5
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf01      	itttt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	1949      	addeq	r1, r1, r5
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	e7ed      	b.n	8004eaa <_free_r+0x22>
 8004ece:	461a      	mov	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b10b      	cbz	r3, 8004ed8 <_free_r+0x50>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d9fa      	bls.n	8004ece <_free_r+0x46>
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	1855      	adds	r5, r2, r1
 8004edc:	42a5      	cmp	r5, r4
 8004ede:	d10b      	bne.n	8004ef8 <_free_r+0x70>
 8004ee0:	6824      	ldr	r4, [r4, #0]
 8004ee2:	4421      	add	r1, r4
 8004ee4:	1854      	adds	r4, r2, r1
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	d1e0      	bne.n	8004eae <_free_r+0x26>
 8004eec:	681c      	ldr	r4, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	6053      	str	r3, [r2, #4]
 8004ef2:	4421      	add	r1, r4
 8004ef4:	6011      	str	r1, [r2, #0]
 8004ef6:	e7da      	b.n	8004eae <_free_r+0x26>
 8004ef8:	d902      	bls.n	8004f00 <_free_r+0x78>
 8004efa:	230c      	movs	r3, #12
 8004efc:	6003      	str	r3, [r0, #0]
 8004efe:	e7d6      	b.n	8004eae <_free_r+0x26>
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	1961      	adds	r1, r4, r5
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf04      	itt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	bf04      	itt	eq
 8004f10:	1949      	addeq	r1, r1, r5
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	6054      	str	r4, [r2, #4]
 8004f16:	e7ca      	b.n	8004eae <_free_r+0x26>
 8004f18:	b003      	add	sp, #12
 8004f1a:	bd30      	pop	{r4, r5, pc}
 8004f1c:	200011b0 	.word	0x200011b0

08004f20 <sbrk_aligned>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4e0e      	ldr	r6, [pc, #56]	; (8004f5c <sbrk_aligned+0x3c>)
 8004f24:	460c      	mov	r4, r1
 8004f26:	6831      	ldr	r1, [r6, #0]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b911      	cbnz	r1, 8004f32 <sbrk_aligned+0x12>
 8004f2c:	f000 f8bc 	bl	80050a8 <_sbrk_r>
 8004f30:	6030      	str	r0, [r6, #0]
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f8b7 	bl	80050a8 <_sbrk_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d00a      	beq.n	8004f54 <sbrk_aligned+0x34>
 8004f3e:	1cc4      	adds	r4, r0, #3
 8004f40:	f024 0403 	bic.w	r4, r4, #3
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d007      	beq.n	8004f58 <sbrk_aligned+0x38>
 8004f48:	1a21      	subs	r1, r4, r0
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f8ac 	bl	80050a8 <_sbrk_r>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d101      	bne.n	8004f58 <sbrk_aligned+0x38>
 8004f54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f58:	4620      	mov	r0, r4
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	200011b4 	.word	0x200011b4

08004f60 <_malloc_r>:
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4607      	mov	r7, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d905      	bls.n	8004f88 <_malloc_r+0x28>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	2600      	movs	r6, #0
 8004f82:	4630      	mov	r0, r6
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f88:	4e2e      	ldr	r6, [pc, #184]	; (8005044 <_malloc_r+0xe4>)
 8004f8a:	f000 f89d 	bl	80050c8 <__malloc_lock>
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	461c      	mov	r4, r3
 8004f92:	bb34      	cbnz	r4, 8004fe2 <_malloc_r+0x82>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ffc2 	bl	8004f20 <sbrk_aligned>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	d14d      	bne.n	800503e <_malloc_r+0xde>
 8004fa2:	6834      	ldr	r4, [r6, #0]
 8004fa4:	4626      	mov	r6, r4
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d140      	bne.n	800502c <_malloc_r+0xcc>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	4631      	mov	r1, r6
 8004fae:	4638      	mov	r0, r7
 8004fb0:	eb04 0803 	add.w	r8, r4, r3
 8004fb4:	f000 f878 	bl	80050a8 <_sbrk_r>
 8004fb8:	4580      	cmp	r8, r0
 8004fba:	d13a      	bne.n	8005032 <_malloc_r+0xd2>
 8004fbc:	6821      	ldr	r1, [r4, #0]
 8004fbe:	3503      	adds	r5, #3
 8004fc0:	1a6d      	subs	r5, r5, r1
 8004fc2:	f025 0503 	bic.w	r5, r5, #3
 8004fc6:	3508      	adds	r5, #8
 8004fc8:	2d0c      	cmp	r5, #12
 8004fca:	bf38      	it	cc
 8004fcc:	250c      	movcc	r5, #12
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f7ff ffa5 	bl	8004f20 <sbrk_aligned>
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d02b      	beq.n	8005032 <_malloc_r+0xd2>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	442b      	add	r3, r5
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	e00e      	b.n	8005000 <_malloc_r+0xa0>
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	1b52      	subs	r2, r2, r5
 8004fe6:	d41e      	bmi.n	8005026 <_malloc_r+0xc6>
 8004fe8:	2a0b      	cmp	r2, #11
 8004fea:	d916      	bls.n	800501a <_malloc_r+0xba>
 8004fec:	1961      	adds	r1, r4, r5
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	6025      	str	r5, [r4, #0]
 8004ff2:	bf18      	it	ne
 8004ff4:	6059      	strne	r1, [r3, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	bf08      	it	eq
 8004ffa:	6031      	streq	r1, [r6, #0]
 8004ffc:	5162      	str	r2, [r4, r5]
 8004ffe:	604b      	str	r3, [r1, #4]
 8005000:	4638      	mov	r0, r7
 8005002:	f104 060b 	add.w	r6, r4, #11
 8005006:	f000 f865 	bl	80050d4 <__malloc_unlock>
 800500a:	f026 0607 	bic.w	r6, r6, #7
 800500e:	1d23      	adds	r3, r4, #4
 8005010:	1af2      	subs	r2, r6, r3
 8005012:	d0b6      	beq.n	8004f82 <_malloc_r+0x22>
 8005014:	1b9b      	subs	r3, r3, r6
 8005016:	50a3      	str	r3, [r4, r2]
 8005018:	e7b3      	b.n	8004f82 <_malloc_r+0x22>
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	42a3      	cmp	r3, r4
 800501e:	bf0c      	ite	eq
 8005020:	6032      	streq	r2, [r6, #0]
 8005022:	605a      	strne	r2, [r3, #4]
 8005024:	e7ec      	b.n	8005000 <_malloc_r+0xa0>
 8005026:	4623      	mov	r3, r4
 8005028:	6864      	ldr	r4, [r4, #4]
 800502a:	e7b2      	b.n	8004f92 <_malloc_r+0x32>
 800502c:	4634      	mov	r4, r6
 800502e:	6876      	ldr	r6, [r6, #4]
 8005030:	e7b9      	b.n	8004fa6 <_malloc_r+0x46>
 8005032:	230c      	movs	r3, #12
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4638      	mov	r0, r7
 8005038:	f000 f84c 	bl	80050d4 <__malloc_unlock>
 800503c:	e7a1      	b.n	8004f82 <_malloc_r+0x22>
 800503e:	6025      	str	r5, [r4, #0]
 8005040:	e7de      	b.n	8005000 <_malloc_r+0xa0>
 8005042:	bf00      	nop
 8005044:	200011b0 	.word	0x200011b0

08005048 <_realloc_r>:
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	4680      	mov	r8, r0
 800504e:	4614      	mov	r4, r2
 8005050:	460e      	mov	r6, r1
 8005052:	b921      	cbnz	r1, 800505e <_realloc_r+0x16>
 8005054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005058:	4611      	mov	r1, r2
 800505a:	f7ff bf81 	b.w	8004f60 <_malloc_r>
 800505e:	b92a      	cbnz	r2, 800506c <_realloc_r+0x24>
 8005060:	f7ff ff12 	bl	8004e88 <_free_r>
 8005064:	4625      	mov	r5, r4
 8005066:	4628      	mov	r0, r5
 8005068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800506c:	f000 f838 	bl	80050e0 <_malloc_usable_size_r>
 8005070:	4284      	cmp	r4, r0
 8005072:	4607      	mov	r7, r0
 8005074:	d802      	bhi.n	800507c <_realloc_r+0x34>
 8005076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800507a:	d812      	bhi.n	80050a2 <_realloc_r+0x5a>
 800507c:	4621      	mov	r1, r4
 800507e:	4640      	mov	r0, r8
 8005080:	f7ff ff6e 	bl	8004f60 <_malloc_r>
 8005084:	4605      	mov	r5, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	d0ed      	beq.n	8005066 <_realloc_r+0x1e>
 800508a:	42bc      	cmp	r4, r7
 800508c:	4622      	mov	r2, r4
 800508e:	4631      	mov	r1, r6
 8005090:	bf28      	it	cs
 8005092:	463a      	movcs	r2, r7
 8005094:	f7ff fba4 	bl	80047e0 <memcpy>
 8005098:	4631      	mov	r1, r6
 800509a:	4640      	mov	r0, r8
 800509c:	f7ff fef4 	bl	8004e88 <_free_r>
 80050a0:	e7e1      	b.n	8005066 <_realloc_r+0x1e>
 80050a2:	4635      	mov	r5, r6
 80050a4:	e7df      	b.n	8005066 <_realloc_r+0x1e>
	...

080050a8 <_sbrk_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d06      	ldr	r5, [pc, #24]	; (80050c4 <_sbrk_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fc f8ec 	bl	8001290 <_sbrk>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_sbrk_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_sbrk_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200011b8 	.word	0x200011b8

080050c8 <__malloc_lock>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__malloc_lock+0x8>)
 80050ca:	f000 b811 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	200011bc 	.word	0x200011bc

080050d4 <__malloc_unlock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__malloc_unlock+0x8>)
 80050d6:	f000 b80c 	b.w	80050f2 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	200011bc 	.word	0x200011bc

080050e0 <_malloc_usable_size_r>:
 80050e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e4:	1f18      	subs	r0, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbc      	itt	lt
 80050ea:	580b      	ldrlt	r3, [r1, r0]
 80050ec:	18c0      	addlt	r0, r0, r3
 80050ee:	4770      	bx	lr

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
