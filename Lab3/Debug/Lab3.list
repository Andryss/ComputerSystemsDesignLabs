
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00001124  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011c0  200011c0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edbf  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a3  00000000  00000000  0002ee8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d8d  00000000  00000000  00032958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010003  00000000  00000000  000356e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ebc  00000000  00000000  000456e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d5a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  0011d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f64 	.word	0x08004f64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	08004f64 	.word	0x08004f64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <is_buf_empty>:

_Bool is_buf_empty(struct Buffer* buf) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <is_buf_full>:

_Bool is_buf_full(struct Buffer* buf) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == sizeof(buf->data) - 1));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80005fe:	3301      	adds	r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8000606:	4293      	cmp	r3, r2
 8000608:	d00b      	beq.n	8000622 <is_buf_full+0x32>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000610:	2b00      	cmp	r3, #0
 8000612:	d108      	bne.n	8000626 <is_buf_full+0x36>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800061a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <is_buf_full+0x36>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <is_buf_full+0x38>
 8000626:	2300      	movs	r3, #0
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800064a:	e01e      	b.n	800068a <buf_push+0x50>
		if (is_buf_full(buf)) {
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffcf 	bl	80005f0 <is_buf_full>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11d      	bne.n	8000694 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800065e:	3301      	adds	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000666:	b29a      	uxth	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	5499      	strb	r1, [r3, r2]
		data++;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
		written++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3dc      	bcc.n	800064c <buf_push+0x12>
 8000692:	e000      	b.n	8000696 <buf_push+0x5c>
			break;
 8000694:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ffaa 	bl	80005f0 <is_buf_full>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00a      	beq.n	80006be <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2100      	movs	r1, #0
 80006ca:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <buf_pop>:

_Bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff74 	bl	80005d6 <is_buf_empty>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <buf_pop+0x1c>
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e04e      	b.n	8000796 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006fe:	3301      	adds	r3, #1
 8000700:	b29b      	uxth	r3, r3
 8000702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000706:	b29a      	uxth	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 8000712:	e01b      	b.n	800074c <buf_pop+0x70>
		if (read < size) {
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d20c      	bcs.n	8000736 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000722:	4619      	mov	r1, r3
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	5c52      	ldrb	r2, [r2, r1]
 800072e:	701a      	strb	r2, [r3, #0]
			read++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800073c:	3301      	adds	r3, #1
 800073e:	b29b      	uxth	r3, r3
 8000740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000744:	b29a      	uxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1db      	bne.n	8000714 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d102      	bne.n	800076a <buf_pop+0x8e>
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	e000      	b.n	800076c <buf_pop+0x90>
 800076a:	2200      	movs	r2, #0
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000784:	429a      	cmp	r2, r3
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_GPIO_Init+0x84>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_GPIO_Init+0x84>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_GPIO_Init+0x84>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_GPIO_Init+0x84>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MX_GPIO_Init+0x84>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_GPIO_Init+0x84>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <transmit+0x30>)
 800083c:	f002 ff79 	bl	8003732 <HAL_UART_Transmit_IT>
 8000840:	4603      	mov	r3, r0
 8000842:	2b02      	cmp	r3, #2
 8000844:	d104      	bne.n	8000850 <transmit+0x28>
		buf_push(&transmitBuffer, data, size);
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <transmit+0x34>)
 800084c:	f7ff fef5 	bl	800063a <buf_push>
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20001168 	.word	0x20001168
 800085c:	200008c0 	.word	0x200008c0

08000860 <transmitc>:

void transmitc(char* data) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fcc1 	bl	80001f0 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffd8 	bl	8000828 <transmit>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <receive>:

void receive() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 8000884:	2201      	movs	r2, #1
 8000886:	4903      	ldr	r1, [pc, #12]	; (8000894 <receive+0x14>)
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <receive+0x18>)
 800088a:	f002 ff97 	bl	80037bc <HAL_UART_Receive_IT>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200010c8 	.word	0x200010c8
 8000898:	20001168 	.word	0x20001168

0800089c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 80008a4:	2201      	movs	r2, #1
 80008a6:	4906      	ldr	r1, [pc, #24]	; (80008c0 <HAL_UART_RxCpltCallback+0x24>)
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_UART_RxCpltCallback+0x28>)
 80008aa:	f7ff fec6 	bl	800063a <buf_push>
	transmit(char_buf, sizeof(char_buf));
 80008ae:	2101      	movs	r1, #1
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <HAL_UART_RxCpltCallback+0x24>)
 80008b2:	f7ff ffb9 	bl	8000828 <transmit>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200010c8 	.word	0x200010c8
 80008c4:	200000b8 	.word	0x200000b8

080008c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008d4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008d8:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  if (buf_pop(&transmitBuffer, buf, sizeof(buf))) {
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_UART_TxCpltCallback+0x4c>)
 80008e6:	f7ff fef9 	bl	80006dc <buf_pop>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00c      	beq.n	800090a <HAL_UART_TxCpltCallback+0x42>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc7b 	bl	80001f0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <HAL_UART_TxCpltCallback+0x50>)
 8000906:	f002 ff14 	bl	8003732 <HAL_UART_Transmit_IT>
  }
}
 800090a:	bf00      	nop
 800090c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200008c0 	.word	0x200008c0
 8000918:	20001168 	.word	0x20001168

0800091c <HAL_TIM_PeriodElapsedCallback>:

size_t edit_mode = 0;
uint16_t edit_mode_led = 0;
uint16_t edit_mode_brightness = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d14d      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0xae>
		  if (cur_mode != -1) {
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000936:	d048      	beq.n	80009ca <HAL_TIM_PeriodElapsedCallback+0xae>
			  uint16_t leds = mode_leds[cur_mode];
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800093e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000942:	81fb      	strh	r3, [r7, #14]
			  uint16_t brightness = mode_brightness[cur_mode];
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800094a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094e:	81bb      	strh	r3, [r7, #12]

			  if ((leds & 0x1) != 0) {
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d009      	beq.n	800096e <HAL_TIM_PeriodElapsedCallback+0x52>
				  htim4.Instance->CCR2 = brightness * 10;
 800095a:	89ba      	ldrh	r2, [r7, #12]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	461a      	mov	r2, r3
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
 800096c:	e003      	b.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x5a>
			  } else {
				  htim4.Instance->CCR2 = 0;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
			  }

			  if ((leds & 0x2) != 0) {
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x78>
				  htim4.Instance->CCR3 = brightness * 10;
 8000980:	89ba      	ldrh	r2, [r7, #12]
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
 8000992:	e003      	b.n	800099c <HAL_TIM_PeriodElapsedCallback+0x80>
			  } else {
				  htim4.Instance->CCR3 = 0;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2200      	movs	r2, #0
 800099a:	63da      	str	r2, [r3, #60]	; 0x3c
			  }

			  if ((leds & 0x4) != 0) {
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d009      	beq.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x9e>
				  htim4.Instance->CCR4 = brightness * 10;
 80009a6:	89ba      	ldrh	r2, [r7, #12]
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	641a      	str	r2, [r3, #64]	; 0x40
 80009b8:	e003      	b.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			  } else {
				  htim4.Instance->CCR4 = 0;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
			  }

			  cur_mode = -1;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c8:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000
 80009dc:	20000028 	.word	0x20000028
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000014 	.word	0x20000014
 80009e8:	200010d8 	.word	0x200010d8

080009ec <leds_str.1>:
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_TIM4_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  char leds_str(uint16_t leds) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	f8c7 c000 	str.w	ip, [r7]
	  if (leds == 0x1) return 'G';
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d101      	bne.n	8000a04 <leds_str.1+0x18>
 8000a00:	2347      	movs	r3, #71	; 0x47
 8000a02:	e00a      	b.n	8000a1a <leds_str.1+0x2e>
	  if (leds == 0x2) return 'Y';
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d101      	bne.n	8000a0e <leds_str.1+0x22>
 8000a0a:	2359      	movs	r3, #89	; 0x59
 8000a0c:	e005      	b.n	8000a1a <leds_str.1+0x2e>
	  if (leds == 0x4) return 'R';
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d101      	bne.n	8000a18 <leds_str.1+0x2c>
 8000a14:	2352      	movs	r3, #82	; 0x52
 8000a16:	e000      	b.n	8000a1a <leds_str.1+0x2e>
	  return '?';
 8000a18:	233f      	movs	r3, #63	; 0x3f
  }
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <main>:
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
int main(void)
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8000a34:	f000 fdda 	bl	80015ec <HAL_Init>
  buf_init(&receiveBuffer);
 8000a38:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <main+0xbc>)
 8000a3a:	f7ff fdb3 	bl	80005a4 <buf_init>
  buf_init(&transmitBuffer);
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <main+0xc0>)
 8000a40:	f7ff fdb0 	bl	80005a4 <buf_init>
  SystemClock_Config();
 8000a44:	f000 fae0 	bl	8001008 <SystemClock_Config>
  MX_GPIO_Init();
 8000a48:	f7ff feaa 	bl	80007a0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000a4c:	f000 fd2a 	bl	80014a4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000a50:	f000 fbee 	bl	8001230 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000a54:	f000 fc78 	bl	8001348 <MX_TIM6_Init>
			  transmitc(buf);
		  }
	  }
  }

  if (!hello_print) {
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0xc4>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f083 0301 	eor.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00a      	beq.n	8000a7c <main+0x54>
	  hello_print = true;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <main+0xc4>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
	  transmitc("\r\n\r\nProgramm started\r\n");
 8000a6c:	4820      	ldr	r0, [pc, #128]	; (8000af0 <main+0xc8>)
 8000a6e:	f7ff fef7 	bl	8000860 <transmitc>
	  print_mode_message();
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	469c      	mov	ip, r3
 8000a78:	f000 f846 	bl	8000b08 <print_mode_message.0>
  }

  cur_mode = 0;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0xcc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a82:	2104      	movs	r1, #4
 8000a84:	481c      	ldr	r0, [pc, #112]	; (8000af8 <main+0xd0>)
 8000a86:	f001 fee5 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	481a      	ldr	r0, [pc, #104]	; (8000af8 <main+0xd0>)
 8000a8e:	f001 fee1 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a92:	210c      	movs	r1, #12
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <main+0xd0>)
 8000a96:	f001 fedd 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <main+0xd4>)
 8000a9c:	f001 fe10 	bl	80026c0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receive();
 8000aa0:	f7ff feee 	bl	8000880 <receive>

	  uint8_t read[2] = {0};
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	80bb      	strh	r3, [r7, #4]
	  if (buf_pop(&receiveBuffer, read, sizeof(read))) {
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <main+0xbc>)
 8000ab0:	f7ff fe14 	bl	80006dc <buf_pop>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f2      	beq.n	8000aa0 <main+0x78>
		  char c = (char) read[0];
 8000aba:	793b      	ldrb	r3, [r7, #4]
 8000abc:	73fb      	strb	r3, [r7, #15]
		  if (c == '\r') {
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b0d      	cmp	r3, #13
 8000ac2:	d103      	bne.n	8000acc <main+0xa4>
			  transmitc("\n");
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <main+0xd8>)
 8000ac6:	f7ff fecb 	bl	8000860 <transmitc>
 8000aca:	e002      	b.n	8000ad2 <main+0xaa>
		  } else {
			  transmitc("\r\n");
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <main+0xdc>)
 8000ace:	f7ff fec7 	bl	8000860 <transmitc>
		  }
		  handle_command(c);
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f107 0208 	add.w	r2, r7, #8
 8000ad8:	4694      	mov	ip, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f8d2 	bl	8000c84 <handle_command.2>
  {
 8000ae0:	e7de      	b.n	8000aa0 <main+0x78>
 8000ae2:	bf00      	nop
 8000ae4:	200000b8 	.word	0x200000b8
 8000ae8:	200008c0 	.word	0x200008c0
 8000aec:	200010c9 	.word	0x200010c9
 8000af0:	08004f7c 	.word	0x08004f7c
 8000af4:	20000028 	.word	0x20000028
 8000af8:	200010d8 	.word	0x200010d8
 8000afc:	20001120 	.word	0x20001120
 8000b00:	08004f94 	.word	0x08004f94
 8000b04:	08004f98 	.word	0x08004f98

08000b08 <print_mode_message.0>:
  void print_mode_message() {
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b0e5      	sub	sp, #404	; 0x194
 8000b0c:	af12      	add	r7, sp, #72	; 0x48
 8000b0e:	4664      	mov	r4, ip
 8000b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000b18:	f8c3 c000 	str.w	ip, [r3]
	  char mode_leds_str[9] = {0};
 8000b1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	711a      	strb	r2, [r3, #4]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000b36:	e018      	b.n	8000b6a <print_mode_message.0+0x62>
		  mode_leds_str[i] = leds_str(mode_leds[i]);
 8000b38:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <print_mode_message.0+0x170>)
 8000b3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	46a4      	mov	ip, r4
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff51 	bl	80009ec <leds_str.1>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b52:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8000b56:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000b60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b64:	3301      	adds	r3, #1
 8000b66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000b6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d9e2      	bls.n	8000b38 <print_mode_message.0+0x30>
	  char *format = "\
 8000b72:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <print_mode_message.0+0x174>)
 8000b74:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000b78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b80:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000b82:	469c      	mov	ip, r3
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000b84:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <print_mode_message.0+0x178>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000b88:	461e      	mov	r6, r3
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000b8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000b92:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), format,
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <print_mode_message.0+0x178>)
 8000b98:	885b      	ldrh	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000b9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ba0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ba4:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000ba6:	623b      	str	r3, [r7, #32]
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <print_mode_message.0+0x178>)
 8000baa:	889b      	ldrh	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000bac:	61fb      	str	r3, [r7, #28]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bb6:	78db      	ldrb	r3, [r3, #3]
	  snprintf(buf, sizeof(buf), format,
 8000bb8:	61bb      	str	r3, [r7, #24]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <print_mode_message.0+0x178>)
 8000bbc:	88db      	ldrh	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000bbe:	617b      	str	r3, [r7, #20]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bc8:	791b      	ldrb	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000bca:	613b      	str	r3, [r7, #16]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <print_mode_message.0+0x178>)
 8000bce:	891b      	ldrh	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000bd0:	60fb      	str	r3, [r7, #12]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bda:	795b      	ldrb	r3, [r3, #5]
	  snprintf(buf, sizeof(buf), format,
 8000bdc:	60bb      	str	r3, [r7, #8]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <print_mode_message.0+0x178>)
 8000be0:	895b      	ldrh	r3, [r3, #10]
	  snprintf(buf, sizeof(buf), format,
 8000be2:	607b      	str	r3, [r7, #4]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000be4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000be8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bec:	799b      	ldrb	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000bee:	603b      	str	r3, [r7, #0]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <print_mode_message.0+0x178>)
 8000bf2:	899b      	ldrh	r3, [r3, #12]
	  snprintf(buf, sizeof(buf), format,
 8000bf4:	461d      	mov	r5, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000bf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bfe:	79db      	ldrb	r3, [r3, #7]
	  snprintf(buf, sizeof(buf), format,
 8000c00:	461c      	mov	r4, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <print_mode_message.0+0x178>)
 8000c04:	89db      	ldrh	r3, [r3, #14]
	  snprintf(buf, sizeof(buf), format,
 8000c06:	4619      	mov	r1, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000c08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000c0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c10:	7a1b      	ldrb	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000c12:	461a      	mov	r2, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <print_mode_message.0+0x178>)
 8000c16:	8a1b      	ldrh	r3, [r3, #16]
	  snprintf(buf, sizeof(buf), format,
 8000c18:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000c1c:	9310      	str	r3, [sp, #64]	; 0x40
 8000c1e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000c20:	910e      	str	r1, [sp, #56]	; 0x38
 8000c22:	940d      	str	r4, [sp, #52]	; 0x34
 8000c24:	950c      	str	r5, [sp, #48]	; 0x30
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	920b      	str	r2, [sp, #44]	; 0x2c
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	9209      	str	r2, [sp, #36]	; 0x24
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	9208      	str	r2, [sp, #32]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	9207      	str	r2, [sp, #28]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	9206      	str	r2, [sp, #24]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	9205      	str	r2, [sp, #20]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	9204      	str	r2, [sp, #16]
 8000c46:	6a3a      	ldr	r2, [r7, #32]
 8000c48:	9203      	str	r2, [sp, #12]
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	9202      	str	r2, [sp, #8]
 8000c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	9600      	str	r6, [sp, #0]
 8000c54:	4663      	mov	r3, ip
 8000c56:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5e:	f003 fcff 	bl	8004660 <sniprintf>
	  transmitc(buf);
 8000c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fdfa 	bl	8000860 <transmitc>
  }
 8000c6c:	bf00      	nop
 8000c6e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	08004f9c 	.word	0x08004f9c
 8000c80:	20000014 	.word	0x20000014

08000c84 <handle_command.2>:
  void handle_command(char cmd) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b0a5      	sub	sp, #148	; 0x94
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	4664      	mov	r4, ip
 8000c90:	f8c7 c000 	str.w	ip, [r7]
	  if (state == ST_MAIN) {
 8000c94:	4b93      	ldr	r3, [pc, #588]	; (8000ee4 <handle_command.2+0x260>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d134      	bne.n	8000d06 <handle_command.2+0x82>
		  if (cmd >= '1' && cmd <= '9') {
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b30      	cmp	r3, #48	; 0x30
 8000ca0:	d914      	bls.n	8000ccc <handle_command.2+0x48>
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b39      	cmp	r3, #57	; 0x39
 8000ca6:	d811      	bhi.n	8000ccc <handle_command.2+0x48>
			  cur_mode = (cmd - '1');
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	3b31      	subs	r3, #49	; 0x31
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b8e      	ldr	r3, [pc, #568]	; (8000ee8 <handle_command.2+0x264>)
 8000cb0:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f107 000c 	add.w	r0, r7, #12
 8000cb8:	4a8c      	ldr	r2, [pc, #560]	; (8000eec <handle_command.2+0x268>)
 8000cba:	2120      	movs	r1, #32
 8000cbc:	f003 fcd0 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fdcb 	bl	8000860 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000cca:	e186      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '0') {
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b30      	cmp	r3, #48	; 0x30
 8000cd0:	d107      	bne.n	8000ce2 <handle_command.2+0x5e>
			  cur_mode = -1;
 8000cd2:	4b85      	ldr	r3, [pc, #532]	; (8000ee8 <handle_command.2+0x264>)
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd8:	601a      	str	r2, [r3, #0]
			  transmitc("All LEDs off\n\r> ");
 8000cda:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <handle_command.2+0x26c>)
 8000cdc:	f7ff fdc0 	bl	8000860 <transmitc>
  }
 8000ce0:	e17b      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '\r') {
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b0d      	cmp	r3, #13
 8000ce6:	d10a      	bne.n	8000cfe <handle_command.2+0x7a>
			  state = ST_EDIT_WAIT_MODE;
 8000ce8:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <handle_command.2+0x260>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	801a      	strh	r2, [r3, #0]
			  edit_mode = -1;
 8000cee:	4b81      	ldr	r3, [pc, #516]	; (8000ef4 <handle_command.2+0x270>)
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	601a      	str	r2, [r3, #0]
			  transmitc("Enter edit mode\r\nChoose mode to edit [1-9]: ");
 8000cf6:	4880      	ldr	r0, [pc, #512]	; (8000ef8 <handle_command.2+0x274>)
 8000cf8:	f7ff fdb2 	bl	8000860 <transmitc>
  }
 8000cfc:	e16d      	b.n	8000fda <handle_command.2+0x356>
			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8000cfe:	487f      	ldr	r0, [pc, #508]	; (8000efc <handle_command.2+0x278>)
 8000d00:	f7ff fdae 	bl	8000860 <transmitc>
  }
 8000d04:	e169      	b.n	8000fda <handle_command.2+0x356>
	  } else if (state == ST_EDIT_WAIT_MODE) {
 8000d06:	4b77      	ldr	r3, [pc, #476]	; (8000ee4 <handle_command.2+0x260>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d143      	bne.n	8000d96 <handle_command.2+0x112>
		  if (cmd >= '1' && cmd <= '9') {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b30      	cmp	r3, #48	; 0x30
 8000d12:	d914      	bls.n	8000d3e <handle_command.2+0xba>
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b39      	cmp	r3, #57	; 0x39
 8000d18:	d811      	bhi.n	8000d3e <handle_command.2+0xba>
			  edit_mode = (cmd - '1');
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	3b31      	subs	r3, #49	; 0x31
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b74      	ldr	r3, [pc, #464]	; (8000ef4 <handle_command.2+0x270>)
 8000d22:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Selected mode %c. Enter to continue or choose another mode [1-9]: ", cmd);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f107 000c 	add.w	r0, r7, #12
 8000d2a:	4a75      	ldr	r2, [pc, #468]	; (8000f00 <handle_command.2+0x27c>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	f003 fc97 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fd92 	bl	8000860 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000d3c:	e14d      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '\r') {
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	d112      	bne.n	8000d6a <handle_command.2+0xe6>
			  if (edit_mode == -1) {
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <handle_command.2+0x270>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4c:	d103      	bne.n	8000d56 <handle_command.2+0xd2>
				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 8000d4e:	486d      	ldr	r0, [pc, #436]	; (8000f04 <handle_command.2+0x280>)
 8000d50:	f7ff fd86 	bl	8000860 <transmitc>
  }
 8000d54:	e141      	b.n	8000fda <handle_command.2+0x356>
				  state = ST_EDIT_WAIT_LED;
 8000d56:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <handle_command.2+0x260>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	801a      	strh	r2, [r3, #0]
				  edit_mode_led = 0;
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <handle_command.2+0x284>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	801a      	strh	r2, [r3, #0]
				  transmitc("Choose led for mode [g,y,r]: ");
 8000d62:	486a      	ldr	r0, [pc, #424]	; (8000f0c <handle_command.2+0x288>)
 8000d64:	f7ff fd7c 	bl	8000860 <transmitc>
  }
 8000d68:	e137      	b.n	8000fda <handle_command.2+0x356>
			  if (edit_mode == -1) {
 8000d6a:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <handle_command.2+0x270>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d72:	d103      	bne.n	8000d7c <handle_command.2+0xf8>
				  transmitc("Unknown command. Choose mode to edit [1-9]: ");
 8000d74:	4866      	ldr	r0, [pc, #408]	; (8000f10 <handle_command.2+0x28c>)
 8000d76:	f7ff fd73 	bl	8000860 <transmitc>
  }
 8000d7a:	e12e      	b.n	8000fda <handle_command.2+0x356>
				  snprintf(buf, sizeof(buf), "Unknown command. Selected mode %c. Enter to continue or choose another mode [1-9]: ", cmd);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f107 000c 	add.w	r0, r7, #12
 8000d82:	4a64      	ldr	r2, [pc, #400]	; (8000f14 <handle_command.2+0x290>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	f003 fc6b 	bl	8004660 <sniprintf>
				  transmitc(buf);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd66 	bl	8000860 <transmitc>
  }
 8000d94:	e121      	b.n	8000fda <handle_command.2+0x356>
	  } else if (state == ST_EDIT_WAIT_LED) {
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <handle_command.2+0x260>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d157      	bne.n	8000e4e <handle_command.2+0x1ca>
		  if (cmd == 'g') {
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b67      	cmp	r3, #103	; 0x67
 8000da2:	d106      	bne.n	8000db2 <handle_command.2+0x12e>
			  edit_mode_led = 0x1;
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <handle_command.2+0x284>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	801a      	strh	r2, [r3, #0]
			  transmitc("Green led selected. Enter to continue or choose another led [g,y,r]: ");
 8000daa:	485b      	ldr	r0, [pc, #364]	; (8000f18 <handle_command.2+0x294>)
 8000dac:	f7ff fd58 	bl	8000860 <transmitc>
  }
 8000db0:	e113      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == 'y') {
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b79      	cmp	r3, #121	; 0x79
 8000db6:	d106      	bne.n	8000dc6 <handle_command.2+0x142>
			  edit_mode_led = 0x2;
 8000db8:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <handle_command.2+0x284>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	801a      	strh	r2, [r3, #0]
			  transmitc("Yellow led selected. Enter to continue or choose another led [g,y,r]: ");
 8000dbe:	4857      	ldr	r0, [pc, #348]	; (8000f1c <handle_command.2+0x298>)
 8000dc0:	f7ff fd4e 	bl	8000860 <transmitc>
  }
 8000dc4:	e109      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == 'r') {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b72      	cmp	r3, #114	; 0x72
 8000dca:	d106      	bne.n	8000dda <handle_command.2+0x156>
			  edit_mode_led = 0x4;
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <handle_command.2+0x284>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	801a      	strh	r2, [r3, #0]
			  transmitc("Red led selected. Enter to continue or choose another led [g,y,r]: ");
 8000dd2:	4853      	ldr	r0, [pc, #332]	; (8000f20 <handle_command.2+0x29c>)
 8000dd4:	f7ff fd44 	bl	8000860 <transmitc>
  }
 8000dd8:	e0ff      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '\r') {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b0d      	cmp	r3, #13
 8000dde:	d111      	bne.n	8000e04 <handle_command.2+0x180>
			  if (edit_mode_led == 0) {
 8000de0:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <handle_command.2+0x284>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <handle_command.2+0x16c>
				  transmitc("No led selected. Choose led for mode [g,y,r]: ");
 8000de8:	484e      	ldr	r0, [pc, #312]	; (8000f24 <handle_command.2+0x2a0>)
 8000dea:	f7ff fd39 	bl	8000860 <transmitc>
  }
 8000dee:	e0f4      	b.n	8000fda <handle_command.2+0x356>
				  state = ST_EDIT_WAIT_BRIGHT;
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <handle_command.2+0x260>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	801a      	strh	r2, [r3, #0]
				  edit_mode_brightness = 40;
 8000df6:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <handle_command.2+0x2a4>)
 8000df8:	2228      	movs	r2, #40	; 0x28
 8000dfa:	801a      	strh	r2, [r3, #0]
				  transmitc("Default led brightness 40%. Enter to continue or choose another brightness [1-9,0,+|-]: ");
 8000dfc:	484b      	ldr	r0, [pc, #300]	; (8000f2c <handle_command.2+0x2a8>)
 8000dfe:	f7ff fd2f 	bl	8000860 <transmitc>
  }
 8000e02:	e0ea      	b.n	8000fda <handle_command.2+0x356>
			  if (edit_mode_led == 0) {
 8000e04:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <handle_command.2+0x284>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <handle_command.2+0x190>
				  transmitc("Unknown command. Choose led for mode [g,y,r]: ");
 8000e0c:	4848      	ldr	r0, [pc, #288]	; (8000f30 <handle_command.2+0x2ac>)
 8000e0e:	f7ff fd27 	bl	8000860 <transmitc>
  }
 8000e12:	e0e2      	b.n	8000fda <handle_command.2+0x356>
				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <handle_command.2+0x284>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d007      	beq.n	8000e2c <handle_command.2+0x1a8>
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <handle_command.2+0x284>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d101      	bne.n	8000e28 <handle_command.2+0x1a4>
 8000e24:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <handle_command.2+0x2b0>)
 8000e26:	e002      	b.n	8000e2e <handle_command.2+0x1aa>
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <handle_command.2+0x2b4>)
 8000e2a:	e000      	b.n	8000e2e <handle_command.2+0x1aa>
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <handle_command.2+0x2b8>)
 8000e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  snprintf(buf, sizeof(buf), "Unknown command. %s led selected. Enter to continue or choose another led [g,y,r]: ", led);
 8000e32:	f107 000c 	add.w	r0, r7, #12
 8000e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e3a:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <handle_command.2+0x2bc>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	f003 fc0f 	bl	8004660 <sniprintf>
				  transmitc(buf);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd0a 	bl	8000860 <transmitc>
  }
 8000e4c:	e0c5      	b.n	8000fda <handle_command.2+0x356>
	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <handle_command.2+0x260>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	f040 80c1 	bne.w	8000fda <handle_command.2+0x356>
		  if (cmd >= '1' && cmd <= '9') {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b30      	cmp	r3, #48	; 0x30
 8000e5c:	d91a      	bls.n	8000e94 <handle_command.2+0x210>
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b39      	cmp	r3, #57	; 0x39
 8000e62:	d817      	bhi.n	8000e94 <handle_command.2+0x210>
			  edit_mode_brightness = (cmd - '0') * 10;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b30      	subs	r3, #48	; 0x30
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <handle_command.2+0x2a4>)
 8000e76:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <handle_command.2+0x2a4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f107 000c 	add.w	r0, r7, #12
 8000e80:	4a30      	ldr	r2, [pc, #192]	; (8000f44 <handle_command.2+0x2c0>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	f003 fbec 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fce7 	bl	8000860 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000e92:	e0a2      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '0') {
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b30      	cmp	r3, #48	; 0x30
 8000e98:	d106      	bne.n	8000ea8 <handle_command.2+0x224>
			  edit_mode_brightness = 100;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <handle_command.2+0x2a4>)
 8000e9c:	2264      	movs	r2, #100	; 0x64
 8000e9e:	801a      	strh	r2, [r3, #0]
			  transmitc("Led brightness 100%. Enter to continue or choose another brightness [1-9,0,+|-]: ");
 8000ea0:	4829      	ldr	r0, [pc, #164]	; (8000f48 <handle_command.2+0x2c4>)
 8000ea2:	f7ff fcdd 	bl	8000860 <transmitc>
  }
 8000ea6:	e098      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '+') {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b2b      	cmp	r3, #43	; 0x2b
 8000eac:	d14e      	bne.n	8000f4c <handle_command.2+0x2c8>
			  edit_mode_brightness += 10;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <handle_command.2+0x2a4>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	330a      	adds	r3, #10
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <handle_command.2+0x2a4>)
 8000eb8:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <handle_command.2+0x2a4>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d902      	bls.n	8000ec8 <handle_command.2+0x244>
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <handle_command.2+0x2a4>)
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <handle_command.2+0x2a4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f107 000c 	add.w	r0, r7, #12
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <handle_command.2+0x2c0>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	f003 fbc4 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fcbf 	bl	8000860 <transmitc>
  }
 8000ee2:	e07a      	b.n	8000fda <handle_command.2+0x356>
 8000ee4:	200010ca 	.word	0x200010ca
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	08005054 	.word	0x08005054
 8000ef0:	0800506c 	.word	0x0800506c
 8000ef4:	200010cc 	.word	0x200010cc
 8000ef8:	08005080 	.word	0x08005080
 8000efc:	080050b0 	.word	0x080050b0
 8000f00:	080050e0 	.word	0x080050e0
 8000f04:	08005124 	.word	0x08005124
 8000f08:	200010d0 	.word	0x200010d0
 8000f0c:	08005154 	.word	0x08005154
 8000f10:	08005174 	.word	0x08005174
 8000f14:	080051a4 	.word	0x080051a4
 8000f18:	080051f8 	.word	0x080051f8
 8000f1c:	08005240 	.word	0x08005240
 8000f20:	08005288 	.word	0x08005288
 8000f24:	080052cc 	.word	0x080052cc
 8000f28:	200010d2 	.word	0x200010d2
 8000f2c:	080052fc 	.word	0x080052fc
 8000f30:	08005358 	.word	0x08005358
 8000f34:	08005388 	.word	0x08005388
 8000f38:	08005390 	.word	0x08005390
 8000f3c:	08005394 	.word	0x08005394
 8000f40:	0800539c 	.word	0x0800539c
 8000f44:	080053f0 	.word	0x080053f0
 8000f48:	08005444 	.word	0x08005444
		  } else if (cmd == '-') {
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f50:	d11a      	bne.n	8000f88 <handle_command.2+0x304>
			  edit_mode_brightness -= 10;
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <handle_command.2+0x360>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	3b0a      	subs	r3, #10
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <handle_command.2+0x360>)
 8000f5c:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <handle_command.2+0x360>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	d802      	bhi.n	8000f6c <handle_command.2+0x2e8>
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <handle_command.2+0x360>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <handle_command.2+0x360>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	f107 000c 	add.w	r0, r7, #12
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <handle_command.2+0x364>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	f003 fb72 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fc6d 	bl	8000860 <transmitc>
  }
 8000f86:	e028      	b.n	8000fda <handle_command.2+0x356>
		  } else if (cmd == '\r') {
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b0d      	cmp	r3, #13
 8000f8c:	d117      	bne.n	8000fbe <handle_command.2+0x33a>
			  state = ST_MAIN;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <handle_command.2+0x368>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	801a      	strh	r2, [r3, #0]
			  mode_leds[edit_mode] = edit_mode_led;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <handle_command.2+0x36c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <handle_command.2+0x370>)
 8000f9a:	8811      	ldrh	r1, [r2, #0]
 8000f9c:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <handle_command.2+0x374>)
 8000f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  mode_brightness[edit_mode] = edit_mode_brightness;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <handle_command.2+0x36c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <handle_command.2+0x360>)
 8000fa8:	8811      	ldrh	r1, [r2, #0]
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <handle_command.2+0x378>)
 8000fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  transmitc("Exit edit mode");
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <handle_command.2+0x37c>)
 8000fb2:	f7ff fc55 	bl	8000860 <transmitc>
			  print_mode_message();
 8000fb6:	46a4      	mov	ip, r4
 8000fb8:	f7ff fda6 	bl	8000b08 <print_mode_message.0>
  }
 8000fbc:	e00d      	b.n	8000fda <handle_command.2+0x356>
			  snprintf(buf, sizeof(buf), "Unknown command. Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <handle_command.2+0x360>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <handle_command.2+0x380>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	f003 fb49 	bl	8004660 <sniprintf>
			  transmitc(buf);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fc44 	bl	8000860 <transmitc>
  }
 8000fd8:	e7ff      	b.n	8000fda <handle_command.2+0x356>
 8000fda:	bf00      	nop
 8000fdc:	3794      	adds	r7, #148	; 0x94
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200010d2 	.word	0x200010d2
 8000fe8:	080053f0 	.word	0x080053f0
 8000fec:	200010ca 	.word	0x200010ca
 8000ff0:	200010cc 	.word	0x200010cc
 8000ff4:	200010d0 	.word	0x200010d0
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000014 	.word	0x20000014
 8001000:	08005498 	.word	0x08005498
 8001004:	080054a8 	.word	0x080054a8

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fb1a 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <SystemClock_Config+0xb8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <SystemClock_Config+0xb8>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <SystemClock_Config+0xb8>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <SystemClock_Config+0xbc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <SystemClock_Config+0xbc>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <SystemClock_Config+0xbc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe77 	bl	8001d70 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001088:	f000 f81e 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f8da 	bl	8002260 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010b2:	f000 f809 	bl	80010c8 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	; 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_MspInit+0x4c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 fa8e 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM6_DAC_IRQHandler+0x10>)
 800117e:	f001 fc31 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20001120 	.word	0x20001120

0800118c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <USART6_IRQHandler+0x10>)
 8001192:	f002 fb43 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20001168 	.word	0x20001168

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f003 fa14 	bl	80045fc <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20030000 	.word	0x20030000
 8001200:	00000400 	.word	0x00000400
 8001204:	200010d4 	.word	0x200010d4
 8001208:	200011c0 	.word	0x200011c0

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <MX_TIM4_Init+0x110>)
 8001262:	4a38      	ldr	r2, [pc, #224]	; (8001344 <MX_TIM4_Init+0x114>)
 8001264:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <MX_TIM4_Init+0x110>)
 8001268:	220f      	movs	r2, #15
 800126a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_TIM4_Init+0x110>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <MX_TIM4_Init+0x110>)
 8001274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001278:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <MX_TIM4_Init+0x110>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_TIM4_Init+0x110>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001286:	482e      	ldr	r0, [pc, #184]	; (8001340 <MX_TIM4_Init+0x110>)
 8001288:	f001 f9ca 	bl	8002620 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001292:	f7ff ff19 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <MX_TIM4_Init+0x110>)
 80012a4:	f001 fd68 	bl	8002d78 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80012ae:	f7ff ff0b 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b2:	4823      	ldr	r0, [pc, #140]	; (8001340 <MX_TIM4_Init+0x110>)
 80012b4:	f001 fa74 	bl	80027a0 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80012be:	f7ff ff03 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <MX_TIM4_Init+0x110>)
 80012d2:	f002 f951 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012dc:	f7ff fef4 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2204      	movs	r2, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_TIM4_Init+0x110>)
 80012f8:	f001 fc7c 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001302:	f7ff fee1 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM4_Init+0x110>)
 800130e:	f001 fc71 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001318:	f7ff fed6 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	220c      	movs	r2, #12
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM4_Init+0x110>)
 8001324:	f001 fc66 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800132e:	f7ff fecb 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM4_Init+0x110>)
 8001334:	f000 f87c 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3738      	adds	r7, #56	; 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200010d8 	.word	0x200010d8
 8001344:	40000800 	.word	0x40000800

08001348 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM6_Init+0x64>)
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MX_TIM6_Init+0x68>)
 800135a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_TIM6_Init+0x64>)
 800135e:	220f      	movs	r2, #15
 8001360:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_TIM6_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_TIM6_Init+0x64>)
 800136a:	f242 720f 	movw	r2, #9999	; 0x270f
 800136e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_TIM6_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM6_Init+0x64>)
 8001378:	f001 f952 	bl	8002620 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001382:	f7ff fea1 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM6_Init+0x64>)
 8001394:	f002 f8f0 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800139e:	f7ff fe93 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20001120 	.word	0x20001120
 80013b0:	40001000 	.word	0x40001000

080013b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_TIM_Base_MspInit+0x70>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10e      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80013e2:	e01a      	b.n	800141a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d115      	bne.n	800141a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2036      	movs	r0, #54	; 0x36
 8001410:	f000 fa39 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001414:	2036      	movs	r0, #54	; 0x36
 8001416:	f000 fa52 	bl	80018be <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40000800 	.word	0x40000800
 8001428:	40023800 	.word	0x40023800
 800142c:	40001000 	.word	0x40001000

08001430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_TIM_MspPostInit+0x68>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11e      	bne.n	8001490 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800146e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001480:	2302      	movs	r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_TIM_MspPostInit+0x70>)
 800148c:	f000 fac4 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40000800 	.word	0x40000800
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_USART6_UART_Init+0x50>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014dc:	f002 f8dc 	bl	8003698 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014e6:	f7ff fdef 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001168 	.word	0x20001168
 80014f4:	40011400 	.word	0x40011400

080014f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_UART_MspInit+0x94>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d133      	bne.n	8001582 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_UART_MspInit+0x98>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_UART_MspInit+0x98>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_UART_MspInit+0x98>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_UART_MspInit+0x98>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_UART_MspInit+0x98>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_UART_MspInit+0x98>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001562:	2308      	movs	r3, #8
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <HAL_UART_MspInit+0x9c>)
 800156e:	f000 fa53 	bl	8001a18 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2047      	movs	r0, #71	; 0x47
 8001578:	f000 f985 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800157c:	2047      	movs	r0, #71	; 0x47
 800157e:	f000 f99e 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40011400 	.word	0x40011400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b4:	4c0b      	ldr	r4, [pc, #44]	; (80015e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c2:	f7ff fe23 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f003 f81f 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff fa2d 	bl	8000a28 <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80015dc:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 80015e0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80015e4:	200011c0 	.word	0x200011c0

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f92b 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fd58 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f943 	bl	80018da <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800166c:	f000 f90b 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000002c 	.word	0x2000002c
 8001688:	20000034 	.word	0x20000034
 800168c:	20000030 	.word	0x20000030

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000034 	.word	0x20000034
 80016b4:	200011ac 	.word	0x200011ac

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200011ac 	.word	0x200011ac

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff3e 	bl	8001718 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff8e 	bl	80017c4 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff31 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff feda 	bl	80016b8 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e052      	b.n	80019ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0216 	bic.w	r2, r2, #22
 8001932:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001942:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <HAL_DMA_Abort+0x62>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0208 	bic.w	r2, r2, #8
 8001962:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001974:	e013      	b.n	800199e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001976:	f7ff fe9f 	bl	80016b8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b05      	cmp	r3, #5
 8001982:	d90c      	bls.n	800199e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e015      	b.n	80019ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e4      	bne.n	8001976 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	223f      	movs	r2, #63	; 0x3f
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d004      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e00c      	b.n	8001a0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e177      	b.n	8001d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8166 	bne.w	8001d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80c0 	beq.w	8001d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bba:	4a61      	ldr	r2, [pc, #388]	; (8001d40 <HAL_GPIO_Init+0x328>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_GPIO_Init+0x32c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d037      	beq.n	8001c56 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <HAL_GPIO_Init+0x330>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a55      	ldr	r2, [pc, #340]	; (8001d50 <HAL_GPIO_Init+0x338>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_GPIO_Init+0x33c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_GPIO_Init+0x340>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x22a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_GPIO_Init+0x344>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_GPIO_Init+0x348>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x222>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a50      	ldr	r2, [pc, #320]	; (8001d64 <HAL_GPIO_Init+0x34c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x21e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4f      	ldr	r2, [pc, #316]	; (8001d68 <HAL_GPIO_Init+0x350>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x21a>
 8001c2e:	2309      	movs	r3, #9
 8001c30:	e012      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c32:	230a      	movs	r3, #10
 8001c34:	e010      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00e      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x328>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_GPIO_Init+0x354>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae84 	bls.w	8001a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40022400 	.word	0x40022400
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e267      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d075      	beq.n	8001e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05b      	beq.n	8001e78 <HAL_RCC_OscConfig+0x108>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d157      	bne.n	8001e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e242      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x74>
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01d      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x98>
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6c      	ldr	r2, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001e08:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a68      	ldr	r2, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc46 	bl	80016b8 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fc42 	bl	80016b8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e207      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xc0>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fc32 	bl	80016b8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fc2e 	bl	80016b8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1f3      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0xe8>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d063      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1c7      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4937      	ldr	r1, [pc, #220]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	e03a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x244>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fbe7 	bl	80016b8 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eee:	f7ff fbe3 	bl	80016b8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1a8      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x244>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fbc6 	bl	80016b8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fbc2 	bl	80016b8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e187      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d036      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x248>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff fba6 	bl	80016b8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fba2 	bl	80016b8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e167      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x200>
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x248>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb8f 	bl	80016b8 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	e00e      	b.n	8001fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fb8b 	bl	80016b8 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d907      	bls.n	8001fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e150      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470000 	.word	0x42470000
 8001fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b88      	ldr	r3, [pc, #544]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ea      	bne.n	8001f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8097 	beq.w	8002104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b7d      	ldr	r3, [pc, #500]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a7c      	ldr	r2, [pc, #496]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b77      	ldr	r3, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x474>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x474>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <HAL_RCC_OscConfig+0x474>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff fb4b 	bl	80016b8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff fb47 	bl	80016b8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e10c      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x474>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x2ea>
 800204c:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x324>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x30c>
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a5e      	ldr	r2, [pc, #376]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	4b5c      	ldr	r3, [pc, #368]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a5b      	ldr	r2, [pc, #364]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x324>
 800207c:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff fb0c 	bl	80016b8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff fb08 	bl	80016b8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0cb      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ee      	beq.n	80020a4 <HAL_RCC_OscConfig+0x334>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff faf6 	bl	80016b8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff faf2 	bl	80016b8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0b5      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e6:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ee      	bne.n	80020d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a38      	ldr	r2, [pc, #224]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a1 	beq.w	8002250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d05c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d141      	bne.n	80021a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fac6 	bl	80016b8 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff fac2 	bl	80016b8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e087      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	491b      	ldr	r1, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x478>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff fa9b 	bl	80016b8 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff fa97 	bl	80016b8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e05c      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x416>
 80021a4:	e054      	b.n	8002250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x478>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fa84 	bl	80016b8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff fa80 	bl	80016b8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e045      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_OscConfig+0x470>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x444>
 80021d2:	e03d      	b.n	8002250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e038      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x4ec>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d028      	beq.n	800224c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d121      	bne.n	800224c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d11a      	bne.n	800224c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	085b      	lsrs	r3, r3, #1
 8002234:	3b01      	subs	r3, #1
 8002236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0cc      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b68      	ldr	r3, [pc, #416]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d90c      	bls.n	800229c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b65      	ldr	r3, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d044      	beq.n	8002380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d119      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231a:	2b03      	cmp	r3, #3
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e067      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4934      	ldr	r1, [pc, #208]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002350:	f7ff f9b2 	bl	80016b8 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	e00a      	b.n	800236e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7ff f9ae 	bl	80016b8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e04f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 020c 	and.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d1eb      	bne.n	8002358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d20c      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f912 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	0800550c 	.word	0x0800550c
 8002424:	2000002c 	.word	0x2000002c
 8002428:	20000030 	.word	0x20000030

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002430:	b090      	sub	sp, #64	; 0x40
 8002432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243c:	2300      	movs	r3, #0
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d00d      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x40>
 8002450:	2b08      	cmp	r3, #8
 8002452:	f200 80a1 	bhi.w	8002598 <HAL_RCC_GetSysClockFreq+0x16c>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 800245a:	2b04      	cmp	r3, #4
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x3a>
 800245e:	e09b      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002464:	e09b      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246a:	e098      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246c:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d028      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	2200      	movs	r2, #0
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	627a      	str	r2, [r7, #36]	; 0x24
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002494:	2100      	movs	r1, #0
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002498:	fb03 f201 	mul.w	r2, r3, r1
 800249c:	2300      	movs	r3, #0
 800249e:	fb00 f303 	mul.w	r3, r0, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a6:	fba0 1202 	umull	r1, r2, r0, r2
 80024aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024ac:	460a      	mov	r2, r1
 80024ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80024b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b2:	4413      	add	r3, r2
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	2200      	movs	r2, #0
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	61fa      	str	r2, [r7, #28]
 80024be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024c6:	f7fd feeb 	bl	80002a0 <__aeabi_uldivmod>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4613      	mov	r3, r2
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e053      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	2200      	movs	r2, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	617a      	str	r2, [r7, #20]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024e6:	f04f 0b00 	mov.w	fp, #0
 80024ea:	4652      	mov	r2, sl
 80024ec:	465b      	mov	r3, fp
 80024ee:	f04f 0000 	mov.w	r0, #0
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	0159      	lsls	r1, r3, #5
 80024f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fc:	0150      	lsls	r0, r2, #5
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	ebb2 080a 	subs.w	r8, r2, sl
 8002506:	eb63 090b 	sbc.w	r9, r3, fp
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800251a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800251e:	ebb2 0408 	subs.w	r4, r2, r8
 8002522:	eb63 0509 	sbc.w	r5, r3, r9
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	00eb      	lsls	r3, r5, #3
 8002530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002534:	00e2      	lsls	r2, r4, #3
 8002536:	4614      	mov	r4, r2
 8002538:	461d      	mov	r5, r3
 800253a:	eb14 030a 	adds.w	r3, r4, sl
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	eb45 030b 	adc.w	r3, r5, fp
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002552:	4629      	mov	r1, r5
 8002554:	028b      	lsls	r3, r1, #10
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800255c:	4621      	mov	r1, r4
 800255e:	028a      	lsls	r2, r1, #10
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002566:	2200      	movs	r2, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	60fa      	str	r2, [r7, #12]
 800256c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002570:	f7fd fe96 	bl	80002a0 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_GetSysClockFreq+0x180>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800258c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3740      	adds	r7, #64	; 0x40
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	017d7840 	.word	0x017d7840

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_RCC_GetHCLKFreq+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000002c 	.word	0x2000002c

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	0800551c 	.word	0x0800551c

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffdc 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0b5b      	lsrs	r3, r3, #13
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	0800551c 	.word	0x0800551c

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e041      	b.n	80026b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe feb4 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fc7a 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e04e      	b.n	8002776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <HAL_TIM_Base_Start_IT+0xc4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d01d      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_TIM_Base_Start_IT+0xc8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_Base_Start_IT+0xcc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_TIM_Base_Start_IT+0xd0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_TIM_Base_Start_IT+0xd4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_TIM_Base_Start_IT+0xd8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_TIM_Base_Start_IT+0xdc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d111      	bne.n	8002764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b06      	cmp	r3, #6
 8002750:	d010      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	e007      	b.n	8002774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40000c00 	.word	0x40000c00
 8002794:	40010400 	.word	0x40010400
 8002798:	40014000 	.word	0x40014000
 800279c:	40001800 	.word	0x40001800

080027a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f839 	bl	800283e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fbba 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_TIM_PWM_Start+0x24>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e022      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d109      	bne.n	8002892 <HAL_TIM_PWM_Start+0x3e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e015      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d109      	bne.n	80028ac <HAL_TIM_PWM_Start+0x58>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e008      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07c      	b.n	80029c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x82>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	e013      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x92>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	e00b      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start+0xa2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	e003      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fe10 	bl	800352c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_PWM_Start+0xcc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_TIM_PWM_Start+0xd0>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_TIM_PWM_Start+0xd2>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d01d      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_PWM_Start+0x17c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_TIM_PWM_Start+0x180>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_PWM_Start+0x184>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_PWM_Start+0x188>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_PWM_Start+0x18c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d010      	beq.n	80029be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e007      	b.n	80029be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa77 	bl	8002f1a <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa69 	bl	8002f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa7a 	bl	8002f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa4d 	bl	8002f1a <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa3f 	bl	8002f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa50 	bl	8002f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa23 	bl	8002f1a <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa15 	bl	8002f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fa26 	bl	8002f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f9f9 	bl	8002f1a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9eb 	bl	8002f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f9fc 	bl	8002f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd feda 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fd78 	bl	8003684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9c1 	bl	8002f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fd42 	bl	8003670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0ae      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	f200 809f 	bhi.w	8002d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	08002d61 	.word	0x08002d61
 8002c30:	08002d61 	.word	0x08002d61
 8002c34:	08002d61 	.word	0x08002d61
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002d61 	.word	0x08002d61
 8002c40:	08002d61 	.word	0x08002d61
 8002c44:	08002d61 	.word	0x08002d61
 8002c48:	08002cdf 	.word	0x08002cdf
 8002c4c:	08002d61 	.word	0x08002d61
 8002c50:	08002d61 	.word	0x08002d61
 8002c54:	08002d61 	.word	0x08002d61
 8002c58:	08002d1f 	.word	0x08002d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fa18 	bl	8003098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	619a      	str	r2, [r3, #24]
      break;
 8002c9a:	e064      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa68 	bl	8003178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      break;
 8002cdc:	e043      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fabd 	bl	8003264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0208 	orr.w	r2, r2, #8
 8002cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0204 	bic.w	r2, r2, #4
 8002d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
      break;
 8002d1c:	e023      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fb11 	bl	800334c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69d9      	ldr	r1, [r3, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	021a      	lsls	r2, r3, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
      break;
 8002d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0x1c>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0b4      	b.n	8002efe <HAL_TIM_ConfigClockSource+0x186>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dcc:	d03e      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0xd4>
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	f200 8087 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	f000 8086 	beq.w	8002eea <HAL_TIM_ConfigClockSource+0x172>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	d87f      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d01a      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0xa6>
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d87b      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d050      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x11a>
 8002df0:	2b60      	cmp	r3, #96	; 0x60
 8002df2:	d877      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b50      	cmp	r3, #80	; 0x50
 8002df6:	d03c      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0xfa>
 8002df8:	2b50      	cmp	r3, #80	; 0x50
 8002dfa:	d873      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d058      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d86f      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d064      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	2b30      	cmp	r3, #48	; 0x30
 8002e0a:	d86b      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d060      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d867      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05c      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d05a      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e1c:	e062      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6899      	ldr	r1, [r3, #8]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f000 fb5d 	bl	80034ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	609a      	str	r2, [r3, #8]
      break;
 8002e4a:	e04f      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6899      	ldr	r1, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f000 fb46 	bl	80034ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6e:	609a      	str	r2, [r3, #8]
      break;
 8002e70:	e03c      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f000 faba 	bl	80033f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2150      	movs	r1, #80	; 0x50
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fb13 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002e90:	e02c      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f000 fad9 	bl	8003456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2160      	movs	r1, #96	; 0x60
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fb03 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002eb0:	e01c      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f000 fa9a 	bl	80033f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 faf3 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e00c      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f000 faea 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002ee2:	e003      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e000      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a40      	ldr	r2, [pc, #256]	; (800306c <TIM_Base_SetConfig+0x114>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d00f      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <TIM_Base_SetConfig+0x118>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3c      	ldr	r2, [pc, #240]	; (8003074 <TIM_Base_SetConfig+0x11c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <TIM_Base_SetConfig+0x120>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3a      	ldr	r2, [pc, #232]	; (800307c <TIM_Base_SetConfig+0x124>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2f      	ldr	r2, [pc, #188]	; (800306c <TIM_Base_SetConfig+0x114>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d027      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <TIM_Base_SetConfig+0x118>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d023      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_Base_SetConfig+0x11c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <TIM_Base_SetConfig+0x120>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <TIM_Base_SetConfig+0x124>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d017      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	; (8003080 <TIM_Base_SetConfig+0x128>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <TIM_Base_SetConfig+0x12c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0x130>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0x134>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <TIM_Base_SetConfig+0x138>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a23      	ldr	r2, [pc, #140]	; (8003094 <TIM_Base_SetConfig+0x13c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <TIM_Base_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0xf8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <TIM_Base_SetConfig+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40010400 	.word	0x40010400
 8003080:	40014000 	.word	0x40014000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800
 800308c:	40001800 	.word	0x40001800
 8003090:	40001c00 	.word	0x40001c00
 8003094:	40002000 	.word	0x40002000

08003098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0302 	bic.w	r3, r3, #2
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a20      	ldr	r2, [pc, #128]	; (8003170 <TIM_OC1_SetConfig+0xd8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_OC1_SetConfig+0x64>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <TIM_OC1_SetConfig+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10c      	bne.n	8003116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0308 	bic.w	r3, r3, #8
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <TIM_OC1_SetConfig+0xd8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_OC1_SetConfig+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <TIM_OC1_SetConfig+0xdc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d111      	bne.n	800314a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40010000 	.word	0x40010000
 8003174:	40010400 	.word	0x40010400

08003178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0210 	bic.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0320 	bic.w	r3, r3, #32
 80031c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <TIM_OC2_SetConfig+0xe4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_OC2_SetConfig+0x68>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a21      	ldr	r2, [pc, #132]	; (8003260 <TIM_OC2_SetConfig+0xe8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10d      	bne.n	80031fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC2_SetConfig+0xe4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC2_SetConfig+0x94>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <TIM_OC2_SetConfig+0xe8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d113      	bne.n	8003234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40010400 	.word	0x40010400

08003264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <TIM_OC3_SetConfig+0xe0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_OC3_SetConfig+0x66>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a20      	ldr	r2, [pc, #128]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10d      	bne.n	80032e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a16      	ldr	r2, [pc, #88]	; (8003344 <TIM_OC3_SetConfig+0xe0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_OC3_SetConfig+0x92>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40010000 	.word	0x40010000
 8003348:	40010400 	.word	0x40010400

0800334c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <TIM_OC4_SetConfig+0xa4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC4_SetConfig+0x68>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <TIM_OC4_SetConfig+0xa8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d109      	bne.n	80033c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40010400 	.word	0x40010400

080033f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 030a 	bic.w	r3, r3, #10
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	031b      	lsls	r3, r3, #12
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2201      	movs	r2, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e05a      	b.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d01d      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40010400 	.word	0x40010400
 8003668:	40014000 	.word	0x40014000
 800366c:	40001800 	.word	0x40001800

08003670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03f      	b.n	800372a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd ff1a 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fd19 	bl	8004114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d130      	bne.n	80037ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit_IT+0x26>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e029      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit_IT+0x38>
 8003766:	2302      	movs	r3, #2
 8003768:	e022      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d11d      	bne.n	8003812 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Receive_IT+0x26>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e016      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Receive_IT+0x38>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e00f      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	461a      	mov	r2, r3
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 faab 	bl	8003d64 <UART_Start_Receive_IT>
 800380e:	4603      	mov	r3, r0
 8003810:	e000      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ba      	sub	sp, #232	; 0xe8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800385a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fb8f 	bl	8003f9e <UART_Receive_IT>
      return;
 8003880:	e256      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80de 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
 800388c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80d1 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
 80038d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f043 0202 	orr.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
 80038fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f043 0208 	orr.w	r2, r3, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81ed 	beq.w	8003d26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fb1a 	bl	8003f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_UART_IRQHandler+0x17a>
 800398e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa22 	bl	8003de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d141      	bne.n	8003a2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_UART_IRQHandler+0x3dc>)
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd ffe1 	bl	80019d2 <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00e      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f986 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00a      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f982 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e006      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f97e 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a42:	e170      	b.n	8003d26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	bf00      	nop
    return;
 8003a46:	e16e      	b.n	8003d26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 814a 	bne.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8143 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 813c 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	f040 80b4 	bne.w	8003bfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8140 	beq.w	8003d2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f080 8139 	bcs.w	8003d2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003abe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	f000 8088 	beq.w	8003bde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1d9      	bne.n	8003ace <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e1      	bne.n	8003b1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fe8a 	bl	80018f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8ac 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf4:	e099      	b.n	8003d2a <HAL_UART_IRQHandler+0x50e>
 8003bf6:	bf00      	nop
 8003bf8:	08003ea7 	.word	0x08003ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 808b 	beq.w	8003d2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8086 	beq.w	8003d2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c46:	647a      	str	r2, [r7, #68]	; 0x44
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e3      	bne.n	8003ca0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f834 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce4:	e023      	b.n	8003d2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_UART_IRQHandler+0x4ea>
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8e5 	bl	8003ece <UART_Transmit_IT>
    return;
 8003d04:	e014      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <HAL_UART_IRQHandler+0x514>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f925 	bl	8003f6e <UART_EndTransmit_IT>
    return;
 8003d24:	e004      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
    return;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
      return;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
      return;
 8003d2e:	bf00      	nop
  }
}
 8003d30:	37e8      	adds	r7, #232	; 0xe8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop

08003d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2222      	movs	r2, #34	; 0x22
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0220 	orr.w	r2, r2, #32
 8003dd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b095      	sub	sp, #84	; 0x54
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e08:	643a      	str	r2, [r7, #64]	; 0x40
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3314      	adds	r3, #20
 8003e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d119      	bne.n	8003e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 0310 	bic.w	r3, r3, #16
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e9a:	bf00      	nop
 8003e9c:	3754      	adds	r7, #84	; 0x54
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff ff39 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b21      	cmp	r3, #33	; 0x21
 8003ee0:	d13e      	bne.n	8003f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d114      	bne.n	8003f16 <UART_Transmit_IT+0x48>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d110      	bne.n	8003f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]
 8003f14:	e008      	b.n	8003f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	1c59      	adds	r1, r3, #1
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6211      	str	r1, [r2, #32]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fc9a 	bl	80008c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08c      	sub	sp, #48	; 0x30
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	f040 80ab 	bne.w	800410a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d117      	bne.n	8003fee <UART_Receive_IT+0x50>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d113      	bne.n	8003fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
 8003fec:	e026      	b.n	800403c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d007      	beq.n	8004012 <UART_Receive_IT+0x74>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <UART_Receive_IT+0x82>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e008      	b.n	8004032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402c:	b2da      	uxtb	r2, r3
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4619      	mov	r1, r3
 800404a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800404c:	2b00      	cmp	r3, #0
 800404e:	d15a      	bne.n	8004106 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0220 	bic.w	r2, r2, #32
 800405e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	d135      	bne.n	80040fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f023 0310 	bic.w	r3, r3, #16
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	623a      	str	r2, [r7, #32]
 80040b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	69f9      	ldr	r1, [r7, #28]
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d10a      	bne.n	80040ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fe29 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
 80040fa:	e002      	b.n	8004102 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fc fbcd 	bl	800089c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e002      	b.n	800410c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3730      	adds	r7, #48	; 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004118:	b0c0      	sub	sp, #256	; 0x100
 800411a:	af00      	add	r7, sp, #0
 800411c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	68d9      	ldr	r1, [r3, #12]
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	ea40 0301 	orr.w	r3, r0, r1
 800413c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	431a      	orrs	r2, r3
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	431a      	orrs	r2, r3
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800416c:	f021 010c 	bic.w	r1, r1, #12
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800417a:	430b      	orrs	r3, r1
 800417c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418e:	6999      	ldr	r1, [r3, #24]
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	ea40 0301 	orr.w	r3, r0, r1
 800419a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <UART_SetConfig+0x2cc>)
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d005      	beq.n	80041b4 <UART_SetConfig+0xa0>
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b8d      	ldr	r3, [pc, #564]	; (80043e4 <UART_SetConfig+0x2d0>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d104      	bne.n	80041be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7fe fa20 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 80041b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041bc:	e003      	b.n	80041c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041be:	f7fe fa07 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80041c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	f040 810c 	bne.w	80043ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	1891      	adds	r1, r2, r2
 80041ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80041ee:	415b      	adcs	r3, r3
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041f6:	4621      	mov	r1, r4
 80041f8:	eb12 0801 	adds.w	r8, r2, r1
 80041fc:	4629      	mov	r1, r5
 80041fe:	eb43 0901 	adc.w	r9, r3, r1
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004216:	4690      	mov	r8, r2
 8004218:	4699      	mov	r9, r3
 800421a:	4623      	mov	r3, r4
 800421c:	eb18 0303 	adds.w	r3, r8, r3
 8004220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004224:	462b      	mov	r3, r5
 8004226:	eb49 0303 	adc.w	r3, r9, r3
 800422a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800423a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800423e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004242:	460b      	mov	r3, r1
 8004244:	18db      	adds	r3, r3, r3
 8004246:	653b      	str	r3, [r7, #80]	; 0x50
 8004248:	4613      	mov	r3, r2
 800424a:	eb42 0303 	adc.w	r3, r2, r3
 800424e:	657b      	str	r3, [r7, #84]	; 0x54
 8004250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004258:	f7fc f822 	bl	80002a0 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <UART_SetConfig+0x2d4>)
 8004262:	fba3 2302 	umull	r2, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	011c      	lsls	r4, r3, #4
 800426a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	1891      	adds	r1, r2, r2
 8004282:	64b9      	str	r1, [r7, #72]	; 0x48
 8004284:	415b      	adcs	r3, r3
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800428c:	4641      	mov	r1, r8
 800428e:	eb12 0a01 	adds.w	sl, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0b01 	adc.w	fp, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ac:	4692      	mov	sl, r2
 80042ae:	469b      	mov	fp, r3
 80042b0:	4643      	mov	r3, r8
 80042b2:	eb1a 0303 	adds.w	r3, sl, r3
 80042b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ba:	464b      	mov	r3, r9
 80042bc:	eb4b 0303 	adc.w	r3, fp, r3
 80042c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042d8:	460b      	mov	r3, r1
 80042da:	18db      	adds	r3, r3, r3
 80042dc:	643b      	str	r3, [r7, #64]	; 0x40
 80042de:	4613      	mov	r3, r2
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
 80042e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042ee:	f7fb ffd7 	bl	80002a0 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <UART_SetConfig+0x2d4>)
 80042fa:	fba3 2301 	umull	r2, r3, r3, r1
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2264      	movs	r2, #100	; 0x64
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	1acb      	subs	r3, r1, r3
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <UART_SetConfig+0x2d4>)
 8004310:	fba3 2302 	umull	r2, r3, r3, r2
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800431c:	441c      	add	r4, r3
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800432c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	63b9      	str	r1, [r7, #56]	; 0x38
 8004338:	415b      	adcs	r3, r3
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004340:	4641      	mov	r1, r8
 8004342:	1851      	adds	r1, r2, r1
 8004344:	6339      	str	r1, [r7, #48]	; 0x30
 8004346:	4649      	mov	r1, r9
 8004348:	414b      	adcs	r3, r1
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004358:	4659      	mov	r1, fp
 800435a:	00cb      	lsls	r3, r1, #3
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004362:	4651      	mov	r1, sl
 8004364:	00ca      	lsls	r2, r1, #3
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	4603      	mov	r3, r0
 800436c:	4642      	mov	r2, r8
 800436e:	189b      	adds	r3, r3, r2
 8004370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004374:	464b      	mov	r3, r9
 8004376:	460a      	mov	r2, r1
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800438c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004394:	460b      	mov	r3, r1
 8004396:	18db      	adds	r3, r3, r3
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	4613      	mov	r3, r2
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043aa:	f7fb ff79 	bl	80002a0 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <UART_SetConfig+0x2d4>)
 80043b4:	fba3 1302 	umull	r1, r3, r3, r2
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	2164      	movs	r1, #100	; 0x64
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	3332      	adds	r3, #50	; 0x32
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <UART_SetConfig+0x2d4>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f003 0207 	and.w	r2, r3, #7
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4422      	add	r2, r4
 80043da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043dc:	e105      	b.n	80045ea <UART_SetConfig+0x4d6>
 80043de:	bf00      	nop
 80043e0:	40011000 	.word	0x40011000
 80043e4:	40011400 	.word	0x40011400
 80043e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	1891      	adds	r1, r2, r2
 8004404:	6239      	str	r1, [r7, #32]
 8004406:	415b      	adcs	r3, r3
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800440e:	4641      	mov	r1, r8
 8004410:	1854      	adds	r4, r2, r1
 8004412:	4649      	mov	r1, r9
 8004414:	eb43 0501 	adc.w	r5, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	00eb      	lsls	r3, r5, #3
 8004422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004426:	00e2      	lsls	r2, r4, #3
 8004428:	4614      	mov	r4, r2
 800442a:	461d      	mov	r5, r3
 800442c:	4643      	mov	r3, r8
 800442e:	18e3      	adds	r3, r4, r3
 8004430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004434:	464b      	mov	r3, r9
 8004436:	eb45 0303 	adc.w	r3, r5, r3
 800443a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800444a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800445a:	4629      	mov	r1, r5
 800445c:	008b      	lsls	r3, r1, #2
 800445e:	4621      	mov	r1, r4
 8004460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004464:	4621      	mov	r1, r4
 8004466:	008a      	lsls	r2, r1, #2
 8004468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800446c:	f7fb ff18 	bl	80002a0 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4b60      	ldr	r3, [pc, #384]	; (80045f8 <UART_SetConfig+0x4e4>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	011c      	lsls	r4, r3, #4
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800448c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	61b9      	str	r1, [r7, #24]
 8004498:	415b      	adcs	r3, r3
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6139      	str	r1, [r7, #16]
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044f8:	4649      	mov	r1, r9
 80044fa:	008b      	lsls	r3, r1, #2
 80044fc:	4641      	mov	r1, r8
 80044fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004502:	4641      	mov	r1, r8
 8004504:	008a      	lsls	r2, r1, #2
 8004506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800450a:	f7fb fec9 	bl	80002a0 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <UART_SetConfig+0x4e4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	; 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	3332      	adds	r3, #50	; 0x32
 8004526:	4a34      	ldr	r2, [pc, #208]	; (80045f8 <UART_SetConfig+0x4e4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004532:	441c      	add	r4, r3
 8004534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004538:	2200      	movs	r2, #0
 800453a:	673b      	str	r3, [r7, #112]	; 0x70
 800453c:	677a      	str	r2, [r7, #116]	; 0x74
 800453e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004542:	4642      	mov	r2, r8
 8004544:	464b      	mov	r3, r9
 8004546:	1891      	adds	r1, r2, r2
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	415b      	adcs	r3, r3
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004552:	4641      	mov	r1, r8
 8004554:	1851      	adds	r1, r2, r1
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	4649      	mov	r1, r9
 800455a:	414b      	adcs	r3, r1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800456a:	4659      	mov	r1, fp
 800456c:	00cb      	lsls	r3, r1, #3
 800456e:	4651      	mov	r1, sl
 8004570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004574:	4651      	mov	r1, sl
 8004576:	00ca      	lsls	r2, r1, #3
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	4603      	mov	r3, r0
 800457e:	4642      	mov	r2, r8
 8004580:	189b      	adds	r3, r3, r2
 8004582:	66bb      	str	r3, [r7, #104]	; 0x68
 8004584:	464b      	mov	r3, r9
 8004586:	460a      	mov	r2, r1
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	663b      	str	r3, [r7, #96]	; 0x60
 8004598:	667a      	str	r2, [r7, #100]	; 0x64
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045a6:	4649      	mov	r1, r9
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	4641      	mov	r1, r8
 80045ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b0:	4641      	mov	r1, r8
 80045b2:	008a      	lsls	r2, r1, #2
 80045b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045b8:	f7fb fe72 	bl	80002a0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <UART_SetConfig+0x4e4>)
 80045c2:	fba3 1302 	umull	r1, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2164      	movs	r1, #100	; 0x64
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <UART_SetConfig+0x4e4>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4422      	add	r2, r4
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045f0:	46bd      	mov	sp, r7
 80045f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f6:	bf00      	nop
 80045f8:	51eb851f 	.word	0x51eb851f

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	; (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000038 	.word	0x20000038

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4d0d      	ldr	r5, [pc, #52]	; (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2600      	movs	r6, #0
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4d0b      	ldr	r5, [pc, #44]	; (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	; (800464c <__libc_init_array+0x44>)
 800461c:	f000 fca2 	bl	8004f64 <_init>
 8004620:	1b64      	subs	r4, r4, r5
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2600      	movs	r6, #0
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08005560 	.word	0x08005560
 8004644:	08005560 	.word	0x08005560
 8004648:	08005560 	.word	0x08005560
 800464c:	08005564 	.word	0x08005564

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <sniprintf>:
 8004660:	b40c      	push	{r2, r3}
 8004662:	b530      	push	{r4, r5, lr}
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <sniprintf+0x64>)
 8004666:	1e0c      	subs	r4, r1, #0
 8004668:	681d      	ldr	r5, [r3, #0]
 800466a:	b09d      	sub	sp, #116	; 0x74
 800466c:	da08      	bge.n	8004680 <sniprintf+0x20>
 800466e:	238b      	movs	r3, #139	; 0x8b
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	b01d      	add	sp, #116	; 0x74
 8004678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800467c:	b002      	add	sp, #8
 800467e:	4770      	bx	lr
 8004680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004688:	bf14      	ite	ne
 800468a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800468e:	4623      	moveq	r3, r4
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	9307      	str	r3, [sp, #28]
 8004694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004698:	9002      	str	r0, [sp, #8]
 800469a:	9006      	str	r0, [sp, #24]
 800469c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046a2:	ab21      	add	r3, sp, #132	; 0x84
 80046a4:	a902      	add	r1, sp, #8
 80046a6:	4628      	mov	r0, r5
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	f000 f869 	bl	8004780 <_svfiprintf_r>
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	bfbc      	itt	lt
 80046b2:	238b      	movlt	r3, #139	; 0x8b
 80046b4:	602b      	strlt	r3, [r5, #0]
 80046b6:	2c00      	cmp	r4, #0
 80046b8:	d0dd      	beq.n	8004676 <sniprintf+0x16>
 80046ba:	9b02      	ldr	r3, [sp, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e7d9      	b.n	8004676 <sniprintf+0x16>
 80046c2:	bf00      	nop
 80046c4:	20000038 	.word	0x20000038

080046c8 <__ssputs_r>:
 80046c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	688e      	ldr	r6, [r1, #8]
 80046ce:	429e      	cmp	r6, r3
 80046d0:	4682      	mov	sl, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4690      	mov	r8, r2
 80046d6:	461f      	mov	r7, r3
 80046d8:	d838      	bhi.n	800474c <__ssputs_r+0x84>
 80046da:	898a      	ldrh	r2, [r1, #12]
 80046dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046e0:	d032      	beq.n	8004748 <__ssputs_r+0x80>
 80046e2:	6825      	ldr	r5, [r4, #0]
 80046e4:	6909      	ldr	r1, [r1, #16]
 80046e6:	eba5 0901 	sub.w	r9, r5, r1
 80046ea:	6965      	ldr	r5, [r4, #20]
 80046ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046f4:	3301      	adds	r3, #1
 80046f6:	444b      	add	r3, r9
 80046f8:	106d      	asrs	r5, r5, #1
 80046fa:	429d      	cmp	r5, r3
 80046fc:	bf38      	it	cc
 80046fe:	461d      	movcc	r5, r3
 8004700:	0553      	lsls	r3, r2, #21
 8004702:	d531      	bpl.n	8004768 <__ssputs_r+0xa0>
 8004704:	4629      	mov	r1, r5
 8004706:	f000 fb63 	bl	8004dd0 <_malloc_r>
 800470a:	4606      	mov	r6, r0
 800470c:	b950      	cbnz	r0, 8004724 <__ssputs_r+0x5c>
 800470e:	230c      	movs	r3, #12
 8004710:	f8ca 3000 	str.w	r3, [sl]
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	6921      	ldr	r1, [r4, #16]
 8004726:	464a      	mov	r2, r9
 8004728:	f000 fabe 	bl	8004ca8 <memcpy>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	6126      	str	r6, [r4, #16]
 800473a:	6165      	str	r5, [r4, #20]
 800473c:	444e      	add	r6, r9
 800473e:	eba5 0509 	sub.w	r5, r5, r9
 8004742:	6026      	str	r6, [r4, #0]
 8004744:	60a5      	str	r5, [r4, #8]
 8004746:	463e      	mov	r6, r7
 8004748:	42be      	cmp	r6, r7
 800474a:	d900      	bls.n	800474e <__ssputs_r+0x86>
 800474c:	463e      	mov	r6, r7
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	4632      	mov	r2, r6
 8004752:	4641      	mov	r1, r8
 8004754:	f000 fab6 	bl	8004cc4 <memmove>
 8004758:	68a3      	ldr	r3, [r4, #8]
 800475a:	1b9b      	subs	r3, r3, r6
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	4433      	add	r3, r6
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	2000      	movs	r0, #0
 8004766:	e7db      	b.n	8004720 <__ssputs_r+0x58>
 8004768:	462a      	mov	r2, r5
 800476a:	f000 fba5 	bl	8004eb8 <_realloc_r>
 800476e:	4606      	mov	r6, r0
 8004770:	2800      	cmp	r0, #0
 8004772:	d1e1      	bne.n	8004738 <__ssputs_r+0x70>
 8004774:	6921      	ldr	r1, [r4, #16]
 8004776:	4650      	mov	r0, sl
 8004778:	f000 fabe 	bl	8004cf8 <_free_r>
 800477c:	e7c7      	b.n	800470e <__ssputs_r+0x46>
	...

08004780 <_svfiprintf_r>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	4698      	mov	r8, r3
 8004786:	898b      	ldrh	r3, [r1, #12]
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	b09d      	sub	sp, #116	; 0x74
 800478c:	4607      	mov	r7, r0
 800478e:	460d      	mov	r5, r1
 8004790:	4614      	mov	r4, r2
 8004792:	d50e      	bpl.n	80047b2 <_svfiprintf_r+0x32>
 8004794:	690b      	ldr	r3, [r1, #16]
 8004796:	b963      	cbnz	r3, 80047b2 <_svfiprintf_r+0x32>
 8004798:	2140      	movs	r1, #64	; 0x40
 800479a:	f000 fb19 	bl	8004dd0 <_malloc_r>
 800479e:	6028      	str	r0, [r5, #0]
 80047a0:	6128      	str	r0, [r5, #16]
 80047a2:	b920      	cbnz	r0, 80047ae <_svfiprintf_r+0x2e>
 80047a4:	230c      	movs	r3, #12
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ac:	e0d1      	b.n	8004952 <_svfiprintf_r+0x1d2>
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	616b      	str	r3, [r5, #20]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9309      	str	r3, [sp, #36]	; 0x24
 80047b6:	2320      	movs	r3, #32
 80047b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80047c0:	2330      	movs	r3, #48	; 0x30
 80047c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800496c <_svfiprintf_r+0x1ec>
 80047c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047ca:	f04f 0901 	mov.w	r9, #1
 80047ce:	4623      	mov	r3, r4
 80047d0:	469a      	mov	sl, r3
 80047d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047d6:	b10a      	cbz	r2, 80047dc <_svfiprintf_r+0x5c>
 80047d8:	2a25      	cmp	r2, #37	; 0x25
 80047da:	d1f9      	bne.n	80047d0 <_svfiprintf_r+0x50>
 80047dc:	ebba 0b04 	subs.w	fp, sl, r4
 80047e0:	d00b      	beq.n	80047fa <_svfiprintf_r+0x7a>
 80047e2:	465b      	mov	r3, fp
 80047e4:	4622      	mov	r2, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ff6d 	bl	80046c8 <__ssputs_r>
 80047ee:	3001      	adds	r0, #1
 80047f0:	f000 80aa 	beq.w	8004948 <_svfiprintf_r+0x1c8>
 80047f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047f6:	445a      	add	r2, fp
 80047f8:	9209      	str	r2, [sp, #36]	; 0x24
 80047fa:	f89a 3000 	ldrb.w	r3, [sl]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a2 	beq.w	8004948 <_svfiprintf_r+0x1c8>
 8004804:	2300      	movs	r3, #0
 8004806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800480e:	f10a 0a01 	add.w	sl, sl, #1
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	9307      	str	r3, [sp, #28]
 8004816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800481a:	931a      	str	r3, [sp, #104]	; 0x68
 800481c:	4654      	mov	r4, sl
 800481e:	2205      	movs	r2, #5
 8004820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004824:	4851      	ldr	r0, [pc, #324]	; (800496c <_svfiprintf_r+0x1ec>)
 8004826:	f7fb fceb 	bl	8000200 <memchr>
 800482a:	9a04      	ldr	r2, [sp, #16]
 800482c:	b9d8      	cbnz	r0, 8004866 <_svfiprintf_r+0xe6>
 800482e:	06d0      	lsls	r0, r2, #27
 8004830:	bf44      	itt	mi
 8004832:	2320      	movmi	r3, #32
 8004834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004838:	0711      	lsls	r1, r2, #28
 800483a:	bf44      	itt	mi
 800483c:	232b      	movmi	r3, #43	; 0x2b
 800483e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004842:	f89a 3000 	ldrb.w	r3, [sl]
 8004846:	2b2a      	cmp	r3, #42	; 0x2a
 8004848:	d015      	beq.n	8004876 <_svfiprintf_r+0xf6>
 800484a:	9a07      	ldr	r2, [sp, #28]
 800484c:	4654      	mov	r4, sl
 800484e:	2000      	movs	r0, #0
 8004850:	f04f 0c0a 	mov.w	ip, #10
 8004854:	4621      	mov	r1, r4
 8004856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485a:	3b30      	subs	r3, #48	; 0x30
 800485c:	2b09      	cmp	r3, #9
 800485e:	d94e      	bls.n	80048fe <_svfiprintf_r+0x17e>
 8004860:	b1b0      	cbz	r0, 8004890 <_svfiprintf_r+0x110>
 8004862:	9207      	str	r2, [sp, #28]
 8004864:	e014      	b.n	8004890 <_svfiprintf_r+0x110>
 8004866:	eba0 0308 	sub.w	r3, r0, r8
 800486a:	fa09 f303 	lsl.w	r3, r9, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	46a2      	mov	sl, r4
 8004874:	e7d2      	b.n	800481c <_svfiprintf_r+0x9c>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	1d19      	adds	r1, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfbb      	ittet	lt
 8004882:	425b      	neglt	r3, r3
 8004884:	f042 0202 	orrlt.w	r2, r2, #2
 8004888:	9307      	strge	r3, [sp, #28]
 800488a:	9307      	strlt	r3, [sp, #28]
 800488c:	bfb8      	it	lt
 800488e:	9204      	strlt	r2, [sp, #16]
 8004890:	7823      	ldrb	r3, [r4, #0]
 8004892:	2b2e      	cmp	r3, #46	; 0x2e
 8004894:	d10c      	bne.n	80048b0 <_svfiprintf_r+0x130>
 8004896:	7863      	ldrb	r3, [r4, #1]
 8004898:	2b2a      	cmp	r3, #42	; 0x2a
 800489a:	d135      	bne.n	8004908 <_svfiprintf_r+0x188>
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bfb8      	it	lt
 80048a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048ac:	3402      	adds	r4, #2
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800497c <_svfiprintf_r+0x1fc>
 80048b4:	7821      	ldrb	r1, [r4, #0]
 80048b6:	2203      	movs	r2, #3
 80048b8:	4650      	mov	r0, sl
 80048ba:	f7fb fca1 	bl	8000200 <memchr>
 80048be:	b140      	cbz	r0, 80048d2 <_svfiprintf_r+0x152>
 80048c0:	2340      	movs	r3, #64	; 0x40
 80048c2:	eba0 000a 	sub.w	r0, r0, sl
 80048c6:	fa03 f000 	lsl.w	r0, r3, r0
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	4303      	orrs	r3, r0
 80048ce:	3401      	adds	r4, #1
 80048d0:	9304      	str	r3, [sp, #16]
 80048d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d6:	4826      	ldr	r0, [pc, #152]	; (8004970 <_svfiprintf_r+0x1f0>)
 80048d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048dc:	2206      	movs	r2, #6
 80048de:	f7fb fc8f 	bl	8000200 <memchr>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d038      	beq.n	8004958 <_svfiprintf_r+0x1d8>
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <_svfiprintf_r+0x1f4>)
 80048e8:	bb1b      	cbnz	r3, 8004932 <_svfiprintf_r+0x1b2>
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	3307      	adds	r3, #7
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	3308      	adds	r3, #8
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f8:	4433      	add	r3, r6
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	e767      	b.n	80047ce <_svfiprintf_r+0x4e>
 80048fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004902:	460c      	mov	r4, r1
 8004904:	2001      	movs	r0, #1
 8004906:	e7a5      	b.n	8004854 <_svfiprintf_r+0xd4>
 8004908:	2300      	movs	r3, #0
 800490a:	3401      	adds	r4, #1
 800490c:	9305      	str	r3, [sp, #20]
 800490e:	4619      	mov	r1, r3
 8004910:	f04f 0c0a 	mov.w	ip, #10
 8004914:	4620      	mov	r0, r4
 8004916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800491a:	3a30      	subs	r2, #48	; 0x30
 800491c:	2a09      	cmp	r2, #9
 800491e:	d903      	bls.n	8004928 <_svfiprintf_r+0x1a8>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0c5      	beq.n	80048b0 <_svfiprintf_r+0x130>
 8004924:	9105      	str	r1, [sp, #20]
 8004926:	e7c3      	b.n	80048b0 <_svfiprintf_r+0x130>
 8004928:	fb0c 2101 	mla	r1, ip, r1, r2
 800492c:	4604      	mov	r4, r0
 800492e:	2301      	movs	r3, #1
 8004930:	e7f0      	b.n	8004914 <_svfiprintf_r+0x194>
 8004932:	ab03      	add	r3, sp, #12
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462a      	mov	r2, r5
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <_svfiprintf_r+0x1f8>)
 800493a:	a904      	add	r1, sp, #16
 800493c:	4638      	mov	r0, r7
 800493e:	f3af 8000 	nop.w
 8004942:	1c42      	adds	r2, r0, #1
 8004944:	4606      	mov	r6, r0
 8004946:	d1d6      	bne.n	80048f6 <_svfiprintf_r+0x176>
 8004948:	89ab      	ldrh	r3, [r5, #12]
 800494a:	065b      	lsls	r3, r3, #25
 800494c:	f53f af2c 	bmi.w	80047a8 <_svfiprintf_r+0x28>
 8004950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004952:	b01d      	add	sp, #116	; 0x74
 8004954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004958:	ab03      	add	r3, sp, #12
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	462a      	mov	r2, r5
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <_svfiprintf_r+0x1f8>)
 8004960:	a904      	add	r1, sp, #16
 8004962:	4638      	mov	r0, r7
 8004964:	f000 f87a 	bl	8004a5c <_printf_i>
 8004968:	e7eb      	b.n	8004942 <_svfiprintf_r+0x1c2>
 800496a:	bf00      	nop
 800496c:	08005524 	.word	0x08005524
 8004970:	0800552e 	.word	0x0800552e
 8004974:	00000000 	.word	0x00000000
 8004978:	080046c9 	.word	0x080046c9
 800497c:	0800552a 	.word	0x0800552a

08004980 <_printf_common>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4616      	mov	r6, r2
 8004986:	4699      	mov	r9, r3
 8004988:	688a      	ldr	r2, [r1, #8]
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004990:	4293      	cmp	r3, r2
 8004992:	bfb8      	it	lt
 8004994:	4613      	movlt	r3, r2
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800499c:	4607      	mov	r7, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	b10a      	cbz	r2, 80049a6 <_printf_common+0x26>
 80049a2:	3301      	adds	r3, #1
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	0699      	lsls	r1, r3, #26
 80049aa:	bf42      	ittt	mi
 80049ac:	6833      	ldrmi	r3, [r6, #0]
 80049ae:	3302      	addmi	r3, #2
 80049b0:	6033      	strmi	r3, [r6, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	f015 0506 	ands.w	r5, r5, #6
 80049b8:	d106      	bne.n	80049c8 <_printf_common+0x48>
 80049ba:	f104 0a19 	add.w	sl, r4, #25
 80049be:	68e3      	ldr	r3, [r4, #12]
 80049c0:	6832      	ldr	r2, [r6, #0]
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	dc26      	bgt.n	8004a16 <_printf_common+0x96>
 80049c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049cc:	1e13      	subs	r3, r2, #0
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	bf18      	it	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	0692      	lsls	r2, r2, #26
 80049d6:	d42b      	bmi.n	8004a30 <_printf_common+0xb0>
 80049d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d01e      	beq.n	8004a24 <_printf_common+0xa4>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	68e5      	ldr	r5, [r4, #12]
 80049ea:	6832      	ldr	r2, [r6, #0]
 80049ec:	f003 0306 	and.w	r3, r3, #6
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	bf08      	it	eq
 80049f4:	1aad      	subeq	r5, r5, r2
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	bf0c      	ite	eq
 80049fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a00:	2500      	movne	r5, #0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bfc4      	itt	gt
 8004a06:	1a9b      	subgt	r3, r3, r2
 8004a08:	18ed      	addgt	r5, r5, r3
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	341a      	adds	r4, #26
 8004a0e:	42b5      	cmp	r5, r6
 8004a10:	d11a      	bne.n	8004a48 <_printf_common+0xc8>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e008      	b.n	8004a28 <_printf_common+0xa8>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4652      	mov	r2, sl
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	47c0      	blx	r8
 8004a20:	3001      	adds	r0, #1
 8004a22:	d103      	bne.n	8004a2c <_printf_common+0xac>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	e7c6      	b.n	80049be <_printf_common+0x3e>
 8004a30:	18e1      	adds	r1, r4, r3
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	2030      	movs	r0, #48	; 0x30
 8004a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3a:	4422      	add	r2, r4
 8004a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a44:	3302      	adds	r3, #2
 8004a46:	e7c7      	b.n	80049d8 <_printf_common+0x58>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	4638      	mov	r0, r7
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0e6      	beq.n	8004a24 <_printf_common+0xa4>
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7d9      	b.n	8004a0e <_printf_common+0x8e>
	...

08004a5c <_printf_i>:
 8004a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	7e0f      	ldrb	r7, [r1, #24]
 8004a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a64:	2f78      	cmp	r7, #120	; 0x78
 8004a66:	4691      	mov	r9, r2
 8004a68:	4680      	mov	r8, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	469a      	mov	sl, r3
 8004a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a72:	d807      	bhi.n	8004a84 <_printf_i+0x28>
 8004a74:	2f62      	cmp	r7, #98	; 0x62
 8004a76:	d80a      	bhi.n	8004a8e <_printf_i+0x32>
 8004a78:	2f00      	cmp	r7, #0
 8004a7a:	f000 80d8 	beq.w	8004c2e <_printf_i+0x1d2>
 8004a7e:	2f58      	cmp	r7, #88	; 0x58
 8004a80:	f000 80a3 	beq.w	8004bca <_printf_i+0x16e>
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a8c:	e03a      	b.n	8004b04 <_printf_i+0xa8>
 8004a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a92:	2b15      	cmp	r3, #21
 8004a94:	d8f6      	bhi.n	8004a84 <_printf_i+0x28>
 8004a96:	a101      	add	r1, pc, #4	; (adr r1, 8004a9c <_printf_i+0x40>)
 8004a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004b09 	.word	0x08004b09
 8004aa4:	08004a85 	.word	0x08004a85
 8004aa8:	08004a85 	.word	0x08004a85
 8004aac:	08004a85 	.word	0x08004a85
 8004ab0:	08004a85 	.word	0x08004a85
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004a85 	.word	0x08004a85
 8004abc:	08004a85 	.word	0x08004a85
 8004ac0:	08004a85 	.word	0x08004a85
 8004ac4:	08004a85 	.word	0x08004a85
 8004ac8:	08004c15 	.word	0x08004c15
 8004acc:	08004b39 	.word	0x08004b39
 8004ad0:	08004bf7 	.word	0x08004bf7
 8004ad4:	08004a85 	.word	0x08004a85
 8004ad8:	08004a85 	.word	0x08004a85
 8004adc:	08004c37 	.word	0x08004c37
 8004ae0:	08004a85 	.word	0x08004a85
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004a85 	.word	0x08004a85
 8004aec:	08004a85 	.word	0x08004a85
 8004af0:	08004bff 	.word	0x08004bff
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	602a      	str	r2, [r5, #0]
 8004afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0a3      	b.n	8004c50 <_printf_i+0x1f4>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	6829      	ldr	r1, [r5, #0]
 8004b0c:	0606      	lsls	r6, r0, #24
 8004b0e:	f101 0304 	add.w	r3, r1, #4
 8004b12:	d50a      	bpl.n	8004b2a <_printf_i+0xce>
 8004b14:	680e      	ldr	r6, [r1, #0]
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	da03      	bge.n	8004b24 <_printf_i+0xc8>
 8004b1c:	232d      	movs	r3, #45	; 0x2d
 8004b1e:	4276      	negs	r6, r6
 8004b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b24:	485e      	ldr	r0, [pc, #376]	; (8004ca0 <_printf_i+0x244>)
 8004b26:	230a      	movs	r3, #10
 8004b28:	e019      	b.n	8004b5e <_printf_i+0x102>
 8004b2a:	680e      	ldr	r6, [r1, #0]
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b32:	bf18      	it	ne
 8004b34:	b236      	sxthne	r6, r6
 8004b36:	e7ef      	b.n	8004b18 <_printf_i+0xbc>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	0601      	lsls	r1, r0, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xec>
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0xf2>
 8004b48:	0646      	lsls	r6, r0, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xe8>
 8004b4c:	881e      	ldrh	r6, [r3, #0]
 8004b4e:	4854      	ldr	r0, [pc, #336]	; (8004ca0 <_printf_i+0x244>)
 8004b50:	2f6f      	cmp	r7, #111	; 0x6f
 8004b52:	bf0c      	ite	eq
 8004b54:	2308      	moveq	r3, #8
 8004b56:	230a      	movne	r3, #10
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b5e:	6865      	ldr	r5, [r4, #4]
 8004b60:	60a5      	str	r5, [r4, #8]
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	bfa2      	ittt	ge
 8004b66:	6821      	ldrge	r1, [r4, #0]
 8004b68:	f021 0104 	bicge.w	r1, r1, #4
 8004b6c:	6021      	strge	r1, [r4, #0]
 8004b6e:	b90e      	cbnz	r6, 8004b74 <_printf_i+0x118>
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	d04d      	beq.n	8004c10 <_printf_i+0x1b4>
 8004b74:	4615      	mov	r5, r2
 8004b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b7e:	5dc7      	ldrb	r7, [r0, r7]
 8004b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b84:	4637      	mov	r7, r6
 8004b86:	42bb      	cmp	r3, r7
 8004b88:	460e      	mov	r6, r1
 8004b8a:	d9f4      	bls.n	8004b76 <_printf_i+0x11a>
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d10b      	bne.n	8004ba8 <_printf_i+0x14c>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07de      	lsls	r6, r3, #31
 8004b94:	d508      	bpl.n	8004ba8 <_printf_i+0x14c>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	6861      	ldr	r1, [r4, #4]
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	bfde      	ittt	le
 8004b9e:	2330      	movle	r3, #48	; 0x30
 8004ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ba8:	1b52      	subs	r2, r2, r5
 8004baa:	6122      	str	r2, [r4, #16]
 8004bac:	f8cd a000 	str.w	sl, [sp]
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f7ff fee2 	bl	8004980 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14c      	bne.n	8004c5a <_printf_i+0x1fe>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc4:	b004      	add	sp, #16
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bca:	4835      	ldr	r0, [pc, #212]	; (8004ca0 <_printf_i+0x244>)
 8004bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bd0:	6829      	ldr	r1, [r5, #0]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd8:	6029      	str	r1, [r5, #0]
 8004bda:	061d      	lsls	r5, r3, #24
 8004bdc:	d514      	bpl.n	8004c08 <_printf_i+0x1ac>
 8004bde:	07df      	lsls	r7, r3, #31
 8004be0:	bf44      	itt	mi
 8004be2:	f043 0320 	orrmi.w	r3, r3, #32
 8004be6:	6023      	strmi	r3, [r4, #0]
 8004be8:	b91e      	cbnz	r6, 8004bf2 <_printf_i+0x196>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f023 0320 	bic.w	r3, r3, #32
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	e7b0      	b.n	8004b58 <_printf_i+0xfc>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f043 0320 	orr.w	r3, r3, #32
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	2378      	movs	r3, #120	; 0x78
 8004c00:	4828      	ldr	r0, [pc, #160]	; (8004ca4 <_printf_i+0x248>)
 8004c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c06:	e7e3      	b.n	8004bd0 <_printf_i+0x174>
 8004c08:	0659      	lsls	r1, r3, #25
 8004c0a:	bf48      	it	mi
 8004c0c:	b2b6      	uxthmi	r6, r6
 8004c0e:	e7e6      	b.n	8004bde <_printf_i+0x182>
 8004c10:	4615      	mov	r5, r2
 8004c12:	e7bb      	b.n	8004b8c <_printf_i+0x130>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	6826      	ldr	r6, [r4, #0]
 8004c18:	6961      	ldr	r1, [r4, #20]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	6028      	str	r0, [r5, #0]
 8004c1e:	0635      	lsls	r5, r6, #24
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0x1cc>
 8004c24:	6019      	str	r1, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0x1d2>
 8004c28:	0670      	lsls	r0, r6, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0x1c8>
 8004c2c:	8019      	strh	r1, [r3, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	4615      	mov	r5, r2
 8004c34:	e7ba      	b.n	8004bac <_printf_i+0x150>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7fb fadc 	bl	8000200 <memchr>
 8004c48:	b108      	cbz	r0, 8004c4e <_printf_i+0x1f2>
 8004c4a:	1b40      	subs	r0, r0, r5
 8004c4c:	6060      	str	r0, [r4, #4]
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	2300      	movs	r3, #0
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c58:	e7a8      	b.n	8004bac <_printf_i+0x150>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4640      	mov	r0, r8
 8004c62:	47d0      	blx	sl
 8004c64:	3001      	adds	r0, #1
 8004c66:	d0ab      	beq.n	8004bc0 <_printf_i+0x164>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	d413      	bmi.n	8004c96 <_printf_i+0x23a>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e7a4      	b.n	8004bc4 <_printf_i+0x168>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d09b      	beq.n	8004bc0 <_printf_i+0x164>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dcf2      	bgt.n	8004c7a <_printf_i+0x21e>
 8004c94:	e7eb      	b.n	8004c6e <_printf_i+0x212>
 8004c96:	2500      	movs	r5, #0
 8004c98:	f104 0619 	add.w	r6, r4, #25
 8004c9c:	e7f5      	b.n	8004c8a <_printf_i+0x22e>
 8004c9e:	bf00      	nop
 8004ca0:	08005535 	.word	0x08005535
 8004ca4:	08005546 	.word	0x08005546

08004ca8 <memcpy>:
 8004ca8:	440a      	add	r2, r1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cb0:	d100      	bne.n	8004cb4 <memcpy+0xc>
 8004cb2:	4770      	bx	lr
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	d1f9      	bne.n	8004cb6 <memcpy+0xe>
 8004cc2:	bd10      	pop	{r4, pc}

08004cc4 <memmove>:
 8004cc4:	4288      	cmp	r0, r1
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	eb01 0402 	add.w	r4, r1, r2
 8004ccc:	d902      	bls.n	8004cd4 <memmove+0x10>
 8004cce:	4284      	cmp	r4, r0
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	d807      	bhi.n	8004ce4 <memmove+0x20>
 8004cd4:	1e43      	subs	r3, r0, #1
 8004cd6:	42a1      	cmp	r1, r4
 8004cd8:	d008      	beq.n	8004cec <memmove+0x28>
 8004cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ce2:	e7f8      	b.n	8004cd6 <memmove+0x12>
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d100      	bne.n	8004cee <memmove+0x2a>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf6:	e7f7      	b.n	8004ce8 <memmove+0x24>

08004cf8 <_free_r>:
 8004cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	d044      	beq.n	8004d88 <_free_r+0x90>
 8004cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d02:	9001      	str	r0, [sp, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f1a1 0404 	sub.w	r4, r1, #4
 8004d0a:	bfb8      	it	lt
 8004d0c:	18e4      	addlt	r4, r4, r3
 8004d0e:	f000 f913 	bl	8004f38 <__malloc_lock>
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <_free_r+0x94>)
 8004d14:	9801      	ldr	r0, [sp, #4]
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	b933      	cbnz	r3, 8004d28 <_free_r+0x30>
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	6014      	str	r4, [r2, #0]
 8004d1e:	b003      	add	sp, #12
 8004d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d24:	f000 b90e 	b.w	8004f44 <__malloc_unlock>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d908      	bls.n	8004d3e <_free_r+0x46>
 8004d2c:	6825      	ldr	r5, [r4, #0]
 8004d2e:	1961      	adds	r1, r4, r5
 8004d30:	428b      	cmp	r3, r1
 8004d32:	bf01      	itttt	eq
 8004d34:	6819      	ldreq	r1, [r3, #0]
 8004d36:	685b      	ldreq	r3, [r3, #4]
 8004d38:	1949      	addeq	r1, r1, r5
 8004d3a:	6021      	streq	r1, [r4, #0]
 8004d3c:	e7ed      	b.n	8004d1a <_free_r+0x22>
 8004d3e:	461a      	mov	r2, r3
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b10b      	cbz	r3, 8004d48 <_free_r+0x50>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d9fa      	bls.n	8004d3e <_free_r+0x46>
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	1855      	adds	r5, r2, r1
 8004d4c:	42a5      	cmp	r5, r4
 8004d4e:	d10b      	bne.n	8004d68 <_free_r+0x70>
 8004d50:	6824      	ldr	r4, [r4, #0]
 8004d52:	4421      	add	r1, r4
 8004d54:	1854      	adds	r4, r2, r1
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	d1e0      	bne.n	8004d1e <_free_r+0x26>
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	6053      	str	r3, [r2, #4]
 8004d62:	4421      	add	r1, r4
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	e7da      	b.n	8004d1e <_free_r+0x26>
 8004d68:	d902      	bls.n	8004d70 <_free_r+0x78>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	6003      	str	r3, [r0, #0]
 8004d6e:	e7d6      	b.n	8004d1e <_free_r+0x26>
 8004d70:	6825      	ldr	r5, [r4, #0]
 8004d72:	1961      	adds	r1, r4, r5
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf04      	itt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	bf04      	itt	eq
 8004d80:	1949      	addeq	r1, r1, r5
 8004d82:	6021      	streq	r1, [r4, #0]
 8004d84:	6054      	str	r4, [r2, #4]
 8004d86:	e7ca      	b.n	8004d1e <_free_r+0x26>
 8004d88:	b003      	add	sp, #12
 8004d8a:	bd30      	pop	{r4, r5, pc}
 8004d8c:	200011b0 	.word	0x200011b0

08004d90 <sbrk_aligned>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4e0e      	ldr	r6, [pc, #56]	; (8004dcc <sbrk_aligned+0x3c>)
 8004d94:	460c      	mov	r4, r1
 8004d96:	6831      	ldr	r1, [r6, #0]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	b911      	cbnz	r1, 8004da2 <sbrk_aligned+0x12>
 8004d9c:	f000 f8bc 	bl	8004f18 <_sbrk_r>
 8004da0:	6030      	str	r0, [r6, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f8b7 	bl	8004f18 <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d00a      	beq.n	8004dc4 <sbrk_aligned+0x34>
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d007      	beq.n	8004dc8 <sbrk_aligned+0x38>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 f8ac 	bl	8004f18 <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d101      	bne.n	8004dc8 <sbrk_aligned+0x38>
 8004dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	200011b4 	.word	0x200011b4

08004dd0 <_malloc_r>:
 8004dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd4:	1ccd      	adds	r5, r1, #3
 8004dd6:	f025 0503 	bic.w	r5, r5, #3
 8004dda:	3508      	adds	r5, #8
 8004ddc:	2d0c      	cmp	r5, #12
 8004dde:	bf38      	it	cc
 8004de0:	250c      	movcc	r5, #12
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	4607      	mov	r7, r0
 8004de6:	db01      	blt.n	8004dec <_malloc_r+0x1c>
 8004de8:	42a9      	cmp	r1, r5
 8004dea:	d905      	bls.n	8004df8 <_malloc_r+0x28>
 8004dec:	230c      	movs	r3, #12
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	2600      	movs	r6, #0
 8004df2:	4630      	mov	r0, r6
 8004df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df8:	4e2e      	ldr	r6, [pc, #184]	; (8004eb4 <_malloc_r+0xe4>)
 8004dfa:	f000 f89d 	bl	8004f38 <__malloc_lock>
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	461c      	mov	r4, r3
 8004e02:	bb34      	cbnz	r4, 8004e52 <_malloc_r+0x82>
 8004e04:	4629      	mov	r1, r5
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ffc2 	bl	8004d90 <sbrk_aligned>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	4604      	mov	r4, r0
 8004e10:	d14d      	bne.n	8004eae <_malloc_r+0xde>
 8004e12:	6834      	ldr	r4, [r6, #0]
 8004e14:	4626      	mov	r6, r4
 8004e16:	2e00      	cmp	r6, #0
 8004e18:	d140      	bne.n	8004e9c <_malloc_r+0xcc>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4638      	mov	r0, r7
 8004e20:	eb04 0803 	add.w	r8, r4, r3
 8004e24:	f000 f878 	bl	8004f18 <_sbrk_r>
 8004e28:	4580      	cmp	r8, r0
 8004e2a:	d13a      	bne.n	8004ea2 <_malloc_r+0xd2>
 8004e2c:	6821      	ldr	r1, [r4, #0]
 8004e2e:	3503      	adds	r5, #3
 8004e30:	1a6d      	subs	r5, r5, r1
 8004e32:	f025 0503 	bic.w	r5, r5, #3
 8004e36:	3508      	adds	r5, #8
 8004e38:	2d0c      	cmp	r5, #12
 8004e3a:	bf38      	it	cc
 8004e3c:	250c      	movcc	r5, #12
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ffa5 	bl	8004d90 <sbrk_aligned>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d02b      	beq.n	8004ea2 <_malloc_r+0xd2>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	442b      	add	r3, r5
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	e00e      	b.n	8004e70 <_malloc_r+0xa0>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	1b52      	subs	r2, r2, r5
 8004e56:	d41e      	bmi.n	8004e96 <_malloc_r+0xc6>
 8004e58:	2a0b      	cmp	r2, #11
 8004e5a:	d916      	bls.n	8004e8a <_malloc_r+0xba>
 8004e5c:	1961      	adds	r1, r4, r5
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	bf18      	it	ne
 8004e64:	6059      	strne	r1, [r3, #4]
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	bf08      	it	eq
 8004e6a:	6031      	streq	r1, [r6, #0]
 8004e6c:	5162      	str	r2, [r4, r5]
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	4638      	mov	r0, r7
 8004e72:	f104 060b 	add.w	r6, r4, #11
 8004e76:	f000 f865 	bl	8004f44 <__malloc_unlock>
 8004e7a:	f026 0607 	bic.w	r6, r6, #7
 8004e7e:	1d23      	adds	r3, r4, #4
 8004e80:	1af2      	subs	r2, r6, r3
 8004e82:	d0b6      	beq.n	8004df2 <_malloc_r+0x22>
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	50a3      	str	r3, [r4, r2]
 8004e88:	e7b3      	b.n	8004df2 <_malloc_r+0x22>
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	bf0c      	ite	eq
 8004e90:	6032      	streq	r2, [r6, #0]
 8004e92:	605a      	strne	r2, [r3, #4]
 8004e94:	e7ec      	b.n	8004e70 <_malloc_r+0xa0>
 8004e96:	4623      	mov	r3, r4
 8004e98:	6864      	ldr	r4, [r4, #4]
 8004e9a:	e7b2      	b.n	8004e02 <_malloc_r+0x32>
 8004e9c:	4634      	mov	r4, r6
 8004e9e:	6876      	ldr	r6, [r6, #4]
 8004ea0:	e7b9      	b.n	8004e16 <_malloc_r+0x46>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f000 f84c 	bl	8004f44 <__malloc_unlock>
 8004eac:	e7a1      	b.n	8004df2 <_malloc_r+0x22>
 8004eae:	6025      	str	r5, [r4, #0]
 8004eb0:	e7de      	b.n	8004e70 <_malloc_r+0xa0>
 8004eb2:	bf00      	nop
 8004eb4:	200011b0 	.word	0x200011b0

08004eb8 <_realloc_r>:
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4614      	mov	r4, r2
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	b921      	cbnz	r1, 8004ece <_realloc_r+0x16>
 8004ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec8:	4611      	mov	r1, r2
 8004eca:	f7ff bf81 	b.w	8004dd0 <_malloc_r>
 8004ece:	b92a      	cbnz	r2, 8004edc <_realloc_r+0x24>
 8004ed0:	f7ff ff12 	bl	8004cf8 <_free_r>
 8004ed4:	4625      	mov	r5, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	f000 f838 	bl	8004f50 <_malloc_usable_size_r>
 8004ee0:	4284      	cmp	r4, r0
 8004ee2:	4607      	mov	r7, r0
 8004ee4:	d802      	bhi.n	8004eec <_realloc_r+0x34>
 8004ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eea:	d812      	bhi.n	8004f12 <_realloc_r+0x5a>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f7ff ff6e 	bl	8004dd0 <_malloc_r>
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d0ed      	beq.n	8004ed6 <_realloc_r+0x1e>
 8004efa:	42bc      	cmp	r4, r7
 8004efc:	4622      	mov	r2, r4
 8004efe:	4631      	mov	r1, r6
 8004f00:	bf28      	it	cs
 8004f02:	463a      	movcs	r2, r7
 8004f04:	f7ff fed0 	bl	8004ca8 <memcpy>
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fef4 	bl	8004cf8 <_free_r>
 8004f10:	e7e1      	b.n	8004ed6 <_realloc_r+0x1e>
 8004f12:	4635      	mov	r5, r6
 8004f14:	e7df      	b.n	8004ed6 <_realloc_r+0x1e>
	...

08004f18 <_sbrk_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_sbrk_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fc f93c 	bl	80011a0 <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_sbrk_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_sbrk_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200011b8 	.word	0x200011b8

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f000 b811 	b.w	8004f60 <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	200011bc 	.word	0x200011bc

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f000 b80c 	b.w	8004f62 <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	200011bc 	.word	0x200011bc

08004f50 <_malloc_usable_size_r>:
 8004f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f54:	1f18      	subs	r0, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfbc      	itt	lt
 8004f5a:	580b      	ldrlt	r3, [r1, r0]
 8004f5c:	18c0      	addlt	r0, r0, r3
 8004f5e:	4770      	bx	lr

08004f60 <__retarget_lock_acquire_recursive>:
 8004f60:	4770      	bx	lr

08004f62 <__retarget_lock_release_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
