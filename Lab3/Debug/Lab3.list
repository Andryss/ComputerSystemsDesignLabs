
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f8  080053f8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005400  08005400  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00001124  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011c0  200011c0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef91  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002254  00000000  00000000  0002f05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00031fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d8d  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100de  00000000  00000000  0003596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7eed  00000000  00000000  00045a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d938  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  0011d988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005014 	.word	0x08005014

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	08005014 	.word	0x08005014

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <is_buf_empty>:

_Bool is_buf_empty(struct Buffer* buf) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <is_buf_full>:

_Bool is_buf_full(struct Buffer* buf) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == 2048 - 1));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80005fe:	3301      	adds	r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8000606:	4293      	cmp	r3, r2
 8000608:	d00b      	beq.n	8000622 <is_buf_full+0x32>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000610:	2b00      	cmp	r3, #0
 8000612:	d108      	bne.n	8000626 <is_buf_full+0x36>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800061a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <is_buf_full+0x36>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <is_buf_full+0x38>
 8000626:	2300      	movs	r3, #0
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800064a:	e01e      	b.n	800068a <buf_push+0x50>
		if (is_buf_full(buf)) {
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffcf 	bl	80005f0 <is_buf_full>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11d      	bne.n	8000694 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800065e:	3301      	adds	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000666:	b29a      	uxth	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	5499      	strb	r1, [r3, r2]
		data++;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
		written++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3dc      	bcc.n	800064c <buf_push+0x12>
 8000692:	e000      	b.n	8000696 <buf_push+0x5c>
			break;
 8000694:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ffaa 	bl	80005f0 <is_buf_full>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00a      	beq.n	80006be <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2100      	movs	r1, #0
 80006ca:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <buf_pop>:

_Bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff74 	bl	80005d6 <is_buf_empty>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <buf_pop+0x1c>
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e04e      	b.n	8000796 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006fe:	3301      	adds	r3, #1
 8000700:	b29b      	uxth	r3, r3
 8000702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000706:	b29a      	uxth	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 8000712:	e01b      	b.n	800074c <buf_pop+0x70>
		if (read < size) {
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d20c      	bcs.n	8000736 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000722:	4619      	mov	r1, r3
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	5c52      	ldrb	r2, [r2, r1]
 800072e:	701a      	strb	r2, [r3, #0]
			read++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800073c:	3301      	adds	r3, #1
 800073e:	b29b      	uxth	r3, r3
 8000740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000744:	b29a      	uxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1db      	bne.n	8000714 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d102      	bne.n	800076a <buf_pop+0x8e>
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	e000      	b.n	800076c <buf_pop+0x90>
 800076a:	2200      	movs	r2, #0
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000784:	429a      	cmp	r2, r3
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_GPIO_Init+0x84>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_GPIO_Init+0x84>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_GPIO_Init+0x84>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_GPIO_Init+0x84>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MX_GPIO_Init+0x84>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_GPIO_Init+0x84>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <transmit+0x4c>)
 800083c:	f002 ffd1 	bl	80037e2 <HAL_UART_Transmit_IT>
 8000840:	4603      	mov	r3, r0
 8000842:	2b02      	cmp	r3, #2
 8000844:	d111      	bne.n	800086a <transmit+0x42>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000846:	f3ef 8310 	mrs	r3, PRIMASK
 800084a:	60fb      	str	r3, [r7, #12]
  return(result);
 800084c:	68fb      	ldr	r3, [r7, #12]
		uint32_t pmask = __get_PRIMASK();
 800084e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
		__disable_irq();
		buf_push(&transmitBuffer, data, size);
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <transmit+0x50>)
 800085a:	f7ff feee 	bl	800063a <buf_push>
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f383 8810 	msr	PRIMASK, r3
}
 8000868:	bf00      	nop
		__set_PRIMASK(pmask);
	}
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20001168 	.word	0x20001168
 8000878:	200008c0 	.word	0x200008c0

0800087c <transmitc>:

void transmitc(char* data) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fcb3 	bl	80001f0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffca 	bl	8000828 <transmit>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <receive>:

void receive() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 80008a0:	2201      	movs	r2, #1
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <receive+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <receive+0x18>)
 80008a6:	f002 ffe1 	bl	800386c <HAL_UART_Receive_IT>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200010c8 	.word	0x200010c8
 80008b4:	20001168 	.word	0x20001168

080008b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008c0:	f3ef 8310 	mrs	r3, PRIMASK
 80008c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80008c6:	68fb      	ldr	r3, [r7, #12]
	uint32_t pmask = __get_PRIMASK();
 80008c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80008ca:	b672      	cpsid	i
}
 80008cc:	bf00      	nop
	__disable_irq();
	buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 80008ce:	2201      	movs	r2, #1
 80008d0:	4908      	ldr	r1, [pc, #32]	; (80008f4 <HAL_UART_RxCpltCallback+0x3c>)
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_UART_RxCpltCallback+0x40>)
 80008d4:	f7ff feb1 	bl	800063a <buf_push>
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	f383 8810 	msr	PRIMASK, r3
}
 80008e2:	bf00      	nop
	__set_PRIMASK(pmask);

	transmit(char_buf, sizeof(char_buf));
 80008e4:	2101      	movs	r1, #1
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <HAL_UART_RxCpltCallback+0x3c>)
 80008e8:	f7ff ff9e 	bl	8000828 <transmit>
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200010c8 	.word	0x200010c8
 80008f8:	200000b8 	.word	0x200000b8

080008fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000902:	af00      	add	r7, sp, #0
 8000904:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000908:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800090c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800090e:	f3ef 8310 	mrs	r3, PRIMASK
 8000912:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  return(result);
 8000916:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
  uint8_t buf[1024];
  uint32_t pmask = __get_PRIMASK();
 800091a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
  __disable_irq();
  _Bool is_pop = buf_pop(&transmitBuffer, buf, sizeof(buf));
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <HAL_UART_TxCpltCallback+0x7c>)
 800092e:	f7ff fed5 	bl	80006dc <buf_pop>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
 8000938:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800093c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000940:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000944:	f383 8810 	msr	PRIMASK, r3
}
 8000948:	bf00      	nop
  __set_PRIMASK(pmask);
  if (is_pop) {
 800094a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00c      	beq.n	800096c <HAL_UART_TxCpltCallback+0x70>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc4a 	bl	80001f0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_TxCpltCallback+0x80>)
 8000968:	f002 ff3b 	bl	80037e2 <HAL_UART_Transmit_IT>
  }
}
 800096c:	bf00      	nop
 800096e:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200008c0 	.word	0x200008c0
 800097c:	20001168 	.word	0x20001168

08000980 <HAL_TIM_PeriodElapsedCallback>:

size_t edit_mode = 0;
uint16_t edit_mode_led = 0;
uint16_t edit_mode_brightness = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d15e      	bne.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0xd0>
		  if (cur_mode != -1) {
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099a:	d059      	beq.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0xd0>
			  if (cur_mode >= sizeof(mode_leds) / sizeof(uint16_t)) {
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d90c      	bls.n	80009be <HAL_TIM_PeriodElapsedCallback+0x3e>
				  htim4.Instance->CCR2 = 0;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
				  htim4.Instance->CCR3 = 0;
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
				  htim4.Instance->CCR4 = 0;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
 80009bc:	e044      	b.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0xc8>
			  } else {
				  uint16_t leds = mode_leds[cur_mode];
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c8:	81fb      	strh	r3, [r7, #14]
				  uint16_t brightness = mode_brightness[cur_mode];
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d4:	81bb      	strh	r3, [r7, #12]

				  if ((leds & 0x1) != 0) {
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d009      	beq.n	80009f4 <HAL_TIM_PeriodElapsedCallback+0x74>
					  htim4.Instance->CCR2 = brightness * 10;
 80009e0:	89ba      	ldrh	r2, [r7, #12]
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
 80009f2:	e003      	b.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x7c>
				  } else {
					  htim4.Instance->CCR2 = 0;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38
				  }

				  if ((leds & 0x2) != 0) {
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x9a>
					  htim4.Instance->CCR3 = brightness * 10;
 8000a06:	89ba      	ldrh	r2, [r7, #12]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a18:	e003      	b.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0xa2>
				  } else {
					  htim4.Instance->CCR3 = 0;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	63da      	str	r2, [r3, #60]	; 0x3c
				  }

				  if ((leds & 0x4) != 0) {
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0xc0>
					  htim4.Instance->CCR4 = brightness * 10;
 8000a2c:	89ba      	ldrh	r2, [r7, #12]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a3e:	e003      	b.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0xc8>
				  } else {
					  htim4.Instance->CCR4 = 0;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	641a      	str	r2, [r3, #64]	; 0x40
				  }
			  }

			  cur_mode = -1;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a4e:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40001000 	.word	0x40001000
 8000a60:	20000028 	.word	0x20000028
 8000a64:	200010d8 	.word	0x200010d8
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000014 	.word	0x20000014

08000a70 <leds_str.1>:
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_TIM4_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  char leds_str(uint16_t leds) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	f8c7 c000 	str.w	ip, [r7]
	  if (leds == 0x1) return 'G';
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <leds_str.1+0x18>
 8000a84:	2347      	movs	r3, #71	; 0x47
 8000a86:	e00a      	b.n	8000a9e <leds_str.1+0x2e>
	  if (leds == 0x2) return 'Y';
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d101      	bne.n	8000a92 <leds_str.1+0x22>
 8000a8e:	2359      	movs	r3, #89	; 0x59
 8000a90:	e005      	b.n	8000a9e <leds_str.1+0x2e>
	  if (leds == 0x4) return 'R';
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d101      	bne.n	8000a9c <leds_str.1+0x2c>
 8000a98:	2352      	movs	r3, #82	; 0x52
 8000a9a:	e000      	b.n	8000a9e <leds_str.1+0x2e>
	  return '?';
 8000a9c:	233f      	movs	r3, #63	; 0x3f
  }
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <main>:
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
int main(void)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000ab8:	f000 fdf0 	bl	800169c <HAL_Init>
  buf_init(&receiveBuffer);
 8000abc:	4830      	ldr	r0, [pc, #192]	; (8000b80 <main+0xd4>)
 8000abe:	f7ff fd71 	bl	80005a4 <buf_init>
  buf_init(&transmitBuffer);
 8000ac2:	4830      	ldr	r0, [pc, #192]	; (8000b84 <main+0xd8>)
 8000ac4:	f7ff fd6e 	bl	80005a4 <buf_init>
  SystemClock_Config();
 8000ac8:	f000 faf6 	bl	80010b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000acc:	f7ff fe68 	bl	80007a0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000ad0:	f000 fd40 	bl	8001554 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000ad4:	f000 fc04 	bl	80012e0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000ad8:	f000 fc8e 	bl	80013f8 <MX_TIM6_Init>
			  transmitc(buf);
		  }
	  }
  }

  if (!hello_print) {
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <main+0xdc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f083 0301 	eor.w	r3, r3, #1
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d009      	beq.n	8000afe <main+0x52>
	  hello_print = true;
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <main+0xdc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
	  transmitc("\n\r\n\rProgramm started\n\r");
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <main+0xe0>)
 8000af2:	f7ff fec3 	bl	800087c <transmitc>
	  print_mode_message();
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	469c      	mov	ip, r3
 8000afa:	f000 f853 	bl	8000ba4 <print_mode_message.0>
  }

  cur_mode = 0;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <main+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	4823      	ldr	r0, [pc, #140]	; (8000b94 <main+0xe8>)
 8000b08:	f001 fefc 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4821      	ldr	r0, [pc, #132]	; (8000b94 <main+0xe8>)
 8000b10:	f001 fef8 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b14:	210c      	movs	r1, #12
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <main+0xe8>)
 8000b18:	f001 fef4 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b1c:	481e      	ldr	r0, [pc, #120]	; (8000b98 <main+0xec>)
 8000b1e:	f001 fe27 	bl	8002770 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receive();
 8000b22:	f7ff febb 	bl	800089c <receive>

	  uint8_t read[2] = {0};
 8000b26:	2300      	movs	r3, #0
 8000b28:	803b      	strh	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8000b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8000b30:	68bb      	ldr	r3, [r7, #8]

	  uint32_t pmask = __get_PRIMASK();
 8000b32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
	  __disable_irq();
	  _Bool is_pop = buf_pop(&receiveBuffer, read, sizeof(read));
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <main+0xd4>)
 8000b40:	f7ff fdcc 	bl	80006dc <buf_pop>
 8000b44:	4603      	mov	r3, r0
 8000b46:	74fb      	strb	r3, [r7, #19]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f383 8810 	msr	PRIMASK, r3
}
 8000b52:	bf00      	nop
	  __set_PRIMASK(pmask);

	  if (is_pop) {
 8000b54:	7cfb      	ldrb	r3, [r7, #19]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0e3      	beq.n	8000b22 <main+0x76>
		  char c = (char) read[0];
 8000b5a:	783b      	ldrb	r3, [r7, #0]
 8000b5c:	74bb      	strb	r3, [r7, #18]
		  if (c == '\r') {
 8000b5e:	7cbb      	ldrb	r3, [r7, #18]
 8000b60:	2b0d      	cmp	r3, #13
 8000b62:	d103      	bne.n	8000b6c <main+0xc0>
			  transmitc("\n");
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <main+0xf0>)
 8000b66:	f7ff fe89 	bl	800087c <transmitc>
 8000b6a:	e002      	b.n	8000b72 <main+0xc6>
		  } else {
			  transmitc("\n\r");
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <main+0xf4>)
 8000b6e:	f7ff fe85 	bl	800087c <transmitc>
		  }
		  handle_command(c);
 8000b72:	7cbb      	ldrb	r3, [r7, #18]
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	4694      	mov	ip, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8d9 	bl	8000d30 <handle_command.2>
  {
 8000b7e:	e7d0      	b.n	8000b22 <main+0x76>
 8000b80:	200000b8 	.word	0x200000b8
 8000b84:	200008c0 	.word	0x200008c0
 8000b88:	200010c9 	.word	0x200010c9
 8000b8c:	0800502c 	.word	0x0800502c
 8000b90:	20000028 	.word	0x20000028
 8000b94:	200010d8 	.word	0x200010d8
 8000b98:	20001120 	.word	0x20001120
 8000b9c:	08005044 	.word	0x08005044
 8000ba0:	08005048 	.word	0x08005048

08000ba4 <print_mode_message.0>:
  void print_mode_message() {
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b0fb      	sub	sp, #492	; 0x1ec
 8000ba8:	af12      	add	r7, sp, #72	; 0x48
 8000baa:	4664      	mov	r4, ip
 8000bac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000bb4:	f8c3 c000 	str.w	ip, [r3]
	  char mode_leds_str[9] = {0};
 8000bb8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	711a      	strb	r2, [r3, #4]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000bd2:	e018      	b.n	8000c06 <print_mode_message.0+0x62>
		  mode_leds_str[i] = leds_str(mode_leds[i]);
 8000bd4:	4a53      	ldr	r2, [pc, #332]	; (8000d24 <print_mode_message.0+0x180>)
 8000bd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	46a4      	mov	ip, r4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff45 	bl	8000a70 <leds_str.1>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bee:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000bf2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000bfc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c00:	3301      	adds	r3, #1
 8000c02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d9e2      	bls.n	8000bd4 <print_mode_message.0+0x30>
	  char format[] = "Modes:\n\r1-%c%d\n\r2-%c%d\n\r3-%c%d\n\r4-%c%d\n\r5-%c%d\n\r6-%c%d\n\r7-%c%d\n\r8-%c%d\n\r9-%c%d\n\r> ";
 8000c0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c12:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <print_mode_message.0+0x184>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	2353      	movs	r3, #83	; 0x53
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f003 fd6e 	bl	8004700 <memcpy>
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c2c:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000c2e:	469c      	mov	ip, r3
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c30:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <print_mode_message.0+0x188>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c3e:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), format,
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <print_mode_message.0+0x188>)
 8000c44:	885b      	ldrh	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c50:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <print_mode_message.0+0x188>)
 8000c56:	889b      	ldrh	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000c58:	623b      	str	r3, [r7, #32]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c62:	78db      	ldrb	r3, [r3, #3]
	  snprintf(buf, sizeof(buf), format,
 8000c64:	61fb      	str	r3, [r7, #28]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <print_mode_message.0+0x188>)
 8000c68:	88db      	ldrh	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000c6a:	61bb      	str	r3, [r7, #24]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c6c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c74:	791b      	ldrb	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000c76:	617b      	str	r3, [r7, #20]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <print_mode_message.0+0x188>)
 8000c7a:	891b      	ldrh	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000c7c:	613b      	str	r3, [r7, #16]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c86:	795b      	ldrb	r3, [r3, #5]
	  snprintf(buf, sizeof(buf), format,
 8000c88:	60fb      	str	r3, [r7, #12]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <print_mode_message.0+0x188>)
 8000c8c:	895b      	ldrh	r3, [r3, #10]
	  snprintf(buf, sizeof(buf), format,
 8000c8e:	60bb      	str	r3, [r7, #8]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000c90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c98:	799b      	ldrb	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000c9a:	607b      	str	r3, [r7, #4]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <print_mode_message.0+0x188>)
 8000c9e:	899b      	ldrh	r3, [r3, #12]
	  snprintf(buf, sizeof(buf), format,
 8000ca0:	461e      	mov	r6, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000ca2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000caa:	79db      	ldrb	r3, [r3, #7]
	  snprintf(buf, sizeof(buf), format,
 8000cac:	461d      	mov	r5, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <print_mode_message.0+0x188>)
 8000cb0:	89db      	ldrh	r3, [r3, #14]
	  snprintf(buf, sizeof(buf), format,
 8000cb2:	461c      	mov	r4, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cb4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000cbe:	4619      	mov	r1, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <print_mode_message.0+0x188>)
 8000cc2:	8a1b      	ldrh	r3, [r3, #16]
	  snprintf(buf, sizeof(buf), format,
 8000cc4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000cc8:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000ccc:	9310      	str	r3, [sp, #64]	; 0x40
 8000cce:	910f      	str	r1, [sp, #60]	; 0x3c
 8000cd0:	940e      	str	r4, [sp, #56]	; 0x38
 8000cd2:	950d      	str	r5, [sp, #52]	; 0x34
 8000cd4:	960c      	str	r6, [sp, #48]	; 0x30
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	910b      	str	r1, [sp, #44]	; 0x2c
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	910a      	str	r1, [sp, #40]	; 0x28
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	9109      	str	r1, [sp, #36]	; 0x24
 8000ce2:	6939      	ldr	r1, [r7, #16]
 8000ce4:	9108      	str	r1, [sp, #32]
 8000ce6:	6979      	ldr	r1, [r7, #20]
 8000ce8:	9107      	str	r1, [sp, #28]
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	9106      	str	r1, [sp, #24]
 8000cee:	69f9      	ldr	r1, [r7, #28]
 8000cf0:	9105      	str	r1, [sp, #20]
 8000cf2:	6a39      	ldr	r1, [r7, #32]
 8000cf4:	9104      	str	r1, [sp, #16]
 8000cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cf8:	9103      	str	r1, [sp, #12]
 8000cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cfc:	9102      	str	r1, [sp, #8]
 8000cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d00:	9101      	str	r1, [sp, #4]
 8000d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4663      	mov	r3, ip
 8000d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0c:	f003 fd0e 	bl	800472c <sniprintf>
	  transmitc(buf);
 8000d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fdb1 	bl	800087c <transmitc>
  }
 8000d1a:	bf00      	nop
 8000d1c:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	0800504c 	.word	0x0800504c
 8000d2c:	20000014 	.word	0x20000014

08000d30 <handle_command.2>:
  void handle_command(char cmd) {
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b0a5      	sub	sp, #148	; 0x94
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	4664      	mov	r4, ip
 8000d3c:	f8c7 c000 	str.w	ip, [r7]
	  if (state == ST_MAIN) {
 8000d40:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <handle_command.2+0x268>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d133      	bne.n	8000db0 <handle_command.2+0x80>
		  if (cmd >= '1' && cmd <= '9') {
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b30      	cmp	r3, #48	; 0x30
 8000d4c:	d914      	bls.n	8000d78 <handle_command.2+0x48>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b39      	cmp	r3, #57	; 0x39
 8000d52:	d811      	bhi.n	8000d78 <handle_command.2+0x48>
			  cur_mode = (cmd - '1');
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	3b31      	subs	r3, #49	; 0x31
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b90      	ldr	r3, [pc, #576]	; (8000f9c <handle_command.2+0x26c>)
 8000d5c:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f107 000c 	add.w	r0, r7, #12
 8000d64:	4a8e      	ldr	r2, [pc, #568]	; (8000fa0 <handle_command.2+0x270>)
 8000d66:	2120      	movs	r1, #32
 8000d68:	f003 fce0 	bl	800472c <sniprintf>
			  transmitc(buf);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd83 	bl	800087c <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000d76:	e188      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '0') {
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b30      	cmp	r3, #48	; 0x30
 8000d7c:	d106      	bne.n	8000d8c <handle_command.2+0x5c>
			  cur_mode = 100;
 8000d7e:	4b87      	ldr	r3, [pc, #540]	; (8000f9c <handle_command.2+0x26c>)
 8000d80:	2264      	movs	r2, #100	; 0x64
 8000d82:	601a      	str	r2, [r3, #0]
			  transmitc("All LEDs off\n\r> ");
 8000d84:	4887      	ldr	r0, [pc, #540]	; (8000fa4 <handle_command.2+0x274>)
 8000d86:	f7ff fd79 	bl	800087c <transmitc>
  }
 8000d8a:	e17e      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b0d      	cmp	r3, #13
 8000d90:	d10a      	bne.n	8000da8 <handle_command.2+0x78>
			  state = ST_EDIT_WAIT_MODE;
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <handle_command.2+0x268>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	801a      	strh	r2, [r3, #0]
			  edit_mode = -1;
 8000d98:	4b83      	ldr	r3, [pc, #524]	; (8000fa8 <handle_command.2+0x278>)
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9e:	601a      	str	r2, [r3, #0]
			  transmitc("Enter edit mode\n\rChoose mode to edit [1-9]: ");
 8000da0:	4882      	ldr	r0, [pc, #520]	; (8000fac <handle_command.2+0x27c>)
 8000da2:	f7ff fd6b 	bl	800087c <transmitc>
  }
 8000da6:	e170      	b.n	800108a <handle_command.2+0x35a>
			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8000da8:	4881      	ldr	r0, [pc, #516]	; (8000fb0 <handle_command.2+0x280>)
 8000daa:	f7ff fd67 	bl	800087c <transmitc>
  }
 8000dae:	e16c      	b.n	800108a <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_MODE) {
 8000db0:	4b79      	ldr	r3, [pc, #484]	; (8000f98 <handle_command.2+0x268>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d147      	bne.n	8000e48 <handle_command.2+0x118>
		  if (cmd >= '1' && cmd <= '9') {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b30      	cmp	r3, #48	; 0x30
 8000dbc:	d916      	bls.n	8000dec <handle_command.2+0xbc>
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b39      	cmp	r3, #57	; 0x39
 8000dc2:	d813      	bhi.n	8000dec <handle_command.2+0xbc>
			  edit_mode = (cmd - '1');
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	3b31      	subs	r3, #49	; 0x31
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <handle_command.2+0x278>)
 8000dcc:	601a      	str	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000dce:	4b76      	ldr	r3, [pc, #472]	; (8000fa8 <handle_command.2+0x278>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3331      	adds	r3, #49	; 0x31
 8000dd4:	f107 000c 	add.w	r0, r7, #12
 8000dd8:	4a76      	ldr	r2, [pc, #472]	; (8000fb4 <handle_command.2+0x284>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	f003 fca6 	bl	800472c <sniprintf>
			  transmitc(buf);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fd49 	bl	800087c <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000dea:	e14e      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b0d      	cmp	r3, #13
 8000df0:	d112      	bne.n	8000e18 <handle_command.2+0xe8>
			  if (edit_mode == -1) {
 8000df2:	4b6d      	ldr	r3, [pc, #436]	; (8000fa8 <handle_command.2+0x278>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dfa:	d103      	bne.n	8000e04 <handle_command.2+0xd4>
				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 8000dfc:	486e      	ldr	r0, [pc, #440]	; (8000fb8 <handle_command.2+0x288>)
 8000dfe:	f7ff fd3d 	bl	800087c <transmitc>
  }
 8000e02:	e142      	b.n	800108a <handle_command.2+0x35a>
				  state = ST_EDIT_WAIT_LED;
 8000e04:	4b64      	ldr	r3, [pc, #400]	; (8000f98 <handle_command.2+0x268>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	801a      	strh	r2, [r3, #0]
				  edit_mode_led = 0;
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <handle_command.2+0x28c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
				  transmitc("Choose led for mode [g,y,r]: ");
 8000e10:	486b      	ldr	r0, [pc, #428]	; (8000fc0 <handle_command.2+0x290>)
 8000e12:	f7ff fd33 	bl	800087c <transmitc>
  }
 8000e16:	e138      	b.n	800108a <handle_command.2+0x35a>
			  if (edit_mode == -1) {
 8000e18:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <handle_command.2+0x278>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e20:	d103      	bne.n	8000e2a <handle_command.2+0xfa>
				  transmitc("Unknown. Choose mode to edit [1-9]: ");
 8000e22:	4868      	ldr	r0, [pc, #416]	; (8000fc4 <handle_command.2+0x294>)
 8000e24:	f7ff fd2a 	bl	800087c <transmitc>
  }
 8000e28:	e12f      	b.n	800108a <handle_command.2+0x35a>
				  snprintf(buf, sizeof(buf), "Selected %c. Enter or choose another mode [1-9]: ", ('1' + edit_mode));
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <handle_command.2+0x278>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3331      	adds	r3, #49	; 0x31
 8000e30:	f107 000c 	add.w	r0, r7, #12
 8000e34:	4a5f      	ldr	r2, [pc, #380]	; (8000fb4 <handle_command.2+0x284>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	f003 fc78 	bl	800472c <sniprintf>
				  transmitc(buf);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fd1b 	bl	800087c <transmitc>
  }
 8000e46:	e120      	b.n	800108a <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_LED) {
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <handle_command.2+0x268>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d157      	bne.n	8000f00 <handle_command.2+0x1d0>
		  if (cmd == 'g') {
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b67      	cmp	r3, #103	; 0x67
 8000e54:	d106      	bne.n	8000e64 <handle_command.2+0x134>
			  edit_mode_led = 0x1;
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <handle_command.2+0x28c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	801a      	strh	r2, [r3, #0]
			  transmitc("Green led. Enter or choose another led [g,y,r]: ");
 8000e5c:	485a      	ldr	r0, [pc, #360]	; (8000fc8 <handle_command.2+0x298>)
 8000e5e:	f7ff fd0d 	bl	800087c <transmitc>
  }
 8000e62:	e112      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == 'y') {
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b79      	cmp	r3, #121	; 0x79
 8000e68:	d106      	bne.n	8000e78 <handle_command.2+0x148>
			  edit_mode_led = 0x2;
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <handle_command.2+0x28c>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	801a      	strh	r2, [r3, #0]
			  transmitc("Yellow led. Enter or choose another led [g,y,r]: ");
 8000e70:	4856      	ldr	r0, [pc, #344]	; (8000fcc <handle_command.2+0x29c>)
 8000e72:	f7ff fd03 	bl	800087c <transmitc>
  }
 8000e76:	e108      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == 'r') {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b72      	cmp	r3, #114	; 0x72
 8000e7c:	d106      	bne.n	8000e8c <handle_command.2+0x15c>
			  edit_mode_led = 0x4;
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <handle_command.2+0x28c>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	801a      	strh	r2, [r3, #0]
			  transmitc("Red led. Enter or choose another led [g,y,r]: ");
 8000e84:	4852      	ldr	r0, [pc, #328]	; (8000fd0 <handle_command.2+0x2a0>)
 8000e86:	f7ff fcf9 	bl	800087c <transmitc>
  }
 8000e8a:	e0fe      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b0d      	cmp	r3, #13
 8000e90:	d111      	bne.n	8000eb6 <handle_command.2+0x186>
			  if (edit_mode_led == 0) {
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <handle_command.2+0x28c>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <handle_command.2+0x172>
				  transmitc("No led. Choose led for mode [g,y,r]: ");
 8000e9a:	484e      	ldr	r0, [pc, #312]	; (8000fd4 <handle_command.2+0x2a4>)
 8000e9c:	f7ff fcee 	bl	800087c <transmitc>
  }
 8000ea0:	e0f3      	b.n	800108a <handle_command.2+0x35a>
				  state = ST_EDIT_WAIT_BRIGHT;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <handle_command.2+0x268>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	801a      	strh	r2, [r3, #0]
				  edit_mode_brightness = 40;
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <handle_command.2+0x2a8>)
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	801a      	strh	r2, [r3, #0]
				  transmitc("40%. Enter or choose another brightness: ");
 8000eae:	484b      	ldr	r0, [pc, #300]	; (8000fdc <handle_command.2+0x2ac>)
 8000eb0:	f7ff fce4 	bl	800087c <transmitc>
  }
 8000eb4:	e0e9      	b.n	800108a <handle_command.2+0x35a>
			  if (edit_mode_led == 0) {
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <handle_command.2+0x28c>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <handle_command.2+0x196>
				  transmitc("Unknown. Choose led for mode [g,y,r]: ");
 8000ebe:	4848      	ldr	r0, [pc, #288]	; (8000fe0 <handle_command.2+0x2b0>)
 8000ec0:	f7ff fcdc 	bl	800087c <transmitc>
  }
 8000ec4:	e0e1      	b.n	800108a <handle_command.2+0x35a>
				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <handle_command.2+0x28c>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d007      	beq.n	8000ede <handle_command.2+0x1ae>
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <handle_command.2+0x28c>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d101      	bne.n	8000eda <handle_command.2+0x1aa>
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <handle_command.2+0x2b4>)
 8000ed8:	e002      	b.n	8000ee0 <handle_command.2+0x1b0>
 8000eda:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <handle_command.2+0x2b8>)
 8000edc:	e000      	b.n	8000ee0 <handle_command.2+0x1b0>
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <handle_command.2+0x2bc>)
 8000ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  snprintf(buf, sizeof(buf), "%s led. Enter or choose another led [g,y,r]: ", led);
 8000ee4:	f107 000c 	add.w	r0, r7, #12
 8000ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eec:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <handle_command.2+0x2c0>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	f003 fc1c 	bl	800472c <sniprintf>
				  transmitc(buf);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fcbf 	bl	800087c <transmitc>
  }
 8000efe:	e0c4      	b.n	800108a <handle_command.2+0x35a>
	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <handle_command.2+0x268>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	f040 80c0 	bne.w	800108a <handle_command.2+0x35a>
		  if (cmd >= '1' && cmd <= '9') {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b30      	cmp	r3, #48	; 0x30
 8000f0e:	d91a      	bls.n	8000f46 <handle_command.2+0x216>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b39      	cmp	r3, #57	; 0x39
 8000f14:	d817      	bhi.n	8000f46 <handle_command.2+0x216>
			  edit_mode_brightness = (cmd - '0') * 10;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	3b30      	subs	r3, #48	; 0x30
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f28:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	f107 000c 	add.w	r0, r7, #12
 8000f32:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <handle_command.2+0x2c4>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	f003 fbf9 	bl	800472c <sniprintf>
			  transmitc(buf);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc9c 	bl	800087c <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000f44:	e0a1      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '0') {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b30      	cmp	r3, #48	; 0x30
 8000f4a:	d106      	bne.n	8000f5a <handle_command.2+0x22a>
			  edit_mode_brightness = 100;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f4e:	2264      	movs	r2, #100	; 0x64
 8000f50:	801a      	strh	r2, [r3, #0]
			  transmitc("100%. Enter or choose another: ");
 8000f52:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <handle_command.2+0x2c8>)
 8000f54:	f7ff fc92 	bl	800087c <transmitc>
  }
 8000f58:	e097      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '+') {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b2b      	cmp	r3, #43	; 0x2b
 8000f5e:	d14d      	bne.n	8000ffc <handle_command.2+0x2cc>
			  edit_mode_brightness += 10;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	330a      	adds	r3, #10
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f6a:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	2b64      	cmp	r3, #100	; 0x64
 8000f72:	d902      	bls.n	8000f7a <handle_command.2+0x24a>
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f76:	2264      	movs	r2, #100	; 0x64
 8000f78:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <handle_command.2+0x2a8>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f107 000c 	add.w	r0, r7, #12
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <handle_command.2+0x2c4>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	f003 fbd1 	bl	800472c <sniprintf>
			  transmitc(buf);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc74 	bl	800087c <transmitc>
  }
 8000f94:	e079      	b.n	800108a <handle_command.2+0x35a>
 8000f96:	bf00      	nop
 8000f98:	200010ca 	.word	0x200010ca
 8000f9c:	20000028 	.word	0x20000028
 8000fa0:	080050a0 	.word	0x080050a0
 8000fa4:	080050b8 	.word	0x080050b8
 8000fa8:	200010cc 	.word	0x200010cc
 8000fac:	080050cc 	.word	0x080050cc
 8000fb0:	080050fc 	.word	0x080050fc
 8000fb4:	0800512c 	.word	0x0800512c
 8000fb8:	08005160 	.word	0x08005160
 8000fbc:	200010d0 	.word	0x200010d0
 8000fc0:	08005190 	.word	0x08005190
 8000fc4:	080051b0 	.word	0x080051b0
 8000fc8:	080051d8 	.word	0x080051d8
 8000fcc:	0800520c 	.word	0x0800520c
 8000fd0:	08005240 	.word	0x08005240
 8000fd4:	08005270 	.word	0x08005270
 8000fd8:	200010d2 	.word	0x200010d2
 8000fdc:	08005298 	.word	0x08005298
 8000fe0:	080052c4 	.word	0x080052c4
 8000fe4:	080052ec 	.word	0x080052ec
 8000fe8:	080052f4 	.word	0x080052f4
 8000fec:	080052f8 	.word	0x080052f8
 8000ff0:	08005300 	.word	0x08005300
 8000ff4:	08005330 	.word	0x08005330
 8000ff8:	08005350 	.word	0x08005350
		  } else if (cmd == '-') {
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b2d      	cmp	r3, #45	; 0x2d
 8001000:	d11a      	bne.n	8001038 <handle_command.2+0x308>
			  edit_mode_brightness -= 10;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <handle_command.2+0x364>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	3b0a      	subs	r3, #10
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <handle_command.2+0x364>)
 800100c:	801a      	strh	r2, [r3, #0]
			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <handle_command.2+0x364>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2b09      	cmp	r3, #9
 8001014:	d802      	bhi.n	800101c <handle_command.2+0x2ec>
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <handle_command.2+0x364>)
 8001018:	220a      	movs	r2, #10
 800101a:	801a      	strh	r2, [r3, #0]
			  snprintf(buf, sizeof(buf), "%d%%. Enter or choose another: ", edit_mode_brightness);
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <handle_command.2+0x364>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f107 000c 	add.w	r0, r7, #12
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <handle_command.2+0x368>)
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	f003 fb80 	bl	800472c <sniprintf>
			  transmitc(buf);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fc23 	bl	800087c <transmitc>
  }
 8001036:	e028      	b.n	800108a <handle_command.2+0x35a>
		  } else if (cmd == '\r') {
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b0d      	cmp	r3, #13
 800103c:	d117      	bne.n	800106e <handle_command.2+0x33e>
			  state = ST_MAIN;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <handle_command.2+0x36c>)
 8001040:	2200      	movs	r2, #0
 8001042:	801a      	strh	r2, [r3, #0]
			  mode_leds[edit_mode] = edit_mode_led;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <handle_command.2+0x370>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <handle_command.2+0x374>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <handle_command.2+0x378>)
 800104e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  mode_brightness[edit_mode] = edit_mode_brightness;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <handle_command.2+0x370>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <handle_command.2+0x364>)
 8001058:	8811      	ldrh	r1, [r2, #0]
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <handle_command.2+0x37c>)
 800105c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  transmitc("Exit edit mode");
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <handle_command.2+0x380>)
 8001062:	f7ff fc0b 	bl	800087c <transmitc>
			  print_mode_message();
 8001066:	46a4      	mov	ip, r4
 8001068:	f7ff fd9c 	bl	8000ba4 <print_mode_message.0>
  }
 800106c:	e00d      	b.n	800108a <handle_command.2+0x35a>
			  snprintf(buf, sizeof(buf), "Unknown. %d%%. Enter or choose another: ", edit_mode_brightness);
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <handle_command.2+0x364>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	f107 000c 	add.w	r0, r7, #12
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <handle_command.2+0x384>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	f003 fb57 	bl	800472c <sniprintf>
			  transmitc(buf);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fbfa 	bl	800087c <transmitc>
  }
 8001088:	e7ff      	b.n	800108a <handle_command.2+0x35a>
 800108a:	bf00      	nop
 800108c:	3794      	adds	r7, #148	; 0x94
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	200010d2 	.word	0x200010d2
 8001098:	08005330 	.word	0x08005330
 800109c:	200010ca 	.word	0x200010ca
 80010a0:	200010cc 	.word	0x200010cc
 80010a4:	200010d0 	.word	0x200010d0
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000014 	.word	0x20000014
 80010b0:	08005370 	.word	0x08005370
 80010b4:	08005380 	.word	0x08005380

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fb28 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <SystemClock_Config+0xb8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <SystemClock_Config+0xb8>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <SystemClock_Config+0xb8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <SystemClock_Config+0xbc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <SystemClock_Config+0xbc>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <SystemClock_Config+0xbc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001120:	2310      	movs	r3, #16
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fe77 	bl	8001e20 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001138:	f000 f81e 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f8da 	bl	8002310 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001162:	f000 f809 	bl	8001178 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 fa8e 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <TIM6_DAC_IRQHandler+0x10>)
 800122e:	f001 fc31 	bl	8002a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20001120 	.word	0x20001120

0800123c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <USART6_IRQHandler+0x10>)
 8001242:	f002 fb43 	bl	80038cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20001168 	.word	0x20001168

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f003 fa14 	bl	80046ac <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20030000 	.word	0x20030000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	200010d4 	.word	0x200010d4
 80012b8:	200011c0 	.word	0x200011c0

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001312:	4a38      	ldr	r2, [pc, #224]	; (80013f4 <MX_TIM4_Init+0x114>)
 8001314:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001318:	220f      	movs	r2, #15
 800131a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_TIM4_Init+0x110>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <MX_TIM4_Init+0x110>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001336:	482e      	ldr	r0, [pc, #184]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001338:	f001 f9ca 	bl	80026d0 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001342:	f7ff ff19 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001350:	4619      	mov	r1, r3
 8001352:	4827      	ldr	r0, [pc, #156]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001354:	f001 fd68 	bl	8002e28 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800135e:	f7ff ff0b 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001364:	f001 fa74 	bl	8002850 <HAL_TIM_PWM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800136e:	f7ff ff03 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	4619      	mov	r1, r3
 8001380:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_TIM4_Init+0x110>)
 8001382:	f002 f951 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800138c:	f7ff fef4 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	2360      	movs	r3, #96	; 0x60
 8001392:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <MX_TIM4_Init+0x110>)
 80013a8:	f001 fc7c 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013b2:	f7ff fee1 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2208      	movs	r2, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM4_Init+0x110>)
 80013be:	f001 fc71 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80013c8:	f7ff fed6 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	220c      	movs	r2, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_TIM4_Init+0x110>)
 80013d4:	f001 fc66 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80013de:	f7ff fecb 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM4_Init+0x110>)
 80013e4:	f000 f87c 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3738      	adds	r7, #56	; 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200010d8 	.word	0x200010d8
 80013f4:	40000800 	.word	0x40000800

080013f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM6_Init+0x64>)
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <MX_TIM6_Init+0x68>)
 800140a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_TIM6_Init+0x64>)
 800140e:	220f      	movs	r2, #15
 8001410:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_TIM6_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_TIM6_Init+0x64>)
 800141a:	f242 720f 	movw	r2, #9999	; 0x270f
 800141e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_TIM6_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM6_Init+0x64>)
 8001428:	f001 f952 	bl	80026d0 <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001432:	f7ff fea1 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM6_Init+0x64>)
 8001444:	f002 f8f0 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800144e:	f7ff fe93 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20001120 	.word	0x20001120
 8001460:	40001000 	.word	0x40001000

08001464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_TIM_Base_MspInit+0x70>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10e      	bne.n	8001494 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001492:	e01a      	b.n	80014ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_TIM_Base_MspInit+0x78>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d115      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x74>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2036      	movs	r0, #54	; 0x36
 80014c0:	f000 fa39 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c4:	2036      	movs	r0, #54	; 0x36
 80014c6:	f000 fa52 	bl	800196e <HAL_NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40000800 	.word	0x40000800
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40001000 	.word	0x40001000

080014e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_TIM_MspPostInit+0x68>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d11e      	bne.n	8001540 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_TIM_MspPostInit+0x6c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_TIM_MspPostInit+0x6c>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_TIM_MspPostInit+0x6c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800151e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_TIM_MspPostInit+0x70>)
 800153c:	f000 fac4 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40000800 	.word	0x40000800
 800154c:	40023800 	.word	0x40023800
 8001550:	40020c00 	.word	0x40020c00

08001554 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_USART6_UART_Init+0x50>)
 800155c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800158c:	f002 f8dc 	bl	8003748 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001596:	f7ff fdef 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20001168 	.word	0x20001168
 80015a4:	40011400 	.word	0x40011400

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0x94>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d133      	bne.n	8001632 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001612:	2308      	movs	r3, #8
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_UART_MspInit+0x9c>)
 800161e:	f000 fa53 	bl	8001ac8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2047      	movs	r0, #71	; 0x47
 8001628:	f000 f985 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800162c:	2047      	movs	r0, #71	; 0x47
 800162e:	f000 f99e 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40011400 	.word	0x40011400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff fe23 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f003 f81f 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fa17 	bl	8000aac <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800168c:	08005408 	.word	0x08005408
  ldr r2, =_sbss
 8001690:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001694:	200011c0 	.word	0x200011c0

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f92b 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fd58 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f943 	bl	800198a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800171c:	f000 f90b 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000002c 	.word	0x2000002c
 8001738:	20000034 	.word	0x20000034
 800173c:	20000030 	.word	0x20000030

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000034 	.word	0x20000034
 8001764:	200011ac 	.word	0x200011ac

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200011ac 	.word	0x200011ac

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff feda 	bl	8001768 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d008      	beq.n	80019d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e052      	b.n	8001a7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0216 	bic.w	r2, r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_DMA_Abort+0x62>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0208 	bic.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a24:	e013      	b.n	8001a4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a26:	f7ff fe9f 	bl	8001768 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d90c      	bls.n	8001a4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e015      	b.n	8001a7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e4      	bne.n	8001a26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e00c      	b.n	8001aba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e177      	b.n	8001dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8166 	bne.w	8001dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80c0 	beq.w	8001dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a61      	ldr	r2, [pc, #388]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d037      	beq.n	8001d06 <HAL_GPIO_Init+0x23e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_GPIO_Init+0x23a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x334>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x236>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <HAL_GPIO_Init+0x338>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x232>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_Init+0x33c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x22e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_GPIO_Init+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x22a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_Init+0x344>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x348>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x34c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x350>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cde:	2309      	movs	r3, #9
 8001ce0:	e012      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	e010      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae84 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40022400 	.word	0x40022400
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e267      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d00c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4b82      	ldr	r3, [pc, #520]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e242      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x74>
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a75      	ldr	r2, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6c      	ldr	r2, [pc, #432]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	4b69      	ldr	r3, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a68      	ldr	r2, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc46 	bl	8001768 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc42 	bl	8001768 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e207      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc32 	bl	8001768 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fc2e 	bl	8001768 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1f3      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0xe8>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c7      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x244>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff fbe7 	bl	8001768 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fbe3 	bl	8001768 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a8      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4925      	ldr	r1, [pc, #148]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x244>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fbc6 	bl	8001768 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fbc2 	bl	8001768 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e187      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d036      	beq.n	8002078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x248>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fba6 	bl	8001768 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fba2 	bl	8001768 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e167      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x200>
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x248>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fb8f 	bl	8001768 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	e00e      	b.n	800206c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fb8b 	bl	8001768 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d907      	bls.n	800206c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e150      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
 8002060:	40023800 	.word	0x40023800
 8002064:	42470000 	.word	0x42470000
 8002068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ea      	bne.n	800204e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8097 	beq.w	80021b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a7c      	ldr	r2, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b77      	ldr	r3, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b74      	ldr	r3, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a73      	ldr	r2, [pc, #460]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb4b 	bl	8001768 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff fb47 	bl	8001768 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e10c      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x2ea>
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e01c      	b.n	8002144 <HAL_RCC_OscConfig+0x324>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x30c>
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x324>
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a57      	ldr	r2, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a54      	ldr	r2, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff fb0c 	bl	8001768 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff fb08 	bl	8001768 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0cb      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ee      	beq.n	8002154 <HAL_RCC_OscConfig+0x334>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff faf6 	bl	8001768 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff faf2 	bl	8001768 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0b5      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a1 	beq.w	8002300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d05c      	beq.n	8002284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d141      	bne.n	8002256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fac6 	bl	8001768 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fac2 	bl	8001768 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e087      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	491b      	ldr	r1, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fa9b 	bl	8001768 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff fa97 	bl	8001768 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e05c      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x416>
 8002254:	e054      	b.n	8002300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fa84 	bl	8001768 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fa80 	bl	8001768 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e045      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e038      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000
 8002298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4ec>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d028      	beq.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d121      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d11a      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0cc      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d90c      	bls.n	800234c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0b8      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a58      	ldr	r2, [pc, #352]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	494d      	ldr	r1, [pc, #308]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d044      	beq.n	8002430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e07f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e067      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4934      	ldr	r1, [pc, #208]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002400:	f7ff f9b2 	bl	8001768 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff f9ae 	bl	8001768 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e04f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d20c      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e032      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4916      	ldr	r1, [pc, #88]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	490e      	ldr	r1, [pc, #56]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002496:	f000 f821 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	490a      	ldr	r1, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f912 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00
 80024cc:	40023800 	.word	0x40023800
 80024d0:	080053ac 	.word	0x080053ac
 80024d4:	2000002c 	.word	0x2000002c
 80024d8:	20000030 	.word	0x20000030

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b090      	sub	sp, #64	; 0x40
 80024e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d00d      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x40>
 8002500:	2b08      	cmp	r3, #8
 8002502:	f200 80a1 	bhi.w	8002648 <HAL_RCC_GetSysClockFreq+0x16c>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x34>
 800250a:	2b04      	cmp	r3, #4
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x3a>
 800250e:	e09b      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_GetSysClockFreq+0x184>)
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002514:	e09b      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002516:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800251a:	e098      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002526:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d028      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	627a      	str	r2, [r7, #36]	; 0x24
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002544:	2100      	movs	r1, #0
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	fb03 f201 	mul.w	r2, r3, r1
 800254c:	2300      	movs	r3, #0
 800254e:	fb00 f303 	mul.w	r3, r0, r3
 8002552:	4413      	add	r3, r2
 8002554:	4a43      	ldr	r2, [pc, #268]	; (8002664 <HAL_RCC_GetSysClockFreq+0x188>)
 8002556:	fba0 1202 	umull	r1, r2, r0, r2
 800255a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800255c:	460a      	mov	r2, r1
 800255e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002562:	4413      	add	r3, r2
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002568:	2200      	movs	r2, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	61fa      	str	r2, [r7, #28]
 800256e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002572:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002576:	f7fd fe93 	bl	80002a0 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4613      	mov	r3, r2
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002582:	e053      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	2200      	movs	r2, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	617a      	str	r2, [r7, #20]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002596:	f04f 0b00 	mov.w	fp, #0
 800259a:	4652      	mov	r2, sl
 800259c:	465b      	mov	r3, fp
 800259e:	f04f 0000 	mov.w	r0, #0
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	0159      	lsls	r1, r3, #5
 80025a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ac:	0150      	lsls	r0, r2, #5
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	ebb2 080a 	subs.w	r8, r2, sl
 80025b6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ce:	ebb2 0408 	subs.w	r4, r2, r8
 80025d2:	eb63 0509 	sbc.w	r5, r3, r9
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	00eb      	lsls	r3, r5, #3
 80025e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e4:	00e2      	lsls	r2, r4, #3
 80025e6:	4614      	mov	r4, r2
 80025e8:	461d      	mov	r5, r3
 80025ea:	eb14 030a 	adds.w	r3, r4, sl
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	eb45 030b 	adc.w	r3, r5, fp
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	2200      	movs	r2, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002620:	f7fd fe3e 	bl	80002a0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_GetSysClockFreq+0x180>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	3301      	adds	r3, #1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800263c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetSysClockFreq+0x184>)
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002650:	4618      	mov	r0, r3
 8002652:	3740      	adds	r7, #64	; 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	00f42400 	.word	0x00f42400
 8002664:	017d7840 	.word	0x017d7840

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000002c 	.word	0x2000002c

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	080053bc 	.word	0x080053bc

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffdc 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	080053bc 	.word	0x080053bc

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe feb4 	bl	8001464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fc7a 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e04e      	b.n	8002826 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_TIM_Base_Start_IT+0xc4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d01d      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_TIM_Base_Start_IT+0xc8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d018      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_TIM_Base_Start_IT+0xcc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIM_Base_Start_IT+0xd4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_TIM_Base_Start_IT+0xd8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x80>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d111      	bne.n	8002814 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d010      	beq.n	8002824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	e007      	b.n	8002824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40001800 	.word	0x40001800

08002850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e041      	b.n	80028e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f839 	bl	80028ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 fbba 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_TIM_PWM_Start+0x24>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e022      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d109      	bne.n	8002942 <HAL_TIM_PWM_Start+0x3e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e015      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d109      	bne.n	800295c <HAL_TIM_PWM_Start+0x58>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e008      	b.n	800296e <HAL_TIM_PWM_Start+0x6a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07c      	b.n	8002a70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0x82>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	e013      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0x92>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	e00b      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xa2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	e003      	b.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fe10 	bl	80035dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_TIM_PWM_Start+0x174>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_PWM_Start+0xcc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2c      	ldr	r2, [pc, #176]	; (8002a7c <HAL_TIM_PWM_Start+0x178>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_TIM_PWM_Start+0xd0>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_TIM_PWM_Start+0xd2>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <HAL_TIM_PWM_Start+0x174>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d01d      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_TIM_PWM_Start+0x17c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_TIM_PWM_Start+0x180>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_TIM_PWM_Start+0x184>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_TIM_PWM_Start+0x178>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_PWM_Start+0x188>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x136>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIM_PWM_Start+0x18c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d111      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d010      	beq.n	8002a6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	e007      	b.n	8002a6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40010400 	.word	0x40010400
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40001800 	.word	0x40001800

08002a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa77 	bl	8002fca <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa69 	bl	8002fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa7a 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0204 	mvn.w	r2, #4
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa4d 	bl	8002fca <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa3f 	bl	8002fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fa50 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0208 	mvn.w	r2, #8
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa23 	bl	8002fca <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa15 	bl	8002fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa26 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9f9 	bl	8002fca <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9eb 	bl	8002fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9fc 	bl	8002fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fd feb4 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fd78 	bl	8003734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9c1 	bl	8002ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0220 	mvn.w	r2, #32
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fd42 	bl	8003720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0ae      	b.n	8002e20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	f200 809f 	bhi.w	8002e10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d0d 	.word	0x08002d0d
 8002cdc:	08002e11 	.word	0x08002e11
 8002ce0:	08002e11 	.word	0x08002e11
 8002ce4:	08002e11 	.word	0x08002e11
 8002ce8:	08002d4d 	.word	0x08002d4d
 8002cec:	08002e11 	.word	0x08002e11
 8002cf0:	08002e11 	.word	0x08002e11
 8002cf4:	08002e11 	.word	0x08002e11
 8002cf8:	08002d8f 	.word	0x08002d8f
 8002cfc:	08002e11 	.word	0x08002e11
 8002d00:	08002e11 	.word	0x08002e11
 8002d04:	08002e11 	.word	0x08002e11
 8002d08:	08002dcf 	.word	0x08002dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fa18 	bl	8003148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0208 	orr.w	r2, r2, #8
 8002d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6999      	ldr	r1, [r3, #24]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	619a      	str	r2, [r3, #24]
      break;
 8002d4a:	e064      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fa68 	bl	8003228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6999      	ldr	r1, [r3, #24]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	619a      	str	r2, [r3, #24]
      break;
 8002d8c:	e043      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fabd 	bl	8003314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0208 	orr.w	r2, r2, #8
 8002da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69d9      	ldr	r1, [r3, #28]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]
      break;
 8002dcc:	e023      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fb11 	bl	80033fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69d9      	ldr	r1, [r3, #28]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	61da      	str	r2, [r3, #28]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
      break;
 8002e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0b4      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x186>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7c:	d03e      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0xd4>
 8002e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e82:	f200 8087 	bhi.w	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	f000 8086 	beq.w	8002f9a <HAL_TIM_ConfigClockSource+0x172>
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e92:	d87f      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b70      	cmp	r3, #112	; 0x70
 8002e96:	d01a      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xa6>
 8002e98:	2b70      	cmp	r3, #112	; 0x70
 8002e9a:	d87b      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d050      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x11a>
 8002ea0:	2b60      	cmp	r3, #96	; 0x60
 8002ea2:	d877      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b50      	cmp	r3, #80	; 0x50
 8002ea6:	d03c      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0xfa>
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d873      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d058      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x13a>
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d86f      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b30      	cmp	r3, #48	; 0x30
 8002eb6:	d064      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d86b      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d060      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d867      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05c      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d05a      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ecc:	e062      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6899      	ldr	r1, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f000 fb5d 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	609a      	str	r2, [r3, #8]
      break;
 8002efa:	e04f      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f000 fb46 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1e:	609a      	str	r2, [r3, #8]
      break;
 8002f20:	e03c      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 faba 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2150      	movs	r1, #80	; 0x50
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb13 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002f40:	e02c      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 fad9 	bl	8003506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2160      	movs	r1, #96	; 0x60
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb03 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e01c      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 fa9a 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2140      	movs	r1, #64	; 0x40
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 faf3 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002f80:	e00c      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 faea 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002f92:	e003      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e000      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a40      	ldr	r2, [pc, #256]	; (800311c <TIM_Base_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3a      	ldr	r2, [pc, #232]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <TIM_Base_SetConfig+0x114>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d027      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d023      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d017      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <TIM_Base_SetConfig+0x128>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <TIM_Base_SetConfig+0x130>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <TIM_Base_SetConfig+0x134>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <TIM_Base_SetConfig+0x138>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <TIM_Base_SetConfig+0x13c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <TIM_Base_SetConfig+0x114>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0xf8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <TIM_Base_SetConfig+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	615a      	str	r2, [r3, #20]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	40001800 	.word	0x40001800
 8003140:	40001c00 	.word	0x40001c00
 8003144:	40002000 	.word	0x40002000

08003148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_OC1_SetConfig+0xd8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_OC1_SetConfig+0x64>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <TIM_OC1_SetConfig+0xdc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10c      	bne.n	80031c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0308 	bic.w	r3, r3, #8
 80031b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <TIM_OC1_SetConfig+0xd8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_OC1_SetConfig+0x8e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <TIM_OC1_SetConfig+0xdc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d111      	bne.n	80031fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0210 	bic.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0320 	bic.w	r3, r3, #32
 8003272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <TIM_OC2_SetConfig+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC2_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <TIM_OC2_SetConfig+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10d      	bne.n	80032ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <TIM_OC2_SetConfig+0xe4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC2_SetConfig+0x94>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <TIM_OC2_SetConfig+0xe8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d113      	bne.n	80032e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40010400 	.word	0x40010400

08003314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800335c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <TIM_OC3_SetConfig+0xe0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_OC3_SetConfig+0x66>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <TIM_OC3_SetConfig+0xe4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10d      	bne.n	8003396 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <TIM_OC3_SetConfig+0xe0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_OC3_SetConfig+0x92>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <TIM_OC3_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010400 	.word	0x40010400

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <TIM_OC4_SetConfig+0xa4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_OC4_SetConfig+0x68>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <TIM_OC4_SetConfig+0xa8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40010400 	.word	0x40010400

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0210 	bic.w	r2, r3, #16
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e05a      	b.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d01d      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10c      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e03f      	b.n	80037da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd ff1a 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800378a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fd19 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	4613      	mov	r3, r2
 80037ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d130      	bne.n	800385e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Transmit_IT+0x26>
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e029      	b.n	8003860 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_UART_Transmit_IT+0x38>
 8003816:	2302      	movs	r3, #2
 8003818:	e022      	b.n	8003860 <HAL_UART_Transmit_IT+0x7e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	; 0x21
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003858:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	d11d      	bne.n	80038c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Receive_IT+0x26>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e016      	b.n	80038c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Receive_IT+0x38>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e00f      	b.n	80038c4 <HAL_UART_Receive_IT+0x58>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 faab 	bl	8003e14 <UART_Start_Receive_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	e000      	b.n	80038c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0ba      	sub	sp, #232	; 0xe8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800390a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_UART_IRQHandler+0x66>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fb8f 	bl	800404e <UART_Receive_IT>
      return;
 8003930:	e256      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80de 	beq.w	8003af8 <HAL_UART_IRQHandler+0x22c>
 800393c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80d1 	beq.w	8003af8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0xae>
 8003962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_UART_IRQHandler+0xd2>
 8003986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0202 	orr.w	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xf6>
 80039aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d011      	beq.n	80039f2 <HAL_UART_IRQHandler+0x126>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 81ed 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_UART_IRQHandler+0x14e>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fb1a 	bl	800404e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_UART_IRQHandler+0x17a>
 8003a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d04f      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa22 	bl	8003e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d141      	bne.n	8003ade <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1d9      	bne.n	8003a5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_UART_IRQHandler+0x3dc>)
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd ffe1 	bl	8001a82 <HAL_DMA_Abort_IT>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00e      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f986 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e00a      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f982 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e006      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f97e 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003af2:	e170      	b.n	8003dd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	bf00      	nop
    return;
 8003af6:	e16e      	b.n	8003dd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 814a 	bne.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8143 	beq.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 813c 	beq.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	f040 80b4 	bne.w	8003cac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8140 	beq.w	8003dda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b62:	429a      	cmp	r2, r3
 8003b64:	f080 8139 	bcs.w	8003dda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	f000 8088 	beq.w	8003c8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1d9      	bne.n	8003b7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e1      	bne.n	8003bca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e3      	bne.n	8003c06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c70:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e3      	bne.n	8003c4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd fe8a 	bl	80019a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8ac 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca4:	e099      	b.n	8003dda <HAL_UART_IRQHandler+0x50e>
 8003ca6:	bf00      	nop
 8003ca8:	08003f57 	.word	0x08003f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 808b 	beq.w	8003dde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8086 	beq.w	8003dde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8003cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e3      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	623b      	str	r3, [r7, #32]
   return(result);
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e3      	bne.n	8003d0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0310 	bic.w	r3, r3, #16
 8003d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d74:	61fa      	str	r2, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	617b      	str	r3, [r7, #20]
   return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e3      	bne.n	8003d50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f834 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d94:	e023      	b.n	8003dde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_UART_IRQHandler+0x4ea>
 8003da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8e5 	bl	8003f7e <UART_Transmit_IT>
    return;
 8003db4:	e014      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <HAL_UART_IRQHandler+0x514>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f925 	bl	800401e <UART_EndTransmit_IT>
    return;
 8003dd4:	e004      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
    return;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
      return;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
      return;
 8003dde:	bf00      	nop
  }
}
 8003de0:	37e8      	adds	r7, #232	; 0xe8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2222      	movs	r2, #34	; 0x22
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b095      	sub	sp, #84	; 0x54
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb8:	643a      	str	r2, [r7, #64]	; 0x40
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d119      	bne.n	8003f3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f023 0310 	bic.w	r3, r3, #16
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f28:	61ba      	str	r2, [r7, #24]
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	613b      	str	r3, [r7, #16]
   return(result);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4a:	bf00      	nop
 8003f4c:	3754      	adds	r7, #84	; 0x54
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff ff39 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b21      	cmp	r3, #33	; 0x21
 8003f90:	d13e      	bne.n	8004010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d114      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	e008      	b.n	8003fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6211      	str	r1, [r2, #32]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fc fc5c 	bl	80008fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b08c      	sub	sp, #48	; 0x30
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b22      	cmp	r3, #34	; 0x22
 8004060:	f040 80ab 	bne.w	80041ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d117      	bne.n	800409e <UART_Receive_IT+0x50>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d113      	bne.n	800409e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408c:	b29a      	uxth	r2, r3
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	1c9a      	adds	r2, r3, #2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
 800409c:	e026      	b.n	80040ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d007      	beq.n	80040c2 <UART_Receive_IT+0x74>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <UART_Receive_IT+0x82>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e008      	b.n	80040e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4619      	mov	r1, r3
 80040fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d15a      	bne.n	80041b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0220 	bic.w	r2, r2, #32
 800410e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	2b01      	cmp	r3, #1
 800413e:	d135      	bne.n	80041ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	613b      	str	r3, [r7, #16]
   return(result);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f023 0310 	bic.w	r3, r3, #16
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004166:	623a      	str	r2, [r7, #32]
 8004168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	69f9      	ldr	r1, [r7, #28]
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	61bb      	str	r3, [r7, #24]
   return(result);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b10      	cmp	r3, #16
 8004186:	d10a      	bne.n	800419e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fe29 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
 80041aa:	e002      	b.n	80041b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fb83 	bl	80008b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e002      	b.n	80041bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3730      	adds	r7, #48	; 0x30
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b0c0      	sub	sp, #256	; 0x100
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	68d9      	ldr	r1, [r3, #12]
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	ea40 0301 	orr.w	r3, r0, r1
 80041ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800421c:	f021 010c 	bic.w	r1, r1, #12
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800422a:	430b      	orrs	r3, r1
 800422c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	6999      	ldr	r1, [r3, #24]
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	ea40 0301 	orr.w	r3, r0, r1
 800424a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b8f      	ldr	r3, [pc, #572]	; (8004490 <UART_SetConfig+0x2cc>)
 8004254:	429a      	cmp	r2, r3
 8004256:	d005      	beq.n	8004264 <UART_SetConfig+0xa0>
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b8d      	ldr	r3, [pc, #564]	; (8004494 <UART_SetConfig+0x2d0>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d104      	bne.n	800426e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fe fa20 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8004268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800426c:	e003      	b.n	8004276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800426e:	f7fe fa07 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8004272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	f040 810c 	bne.w	800449c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800428e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	1891      	adds	r1, r2, r2
 800429c:	65b9      	str	r1, [r7, #88]	; 0x58
 800429e:	415b      	adcs	r3, r3
 80042a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042a6:	4621      	mov	r1, r4
 80042a8:	eb12 0801 	adds.w	r8, r2, r1
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb43 0901 	adc.w	r9, r3, r1
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c6:	4690      	mov	r8, r2
 80042c8:	4699      	mov	r9, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	eb18 0303 	adds.w	r3, r8, r3
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042d4:	462b      	mov	r3, r5
 80042d6:	eb49 0303 	adc.w	r3, r9, r3
 80042da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042f2:	460b      	mov	r3, r1
 80042f4:	18db      	adds	r3, r3, r3
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
 80042f8:	4613      	mov	r3, r2
 80042fa:	eb42 0303 	adc.w	r3, r2, r3
 80042fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004308:	f7fb ffca 	bl	80002a0 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b61      	ldr	r3, [pc, #388]	; (8004498 <UART_SetConfig+0x2d4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	64b9      	str	r1, [r7, #72]	; 0x48
 8004334:	415b      	adcs	r3, r3
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800433c:	4641      	mov	r1, r8
 800433e:	eb12 0a01 	adds.w	sl, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0b01 	adc.w	fp, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800435c:	4692      	mov	sl, r2
 800435e:	469b      	mov	fp, r3
 8004360:	4643      	mov	r3, r8
 8004362:	eb1a 0303 	adds.w	r3, sl, r3
 8004366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436a:	464b      	mov	r3, r9
 800436c:	eb4b 0303 	adc.w	r3, fp, r3
 8004370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004388:	460b      	mov	r3, r1
 800438a:	18db      	adds	r3, r3, r3
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
 800438e:	4613      	mov	r3, r2
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800439a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800439e:	f7fb ff7f 	bl	80002a0 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <UART_SetConfig+0x2d4>)
 80043aa:	fba3 2301 	umull	r2, r3, r3, r1
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2264      	movs	r2, #100	; 0x64
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	1acb      	subs	r3, r1, r3
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <UART_SetConfig+0x2d4>)
 80043c0:	fba3 2302 	umull	r2, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043cc:	441c      	add	r4, r3
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043e8:	415b      	adcs	r3, r3
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6339      	str	r1, [r7, #48]	; 0x30
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004424:	464b      	mov	r3, r9
 8004426:	460a      	mov	r2, r1
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800443c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
 800444a:	4613      	mov	r3, r2
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800445a:	f7fb ff21 	bl	80002a0 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_SetConfig+0x2d4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x2d4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 0207 	and.w	r2, r3, #7
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800448c:	e105      	b.n	800469a <UART_SetConfig+0x4d6>
 800448e:	bf00      	nop
 8004490:	40011000 	.word	0x40011000
 8004494:	40011400 	.word	0x40011400
 8004498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800449c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ae:	4642      	mov	r2, r8
 80044b0:	464b      	mov	r3, r9
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	6239      	str	r1, [r7, #32]
 80044b6:	415b      	adcs	r3, r3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044be:	4641      	mov	r1, r8
 80044c0:	1854      	adds	r4, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb43 0501 	adc.w	r5, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	00eb      	lsls	r3, r5, #3
 80044d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	4614      	mov	r4, r2
 80044da:	461d      	mov	r5, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	18e3      	adds	r3, r4, r3
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044e4:	464b      	mov	r3, r9
 80044e6:	eb45 0303 	adc.w	r3, r5, r3
 80044ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800450a:	4629      	mov	r1, r5
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004514:	4621      	mov	r1, r4
 8004516:	008a      	lsls	r2, r1, #2
 8004518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800451c:	f7fb fec0 	bl	80002a0 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b60      	ldr	r3, [pc, #384]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800453c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	61b9      	str	r1, [r7, #24]
 8004548:	415b      	adcs	r3, r3
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004550:	4641      	mov	r1, r8
 8004552:	1851      	adds	r1, r2, r1
 8004554:	6139      	str	r1, [r7, #16]
 8004556:	4649      	mov	r1, r9
 8004558:	414b      	adcs	r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	00cb      	lsls	r3, r1, #3
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004572:	4651      	mov	r1, sl
 8004574:	00ca      	lsls	r2, r1, #3
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	4603      	mov	r3, r0
 800457c:	4642      	mov	r2, r8
 800457e:	189b      	adds	r3, r3, r2
 8004580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004584:	464b      	mov	r3, r9
 8004586:	460a      	mov	r2, r1
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	67bb      	str	r3, [r7, #120]	; 0x78
 800459a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045a8:	4649      	mov	r1, r9
 80045aa:	008b      	lsls	r3, r1, #2
 80045ac:	4641      	mov	r1, r8
 80045ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b2:	4641      	mov	r1, r8
 80045b4:	008a      	lsls	r2, r1, #2
 80045b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ba:	f7fb fe71 	bl	80002a0 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <UART_SetConfig+0x4e4>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	2164      	movs	r1, #100	; 0x64
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <UART_SetConfig+0x4e4>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e2:	441c      	add	r4, r3
 80045e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e8:	2200      	movs	r2, #0
 80045ea:	673b      	str	r3, [r7, #112]	; 0x70
 80045ec:	677a      	str	r2, [r7, #116]	; 0x74
 80045ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045f2:	4642      	mov	r2, r8
 80045f4:	464b      	mov	r3, r9
 80045f6:	1891      	adds	r1, r2, r2
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	415b      	adcs	r3, r3
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004602:	4641      	mov	r1, r8
 8004604:	1851      	adds	r1, r2, r1
 8004606:	6039      	str	r1, [r7, #0]
 8004608:	4649      	mov	r1, r9
 800460a:	414b      	adcs	r3, r1
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800461a:	4659      	mov	r1, fp
 800461c:	00cb      	lsls	r3, r1, #3
 800461e:	4651      	mov	r1, sl
 8004620:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004624:	4651      	mov	r1, sl
 8004626:	00ca      	lsls	r2, r1, #3
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	4603      	mov	r3, r0
 800462e:	4642      	mov	r2, r8
 8004630:	189b      	adds	r3, r3, r2
 8004632:	66bb      	str	r3, [r7, #104]	; 0x68
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	663b      	str	r3, [r7, #96]	; 0x60
 8004648:	667a      	str	r2, [r7, #100]	; 0x64
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004656:	4649      	mov	r1, r9
 8004658:	008b      	lsls	r3, r1, #2
 800465a:	4641      	mov	r1, r8
 800465c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004660:	4641      	mov	r1, r8
 8004662:	008a      	lsls	r2, r1, #2
 8004664:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004668:	f7fb fe1a 	bl	80002a0 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004672:	fba3 1302 	umull	r1, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2164      	movs	r1, #100	; 0x64
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	3332      	adds	r3, #50	; 0x32
 8004684:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 020f 	and.w	r2, r3, #15
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4422      	add	r2, r4
 8004698:	609a      	str	r2, [r3, #8]
}
 800469a:	bf00      	nop
 800469c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046a0:	46bd      	mov	sp, r7
 80046a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a6:	bf00      	nop
 80046a8:	51eb851f 	.word	0x51eb851f

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000038 	.word	0x20000038

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 fca2 	bl	8005014 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08005400 	.word	0x08005400
 80046f4:	08005400 	.word	0x08005400
 80046f8:	08005400 	.word	0x08005400
 80046fc:	08005404 	.word	0x08005404

08004700 <memcpy>:
 8004700:	440a      	add	r2, r1
 8004702:	4291      	cmp	r1, r2
 8004704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	4770      	bx	lr
 800470c:	b510      	push	{r4, lr}
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004716:	4291      	cmp	r1, r2
 8004718:	d1f9      	bne.n	800470e <memcpy+0xe>
 800471a:	bd10      	pop	{r4, pc}

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <sniprintf>:
 800472c:	b40c      	push	{r2, r3}
 800472e:	b530      	push	{r4, r5, lr}
 8004730:	4b17      	ldr	r3, [pc, #92]	; (8004790 <sniprintf+0x64>)
 8004732:	1e0c      	subs	r4, r1, #0
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	b09d      	sub	sp, #116	; 0x74
 8004738:	da08      	bge.n	800474c <sniprintf+0x20>
 800473a:	238b      	movs	r3, #139	; 0x8b
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004742:	b01d      	add	sp, #116	; 0x74
 8004744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004748:	b002      	add	sp, #8
 800474a:	4770      	bx	lr
 800474c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004750:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004754:	bf14      	ite	ne
 8004756:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800475a:	4623      	moveq	r3, r4
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	9307      	str	r3, [sp, #28]
 8004760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004764:	9002      	str	r0, [sp, #8]
 8004766:	9006      	str	r0, [sp, #24]
 8004768:	f8ad 3016 	strh.w	r3, [sp, #22]
 800476c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800476e:	ab21      	add	r3, sp, #132	; 0x84
 8004770:	a902      	add	r1, sp, #8
 8004772:	4628      	mov	r0, r5
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	f000 f869 	bl	800484c <_svfiprintf_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	bfbc      	itt	lt
 800477e:	238b      	movlt	r3, #139	; 0x8b
 8004780:	602b      	strlt	r3, [r5, #0]
 8004782:	2c00      	cmp	r4, #0
 8004784:	d0dd      	beq.n	8004742 <sniprintf+0x16>
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e7d9      	b.n	8004742 <sniprintf+0x16>
 800478e:	bf00      	nop
 8004790:	20000038 	.word	0x20000038

08004794 <__ssputs_r>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	688e      	ldr	r6, [r1, #8]
 800479a:	429e      	cmp	r6, r3
 800479c:	4682      	mov	sl, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4690      	mov	r8, r2
 80047a2:	461f      	mov	r7, r3
 80047a4:	d838      	bhi.n	8004818 <__ssputs_r+0x84>
 80047a6:	898a      	ldrh	r2, [r1, #12]
 80047a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047ac:	d032      	beq.n	8004814 <__ssputs_r+0x80>
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	6909      	ldr	r1, [r1, #16]
 80047b2:	eba5 0901 	sub.w	r9, r5, r1
 80047b6:	6965      	ldr	r5, [r4, #20]
 80047b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047c0:	3301      	adds	r3, #1
 80047c2:	444b      	add	r3, r9
 80047c4:	106d      	asrs	r5, r5, #1
 80047c6:	429d      	cmp	r5, r3
 80047c8:	bf38      	it	cc
 80047ca:	461d      	movcc	r5, r3
 80047cc:	0553      	lsls	r3, r2, #21
 80047ce:	d531      	bpl.n	8004834 <__ssputs_r+0xa0>
 80047d0:	4629      	mov	r1, r5
 80047d2:	f000 fb55 	bl	8004e80 <_malloc_r>
 80047d6:	4606      	mov	r6, r0
 80047d8:	b950      	cbnz	r0, 80047f0 <__ssputs_r+0x5c>
 80047da:	230c      	movs	r3, #12
 80047dc:	f8ca 3000 	str.w	r3, [sl]
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	6921      	ldr	r1, [r4, #16]
 80047f2:	464a      	mov	r2, r9
 80047f4:	f7ff ff84 	bl	8004700 <memcpy>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	6126      	str	r6, [r4, #16]
 8004806:	6165      	str	r5, [r4, #20]
 8004808:	444e      	add	r6, r9
 800480a:	eba5 0509 	sub.w	r5, r5, r9
 800480e:	6026      	str	r6, [r4, #0]
 8004810:	60a5      	str	r5, [r4, #8]
 8004812:	463e      	mov	r6, r7
 8004814:	42be      	cmp	r6, r7
 8004816:	d900      	bls.n	800481a <__ssputs_r+0x86>
 8004818:	463e      	mov	r6, r7
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	4632      	mov	r2, r6
 800481e:	4641      	mov	r1, r8
 8004820:	f000 faa8 	bl	8004d74 <memmove>
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	1b9b      	subs	r3, r3, r6
 8004828:	60a3      	str	r3, [r4, #8]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	4433      	add	r3, r6
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	2000      	movs	r0, #0
 8004832:	e7db      	b.n	80047ec <__ssputs_r+0x58>
 8004834:	462a      	mov	r2, r5
 8004836:	f000 fb97 	bl	8004f68 <_realloc_r>
 800483a:	4606      	mov	r6, r0
 800483c:	2800      	cmp	r0, #0
 800483e:	d1e1      	bne.n	8004804 <__ssputs_r+0x70>
 8004840:	6921      	ldr	r1, [r4, #16]
 8004842:	4650      	mov	r0, sl
 8004844:	f000 fab0 	bl	8004da8 <_free_r>
 8004848:	e7c7      	b.n	80047da <__ssputs_r+0x46>
	...

0800484c <_svfiprintf_r>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	4698      	mov	r8, r3
 8004852:	898b      	ldrh	r3, [r1, #12]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	b09d      	sub	sp, #116	; 0x74
 8004858:	4607      	mov	r7, r0
 800485a:	460d      	mov	r5, r1
 800485c:	4614      	mov	r4, r2
 800485e:	d50e      	bpl.n	800487e <_svfiprintf_r+0x32>
 8004860:	690b      	ldr	r3, [r1, #16]
 8004862:	b963      	cbnz	r3, 800487e <_svfiprintf_r+0x32>
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	f000 fb0b 	bl	8004e80 <_malloc_r>
 800486a:	6028      	str	r0, [r5, #0]
 800486c:	6128      	str	r0, [r5, #16]
 800486e:	b920      	cbnz	r0, 800487a <_svfiprintf_r+0x2e>
 8004870:	230c      	movs	r3, #12
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004878:	e0d1      	b.n	8004a1e <_svfiprintf_r+0x1d2>
 800487a:	2340      	movs	r3, #64	; 0x40
 800487c:	616b      	str	r3, [r5, #20]
 800487e:	2300      	movs	r3, #0
 8004880:	9309      	str	r3, [sp, #36]	; 0x24
 8004882:	2320      	movs	r3, #32
 8004884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004888:	f8cd 800c 	str.w	r8, [sp, #12]
 800488c:	2330      	movs	r3, #48	; 0x30
 800488e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a38 <_svfiprintf_r+0x1ec>
 8004892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004896:	f04f 0901 	mov.w	r9, #1
 800489a:	4623      	mov	r3, r4
 800489c:	469a      	mov	sl, r3
 800489e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a2:	b10a      	cbz	r2, 80048a8 <_svfiprintf_r+0x5c>
 80048a4:	2a25      	cmp	r2, #37	; 0x25
 80048a6:	d1f9      	bne.n	800489c <_svfiprintf_r+0x50>
 80048a8:	ebba 0b04 	subs.w	fp, sl, r4
 80048ac:	d00b      	beq.n	80048c6 <_svfiprintf_r+0x7a>
 80048ae:	465b      	mov	r3, fp
 80048b0:	4622      	mov	r2, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	4638      	mov	r0, r7
 80048b6:	f7ff ff6d 	bl	8004794 <__ssputs_r>
 80048ba:	3001      	adds	r0, #1
 80048bc:	f000 80aa 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c2:	445a      	add	r2, fp
 80048c4:	9209      	str	r2, [sp, #36]	; 0x24
 80048c6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a2 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048da:	f10a 0a01 	add.w	sl, sl, #1
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	9307      	str	r3, [sp, #28]
 80048e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e6:	931a      	str	r3, [sp, #104]	; 0x68
 80048e8:	4654      	mov	r4, sl
 80048ea:	2205      	movs	r2, #5
 80048ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f0:	4851      	ldr	r0, [pc, #324]	; (8004a38 <_svfiprintf_r+0x1ec>)
 80048f2:	f7fb fc85 	bl	8000200 <memchr>
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	b9d8      	cbnz	r0, 8004932 <_svfiprintf_r+0xe6>
 80048fa:	06d0      	lsls	r0, r2, #27
 80048fc:	bf44      	itt	mi
 80048fe:	2320      	movmi	r3, #32
 8004900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004904:	0711      	lsls	r1, r2, #28
 8004906:	bf44      	itt	mi
 8004908:	232b      	movmi	r3, #43	; 0x2b
 800490a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b2a      	cmp	r3, #42	; 0x2a
 8004914:	d015      	beq.n	8004942 <_svfiprintf_r+0xf6>
 8004916:	9a07      	ldr	r2, [sp, #28]
 8004918:	4654      	mov	r4, sl
 800491a:	2000      	movs	r0, #0
 800491c:	f04f 0c0a 	mov.w	ip, #10
 8004920:	4621      	mov	r1, r4
 8004922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004926:	3b30      	subs	r3, #48	; 0x30
 8004928:	2b09      	cmp	r3, #9
 800492a:	d94e      	bls.n	80049ca <_svfiprintf_r+0x17e>
 800492c:	b1b0      	cbz	r0, 800495c <_svfiprintf_r+0x110>
 800492e:	9207      	str	r2, [sp, #28]
 8004930:	e014      	b.n	800495c <_svfiprintf_r+0x110>
 8004932:	eba0 0308 	sub.w	r3, r0, r8
 8004936:	fa09 f303 	lsl.w	r3, r9, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	46a2      	mov	sl, r4
 8004940:	e7d2      	b.n	80048e8 <_svfiprintf_r+0x9c>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	1d19      	adds	r1, r3, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbb      	ittet	lt
 800494e:	425b      	neglt	r3, r3
 8004950:	f042 0202 	orrlt.w	r2, r2, #2
 8004954:	9307      	strge	r3, [sp, #28]
 8004956:	9307      	strlt	r3, [sp, #28]
 8004958:	bfb8      	it	lt
 800495a:	9204      	strlt	r2, [sp, #16]
 800495c:	7823      	ldrb	r3, [r4, #0]
 800495e:	2b2e      	cmp	r3, #46	; 0x2e
 8004960:	d10c      	bne.n	800497c <_svfiprintf_r+0x130>
 8004962:	7863      	ldrb	r3, [r4, #1]
 8004964:	2b2a      	cmp	r3, #42	; 0x2a
 8004966:	d135      	bne.n	80049d4 <_svfiprintf_r+0x188>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	9203      	str	r2, [sp, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfb8      	it	lt
 8004974:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004978:	3402      	adds	r4, #2
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a48 <_svfiprintf_r+0x1fc>
 8004980:	7821      	ldrb	r1, [r4, #0]
 8004982:	2203      	movs	r2, #3
 8004984:	4650      	mov	r0, sl
 8004986:	f7fb fc3b 	bl	8000200 <memchr>
 800498a:	b140      	cbz	r0, 800499e <_svfiprintf_r+0x152>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	eba0 000a 	sub.w	r0, r0, sl
 8004992:	fa03 f000 	lsl.w	r0, r3, r0
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	4303      	orrs	r3, r0
 800499a:	3401      	adds	r4, #1
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	4826      	ldr	r0, [pc, #152]	; (8004a3c <_svfiprintf_r+0x1f0>)
 80049a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a8:	2206      	movs	r2, #6
 80049aa:	f7fb fc29 	bl	8000200 <memchr>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d038      	beq.n	8004a24 <_svfiprintf_r+0x1d8>
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <_svfiprintf_r+0x1f4>)
 80049b4:	bb1b      	cbnz	r3, 80049fe <_svfiprintf_r+0x1b2>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3307      	adds	r3, #7
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	3308      	adds	r3, #8
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c4:	4433      	add	r3, r6
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	e767      	b.n	800489a <_svfiprintf_r+0x4e>
 80049ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ce:	460c      	mov	r4, r1
 80049d0:	2001      	movs	r0, #1
 80049d2:	e7a5      	b.n	8004920 <_svfiprintf_r+0xd4>
 80049d4:	2300      	movs	r3, #0
 80049d6:	3401      	adds	r4, #1
 80049d8:	9305      	str	r3, [sp, #20]
 80049da:	4619      	mov	r1, r3
 80049dc:	f04f 0c0a 	mov.w	ip, #10
 80049e0:	4620      	mov	r0, r4
 80049e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e6:	3a30      	subs	r2, #48	; 0x30
 80049e8:	2a09      	cmp	r2, #9
 80049ea:	d903      	bls.n	80049f4 <_svfiprintf_r+0x1a8>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0c5      	beq.n	800497c <_svfiprintf_r+0x130>
 80049f0:	9105      	str	r1, [sp, #20]
 80049f2:	e7c3      	b.n	800497c <_svfiprintf_r+0x130>
 80049f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f8:	4604      	mov	r4, r0
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7f0      	b.n	80049e0 <_svfiprintf_r+0x194>
 80049fe:	ab03      	add	r3, sp, #12
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	462a      	mov	r2, r5
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <_svfiprintf_r+0x1f8>)
 8004a06:	a904      	add	r1, sp, #16
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f3af 8000 	nop.w
 8004a0e:	1c42      	adds	r2, r0, #1
 8004a10:	4606      	mov	r6, r0
 8004a12:	d1d6      	bne.n	80049c2 <_svfiprintf_r+0x176>
 8004a14:	89ab      	ldrh	r3, [r5, #12]
 8004a16:	065b      	lsls	r3, r3, #25
 8004a18:	f53f af2c 	bmi.w	8004874 <_svfiprintf_r+0x28>
 8004a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1e:	b01d      	add	sp, #116	; 0x74
 8004a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <_svfiprintf_r+0x1f8>)
 8004a2c:	a904      	add	r1, sp, #16
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 f87a 	bl	8004b28 <_printf_i>
 8004a34:	e7eb      	b.n	8004a0e <_svfiprintf_r+0x1c2>
 8004a36:	bf00      	nop
 8004a38:	080053c4 	.word	0x080053c4
 8004a3c:	080053ce 	.word	0x080053ce
 8004a40:	00000000 	.word	0x00000000
 8004a44:	08004795 	.word	0x08004795
 8004a48:	080053ca 	.word	0x080053ca

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4616      	mov	r6, r2
 8004a52:	4699      	mov	r9, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfb8      	it	lt
 8004a60:	4613      	movlt	r3, r2
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a68:	4607      	mov	r7, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b10a      	cbz	r2, 8004a72 <_printf_common+0x26>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	6833      	ldrmi	r3, [r6, #0]
 8004a7a:	3302      	addmi	r3, #2
 8004a7c:	6033      	strmi	r3, [r6, #0]
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	f015 0506 	ands.w	r5, r5, #6
 8004a84:	d106      	bne.n	8004a94 <_printf_common+0x48>
 8004a86:	f104 0a19 	add.w	sl, r4, #25
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	6832      	ldr	r2, [r6, #0]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dc26      	bgt.n	8004ae2 <_printf_common+0x96>
 8004a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a98:	1e13      	subs	r3, r2, #0
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	bf18      	it	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	0692      	lsls	r2, r2, #26
 8004aa2:	d42b      	bmi.n	8004afc <_printf_common+0xb0>
 8004aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d01e      	beq.n	8004af0 <_printf_common+0xa4>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	68e5      	ldr	r5, [r4, #12]
 8004ab6:	6832      	ldr	r2, [r6, #0]
 8004ab8:	f003 0306 	and.w	r3, r3, #6
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	bf08      	it	eq
 8004ac0:	1aad      	subeq	r5, r5, r2
 8004ac2:	68a3      	ldr	r3, [r4, #8]
 8004ac4:	6922      	ldr	r2, [r4, #16]
 8004ac6:	bf0c      	ite	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	2500      	movne	r5, #0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfc4      	itt	gt
 8004ad2:	1a9b      	subgt	r3, r3, r2
 8004ad4:	18ed      	addgt	r5, r5, r3
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	341a      	adds	r4, #26
 8004ada:	42b5      	cmp	r5, r6
 8004adc:	d11a      	bne.n	8004b14 <_printf_common+0xc8>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e008      	b.n	8004af4 <_printf_common+0xa8>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	4638      	mov	r0, r7
 8004aea:	47c0      	blx	r8
 8004aec:	3001      	adds	r0, #1
 8004aee:	d103      	bne.n	8004af8 <_printf_common+0xac>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	3501      	adds	r5, #1
 8004afa:	e7c6      	b.n	8004a8a <_printf_common+0x3e>
 8004afc:	18e1      	adds	r1, r4, r3
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	2030      	movs	r0, #48	; 0x30
 8004b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b06:	4422      	add	r2, r4
 8004b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b10:	3302      	adds	r3, #2
 8004b12:	e7c7      	b.n	8004aa4 <_printf_common+0x58>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4622      	mov	r2, r4
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0e6      	beq.n	8004af0 <_printf_common+0xa4>
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7d9      	b.n	8004ada <_printf_common+0x8e>
	...

08004b28 <_printf_i>:
 8004b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	7e0f      	ldrb	r7, [r1, #24]
 8004b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b30:	2f78      	cmp	r7, #120	; 0x78
 8004b32:	4691      	mov	r9, r2
 8004b34:	4680      	mov	r8, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	469a      	mov	sl, r3
 8004b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b3e:	d807      	bhi.n	8004b50 <_printf_i+0x28>
 8004b40:	2f62      	cmp	r7, #98	; 0x62
 8004b42:	d80a      	bhi.n	8004b5a <_printf_i+0x32>
 8004b44:	2f00      	cmp	r7, #0
 8004b46:	f000 80d8 	beq.w	8004cfa <_printf_i+0x1d2>
 8004b4a:	2f58      	cmp	r7, #88	; 0x58
 8004b4c:	f000 80a3 	beq.w	8004c96 <_printf_i+0x16e>
 8004b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b58:	e03a      	b.n	8004bd0 <_printf_i+0xa8>
 8004b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b5e:	2b15      	cmp	r3, #21
 8004b60:	d8f6      	bhi.n	8004b50 <_printf_i+0x28>
 8004b62:	a101      	add	r1, pc, #4	; (adr r1, 8004b68 <_printf_i+0x40>)
 8004b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004b51 	.word	0x08004b51
 8004b74:	08004b51 	.word	0x08004b51
 8004b78:	08004b51 	.word	0x08004b51
 8004b7c:	08004b51 	.word	0x08004b51
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004b51 	.word	0x08004b51
 8004b88:	08004b51 	.word	0x08004b51
 8004b8c:	08004b51 	.word	0x08004b51
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	08004ce1 	.word	0x08004ce1
 8004b98:	08004c05 	.word	0x08004c05
 8004b9c:	08004cc3 	.word	0x08004cc3
 8004ba0:	08004b51 	.word	0x08004b51
 8004ba4:	08004b51 	.word	0x08004b51
 8004ba8:	08004d03 	.word	0x08004d03
 8004bac:	08004b51 	.word	0x08004b51
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004b51 	.word	0x08004b51
 8004bb8:	08004b51 	.word	0x08004b51
 8004bbc:	08004ccb 	.word	0x08004ccb
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0a3      	b.n	8004d1c <_printf_i+0x1f4>
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	6829      	ldr	r1, [r5, #0]
 8004bd8:	0606      	lsls	r6, r0, #24
 8004bda:	f101 0304 	add.w	r3, r1, #4
 8004bde:	d50a      	bpl.n	8004bf6 <_printf_i+0xce>
 8004be0:	680e      	ldr	r6, [r1, #0]
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	da03      	bge.n	8004bf0 <_printf_i+0xc8>
 8004be8:	232d      	movs	r3, #45	; 0x2d
 8004bea:	4276      	negs	r6, r6
 8004bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf0:	485e      	ldr	r0, [pc, #376]	; (8004d6c <_printf_i+0x244>)
 8004bf2:	230a      	movs	r3, #10
 8004bf4:	e019      	b.n	8004c2a <_printf_i+0x102>
 8004bf6:	680e      	ldr	r6, [r1, #0]
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bfe:	bf18      	it	ne
 8004c00:	b236      	sxthne	r6, r6
 8004c02:	e7ef      	b.n	8004be4 <_printf_i+0xbc>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	6820      	ldr	r0, [r4, #0]
 8004c08:	1d19      	adds	r1, r3, #4
 8004c0a:	6029      	str	r1, [r5, #0]
 8004c0c:	0601      	lsls	r1, r0, #24
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0xec>
 8004c10:	681e      	ldr	r6, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0xf2>
 8004c14:	0646      	lsls	r6, r0, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0xe8>
 8004c18:	881e      	ldrh	r6, [r3, #0]
 8004c1a:	4854      	ldr	r0, [pc, #336]	; (8004d6c <_printf_i+0x244>)
 8004c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c1e:	bf0c      	ite	eq
 8004c20:	2308      	moveq	r3, #8
 8004c22:	230a      	movne	r3, #10
 8004c24:	2100      	movs	r1, #0
 8004c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2a:	6865      	ldr	r5, [r4, #4]
 8004c2c:	60a5      	str	r5, [r4, #8]
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	bfa2      	ittt	ge
 8004c32:	6821      	ldrge	r1, [r4, #0]
 8004c34:	f021 0104 	bicge.w	r1, r1, #4
 8004c38:	6021      	strge	r1, [r4, #0]
 8004c3a:	b90e      	cbnz	r6, 8004c40 <_printf_i+0x118>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d04d      	beq.n	8004cdc <_printf_i+0x1b4>
 8004c40:	4615      	mov	r5, r2
 8004c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c46:	fb03 6711 	mls	r7, r3, r1, r6
 8004c4a:	5dc7      	ldrb	r7, [r0, r7]
 8004c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c50:	4637      	mov	r7, r6
 8004c52:	42bb      	cmp	r3, r7
 8004c54:	460e      	mov	r6, r1
 8004c56:	d9f4      	bls.n	8004c42 <_printf_i+0x11a>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d10b      	bne.n	8004c74 <_printf_i+0x14c>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	07de      	lsls	r6, r3, #31
 8004c60:	d508      	bpl.n	8004c74 <_printf_i+0x14c>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6861      	ldr	r1, [r4, #4]
 8004c66:	4299      	cmp	r1, r3
 8004c68:	bfde      	ittt	le
 8004c6a:	2330      	movle	r3, #48	; 0x30
 8004c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c74:	1b52      	subs	r2, r2, r5
 8004c76:	6122      	str	r2, [r4, #16]
 8004c78:	f8cd a000 	str.w	sl, [sp]
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	aa03      	add	r2, sp, #12
 8004c80:	4621      	mov	r1, r4
 8004c82:	4640      	mov	r0, r8
 8004c84:	f7ff fee2 	bl	8004a4c <_printf_common>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d14c      	bne.n	8004d26 <_printf_i+0x1fe>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c90:	b004      	add	sp, #16
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	4835      	ldr	r0, [pc, #212]	; (8004d6c <_printf_i+0x244>)
 8004c98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c9c:	6829      	ldr	r1, [r5, #0]
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ca4:	6029      	str	r1, [r5, #0]
 8004ca6:	061d      	lsls	r5, r3, #24
 8004ca8:	d514      	bpl.n	8004cd4 <_printf_i+0x1ac>
 8004caa:	07df      	lsls	r7, r3, #31
 8004cac:	bf44      	itt	mi
 8004cae:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb2:	6023      	strmi	r3, [r4, #0]
 8004cb4:	b91e      	cbnz	r6, 8004cbe <_printf_i+0x196>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f023 0320 	bic.w	r3, r3, #32
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	e7b0      	b.n	8004c24 <_printf_i+0xfc>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f043 0320 	orr.w	r3, r3, #32
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	2378      	movs	r3, #120	; 0x78
 8004ccc:	4828      	ldr	r0, [pc, #160]	; (8004d70 <_printf_i+0x248>)
 8004cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cd2:	e7e3      	b.n	8004c9c <_printf_i+0x174>
 8004cd4:	0659      	lsls	r1, r3, #25
 8004cd6:	bf48      	it	mi
 8004cd8:	b2b6      	uxthmi	r6, r6
 8004cda:	e7e6      	b.n	8004caa <_printf_i+0x182>
 8004cdc:	4615      	mov	r5, r2
 8004cde:	e7bb      	b.n	8004c58 <_printf_i+0x130>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	6826      	ldr	r6, [r4, #0]
 8004ce4:	6961      	ldr	r1, [r4, #20]
 8004ce6:	1d18      	adds	r0, r3, #4
 8004ce8:	6028      	str	r0, [r5, #0]
 8004cea:	0635      	lsls	r5, r6, #24
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0x1cc>
 8004cf0:	6019      	str	r1, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0x1d2>
 8004cf4:	0670      	lsls	r0, r6, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0x1c8>
 8004cf8:	8019      	strh	r1, [r3, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	4615      	mov	r5, r2
 8004d00:	e7ba      	b.n	8004c78 <_printf_i+0x150>
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	1d1a      	adds	r2, r3, #4
 8004d06:	602a      	str	r2, [r5, #0]
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f7fb fa76 	bl	8000200 <memchr>
 8004d14:	b108      	cbz	r0, 8004d1a <_printf_i+0x1f2>
 8004d16:	1b40      	subs	r0, r0, r5
 8004d18:	6060      	str	r0, [r4, #4]
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d24:	e7a8      	b.n	8004c78 <_printf_i+0x150>
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	462a      	mov	r2, r5
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	47d0      	blx	sl
 8004d30:	3001      	adds	r0, #1
 8004d32:	d0ab      	beq.n	8004c8c <_printf_i+0x164>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	079b      	lsls	r3, r3, #30
 8004d38:	d413      	bmi.n	8004d62 <_printf_i+0x23a>
 8004d3a:	68e0      	ldr	r0, [r4, #12]
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	bfb8      	it	lt
 8004d42:	4618      	movlt	r0, r3
 8004d44:	e7a4      	b.n	8004c90 <_printf_i+0x168>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	47d0      	blx	sl
 8004d50:	3001      	adds	r0, #1
 8004d52:	d09b      	beq.n	8004c8c <_printf_i+0x164>
 8004d54:	3501      	adds	r5, #1
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	9903      	ldr	r1, [sp, #12]
 8004d5a:	1a5b      	subs	r3, r3, r1
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dcf2      	bgt.n	8004d46 <_printf_i+0x21e>
 8004d60:	e7eb      	b.n	8004d3a <_printf_i+0x212>
 8004d62:	2500      	movs	r5, #0
 8004d64:	f104 0619 	add.w	r6, r4, #25
 8004d68:	e7f5      	b.n	8004d56 <_printf_i+0x22e>
 8004d6a:	bf00      	nop
 8004d6c:	080053d5 	.word	0x080053d5
 8004d70:	080053e6 	.word	0x080053e6

08004d74 <memmove>:
 8004d74:	4288      	cmp	r0, r1
 8004d76:	b510      	push	{r4, lr}
 8004d78:	eb01 0402 	add.w	r4, r1, r2
 8004d7c:	d902      	bls.n	8004d84 <memmove+0x10>
 8004d7e:	4284      	cmp	r4, r0
 8004d80:	4623      	mov	r3, r4
 8004d82:	d807      	bhi.n	8004d94 <memmove+0x20>
 8004d84:	1e43      	subs	r3, r0, #1
 8004d86:	42a1      	cmp	r1, r4
 8004d88:	d008      	beq.n	8004d9c <memmove+0x28>
 8004d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d92:	e7f8      	b.n	8004d86 <memmove+0x12>
 8004d94:	4402      	add	r2, r0
 8004d96:	4601      	mov	r1, r0
 8004d98:	428a      	cmp	r2, r1
 8004d9a:	d100      	bne.n	8004d9e <memmove+0x2a>
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004da6:	e7f7      	b.n	8004d98 <memmove+0x24>

08004da8 <_free_r>:
 8004da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004daa:	2900      	cmp	r1, #0
 8004dac:	d044      	beq.n	8004e38 <_free_r+0x90>
 8004dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db2:	9001      	str	r0, [sp, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dba:	bfb8      	it	lt
 8004dbc:	18e4      	addlt	r4, r4, r3
 8004dbe:	f000 f913 	bl	8004fe8 <__malloc_lock>
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <_free_r+0x94>)
 8004dc4:	9801      	ldr	r0, [sp, #4]
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	b933      	cbnz	r3, 8004dd8 <_free_r+0x30>
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	6014      	str	r4, [r2, #0]
 8004dce:	b003      	add	sp, #12
 8004dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dd4:	f000 b90e 	b.w	8004ff4 <__malloc_unlock>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d908      	bls.n	8004dee <_free_r+0x46>
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf01      	itttt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	e7ed      	b.n	8004dca <_free_r+0x22>
 8004dee:	461a      	mov	r2, r3
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	b10b      	cbz	r3, 8004df8 <_free_r+0x50>
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d9fa      	bls.n	8004dee <_free_r+0x46>
 8004df8:	6811      	ldr	r1, [r2, #0]
 8004dfa:	1855      	adds	r5, r2, r1
 8004dfc:	42a5      	cmp	r5, r4
 8004dfe:	d10b      	bne.n	8004e18 <_free_r+0x70>
 8004e00:	6824      	ldr	r4, [r4, #0]
 8004e02:	4421      	add	r1, r4
 8004e04:	1854      	adds	r4, r2, r1
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	d1e0      	bne.n	8004dce <_free_r+0x26>
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	6053      	str	r3, [r2, #4]
 8004e12:	4421      	add	r1, r4
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	e7da      	b.n	8004dce <_free_r+0x26>
 8004e18:	d902      	bls.n	8004e20 <_free_r+0x78>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6003      	str	r3, [r0, #0]
 8004e1e:	e7d6      	b.n	8004dce <_free_r+0x26>
 8004e20:	6825      	ldr	r5, [r4, #0]
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf04      	itt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	bf04      	itt	eq
 8004e30:	1949      	addeq	r1, r1, r5
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	6054      	str	r4, [r2, #4]
 8004e36:	e7ca      	b.n	8004dce <_free_r+0x26>
 8004e38:	b003      	add	sp, #12
 8004e3a:	bd30      	pop	{r4, r5, pc}
 8004e3c:	200011b0 	.word	0x200011b0

08004e40 <sbrk_aligned>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4e0e      	ldr	r6, [pc, #56]	; (8004e7c <sbrk_aligned+0x3c>)
 8004e44:	460c      	mov	r4, r1
 8004e46:	6831      	ldr	r1, [r6, #0]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	b911      	cbnz	r1, 8004e52 <sbrk_aligned+0x12>
 8004e4c:	f000 f8bc 	bl	8004fc8 <_sbrk_r>
 8004e50:	6030      	str	r0, [r6, #0]
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f8b7 	bl	8004fc8 <_sbrk_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <sbrk_aligned+0x34>
 8004e5e:	1cc4      	adds	r4, r0, #3
 8004e60:	f024 0403 	bic.w	r4, r4, #3
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d007      	beq.n	8004e78 <sbrk_aligned+0x38>
 8004e68:	1a21      	subs	r1, r4, r0
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f8ac 	bl	8004fc8 <_sbrk_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d101      	bne.n	8004e78 <sbrk_aligned+0x38>
 8004e74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	200011b4 	.word	0x200011b4

08004e80 <_malloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	1ccd      	adds	r5, r1, #3
 8004e86:	f025 0503 	bic.w	r5, r5, #3
 8004e8a:	3508      	adds	r5, #8
 8004e8c:	2d0c      	cmp	r5, #12
 8004e8e:	bf38      	it	cc
 8004e90:	250c      	movcc	r5, #12
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	4607      	mov	r7, r0
 8004e96:	db01      	blt.n	8004e9c <_malloc_r+0x1c>
 8004e98:	42a9      	cmp	r1, r5
 8004e9a:	d905      	bls.n	8004ea8 <_malloc_r+0x28>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4e2e      	ldr	r6, [pc, #184]	; (8004f64 <_malloc_r+0xe4>)
 8004eaa:	f000 f89d 	bl	8004fe8 <__malloc_lock>
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	bb34      	cbnz	r4, 8004f02 <_malloc_r+0x82>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ffc2 	bl	8004e40 <sbrk_aligned>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	d14d      	bne.n	8004f5e <_malloc_r+0xde>
 8004ec2:	6834      	ldr	r4, [r6, #0]
 8004ec4:	4626      	mov	r6, r4
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	d140      	bne.n	8004f4c <_malloc_r+0xcc>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4638      	mov	r0, r7
 8004ed0:	eb04 0803 	add.w	r8, r4, r3
 8004ed4:	f000 f878 	bl	8004fc8 <_sbrk_r>
 8004ed8:	4580      	cmp	r8, r0
 8004eda:	d13a      	bne.n	8004f52 <_malloc_r+0xd2>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	3503      	adds	r5, #3
 8004ee0:	1a6d      	subs	r5, r5, r1
 8004ee2:	f025 0503 	bic.w	r5, r5, #3
 8004ee6:	3508      	adds	r5, #8
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	bf38      	it	cc
 8004eec:	250c      	movcc	r5, #12
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ffa5 	bl	8004e40 <sbrk_aligned>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d02b      	beq.n	8004f52 <_malloc_r+0xd2>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	442b      	add	r3, r5
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e00e      	b.n	8004f20 <_malloc_r+0xa0>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	1b52      	subs	r2, r2, r5
 8004f06:	d41e      	bmi.n	8004f46 <_malloc_r+0xc6>
 8004f08:	2a0b      	cmp	r2, #11
 8004f0a:	d916      	bls.n	8004f3a <_malloc_r+0xba>
 8004f0c:	1961      	adds	r1, r4, r5
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	bf18      	it	ne
 8004f14:	6059      	strne	r1, [r3, #4]
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	bf08      	it	eq
 8004f1a:	6031      	streq	r1, [r6, #0]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f104 060b 	add.w	r6, r4, #11
 8004f26:	f000 f865 	bl	8004ff4 <__malloc_unlock>
 8004f2a:	f026 0607 	bic.w	r6, r6, #7
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	1af2      	subs	r2, r6, r3
 8004f32:	d0b6      	beq.n	8004ea2 <_malloc_r+0x22>
 8004f34:	1b9b      	subs	r3, r3, r6
 8004f36:	50a3      	str	r3, [r4, r2]
 8004f38:	e7b3      	b.n	8004ea2 <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	6032      	streq	r2, [r6, #0]
 8004f42:	605a      	strne	r2, [r3, #4]
 8004f44:	e7ec      	b.n	8004f20 <_malloc_r+0xa0>
 8004f46:	4623      	mov	r3, r4
 8004f48:	6864      	ldr	r4, [r4, #4]
 8004f4a:	e7b2      	b.n	8004eb2 <_malloc_r+0x32>
 8004f4c:	4634      	mov	r4, r6
 8004f4e:	6876      	ldr	r6, [r6, #4]
 8004f50:	e7b9      	b.n	8004ec6 <_malloc_r+0x46>
 8004f52:	230c      	movs	r3, #12
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4638      	mov	r0, r7
 8004f58:	f000 f84c 	bl	8004ff4 <__malloc_unlock>
 8004f5c:	e7a1      	b.n	8004ea2 <_malloc_r+0x22>
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa0>
 8004f62:	bf00      	nop
 8004f64:	200011b0 	.word	0x200011b0

08004f68 <_realloc_r>:
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	4614      	mov	r4, r2
 8004f70:	460e      	mov	r6, r1
 8004f72:	b921      	cbnz	r1, 8004f7e <_realloc_r+0x16>
 8004f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	4611      	mov	r1, r2
 8004f7a:	f7ff bf81 	b.w	8004e80 <_malloc_r>
 8004f7e:	b92a      	cbnz	r2, 8004f8c <_realloc_r+0x24>
 8004f80:	f7ff ff12 	bl	8004da8 <_free_r>
 8004f84:	4625      	mov	r5, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8c:	f000 f838 	bl	8005000 <_malloc_usable_size_r>
 8004f90:	4284      	cmp	r4, r0
 8004f92:	4607      	mov	r7, r0
 8004f94:	d802      	bhi.n	8004f9c <_realloc_r+0x34>
 8004f96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f9a:	d812      	bhi.n	8004fc2 <_realloc_r+0x5a>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	f7ff ff6e 	bl	8004e80 <_malloc_r>
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0ed      	beq.n	8004f86 <_realloc_r+0x1e>
 8004faa:	42bc      	cmp	r4, r7
 8004fac:	4622      	mov	r2, r4
 8004fae:	4631      	mov	r1, r6
 8004fb0:	bf28      	it	cs
 8004fb2:	463a      	movcs	r2, r7
 8004fb4:	f7ff fba4 	bl	8004700 <memcpy>
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fef4 	bl	8004da8 <_free_r>
 8004fc0:	e7e1      	b.n	8004f86 <_realloc_r+0x1e>
 8004fc2:	4635      	mov	r5, r6
 8004fc4:	e7df      	b.n	8004f86 <_realloc_r+0x1e>
	...

08004fc8 <_sbrk_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_sbrk_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fc f93c 	bl	8001250 <_sbrk>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_sbrk_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_sbrk_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	200011b8 	.word	0x200011b8

08004fe8 <__malloc_lock>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__malloc_lock+0x8>)
 8004fea:	f000 b811 	b.w	8005010 <__retarget_lock_acquire_recursive>
 8004fee:	bf00      	nop
 8004ff0:	200011bc 	.word	0x200011bc

08004ff4 <__malloc_unlock>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__malloc_unlock+0x8>)
 8004ff6:	f000 b80c 	b.w	8005012 <__retarget_lock_release_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	200011bc 	.word	0x200011bc

08005000 <_malloc_usable_size_r>:
 8005000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005004:	1f18      	subs	r0, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbc      	itt	lt
 800500a:	580b      	ldrlt	r3, [r1, r0]
 800500c:	18c0      	addlt	r0, r0, r3
 800500e:	4770      	bx	lr

08005010 <__retarget_lock_acquire_recursive>:
 8005010:	4770      	bx	lr

08005012 <__retarget_lock_release_recursive>:
 8005012:	4770      	bx	lr

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
