
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000108c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010fc  200010fc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009184  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001894  00000000  00000000  00029224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b8  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000238a  00000000  00000000  0002b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009723  00000000  00000000  0002dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf7e8  00000000  00000000  0003736d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106b55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020b0  00000000  00000000  00106ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b8c 	.word	0x08003b8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b8c 	.word	0x08003b8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <buf_init>:
 *  Created on: Oct 13, 2024
 *      Author: andryssssss
 */
#include "buf.h"

void buf_init(struct Buffer* buf) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	buf->data[0] = '\0';
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	buf->begin = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	buf->end = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	buf->isEmpty = true;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <is_buf_empty>:

_Bool is_buf_empty(struct Buffer* buf) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return buf->isEmpty;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <is_buf_full>:

_Bool is_buf_full(struct Buffer* buf) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return ((buf->end + 1 == buf->begin) || (buf->begin == 0 && buf->end == sizeof(buf->data) - 1));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80005fe:	3301      	adds	r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8000606:	4293      	cmp	r3, r2
 8000608:	d00b      	beq.n	8000622 <is_buf_full+0x32>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000610:	2b00      	cmp	r3, #0
 8000612:	d108      	bne.n	8000626 <is_buf_full+0x36>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800061a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <is_buf_full+0x36>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <is_buf_full+0x38>
 8000626:	2300      	movs	r3, #0
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <buf_push>:

void buf_push(struct Buffer* buf, uint8_t* data, size_t size) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	size_t written = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800064a:	e01e      	b.n	800068a <buf_push+0x50>
		if (is_buf_full(buf)) {
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffcf 	bl	80005f0 <is_buf_full>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11d      	bne.n	8000694 <buf_push+0x5a>
			break;
		}
		buf->end = (buf->end + 1) % sizeof(buf->data);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800065e:	3301      	adds	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000666:	b29a      	uxth	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		buf->data[buf->end] = *data;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	5499      	strb	r1, [r3, r2]
		data++;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
		written++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
	while (written < size) {
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3dc      	bcc.n	800064c <buf_push+0x12>
 8000692:	e000      	b.n	8000696 <buf_push+0x5c>
			break;
 8000694:	bf00      	nop
	}
	if (!is_buf_full(buf)) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ffaa 	bl	80005f0 <is_buf_full>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00a      	beq.n	80006be <buf_push+0x84>
		buf->end = (buf->end + 1) % sizeof(buf->data);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	}
	buf->data[buf->end] = '\0';
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2100      	movs	r1, #0
 80006ca:	5499      	strb	r1, [r3, r2]
	buf->isEmpty = false;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <buf_pop>:

_Bool buf_pop(struct Buffer* buf, uint8_t* data, size_t size) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	if (is_buf_empty(buf)) {
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff74 	bl	80005d6 <is_buf_empty>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <buf_pop+0x1c>
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e04e      	b.n	8000796 <buf_pop+0xba>
	}
	buf->begin = (buf->begin + 1) % sizeof(buf->data);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80006fe:	3301      	adds	r3, #1
 8000700:	b29b      	uxth	r3, r3
 8000702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000706:	b29a      	uxth	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	size_t read = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
	while (buf->data[buf->begin] != '\0') {
 8000712:	e01b      	b.n	800074c <buf_pop+0x70>
		if (read < size) {
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	d20c      	bcs.n	8000736 <buf_pop+0x5a>
			data[read] = buf->data[buf->begin];
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000722:	4619      	mov	r1, r3
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	5c52      	ldrb	r2, [r2, r1]
 800072e:	701a      	strb	r2, [r3, #0]
			read++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
		}
		buf->begin = (buf->begin + 1) % sizeof(buf->data);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800073c:	3301      	adds	r3, #1
 800073e:	b29b      	uxth	r3, r3
 8000740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000744:	b29a      	uxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	while (buf->data[buf->begin] != '\0') {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1db      	bne.n	8000714 <buf_pop+0x38>
	}
	data[read + (read == size ? -1 : 0)] = '\0';
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d102      	bne.n	800076a <buf_pop+0x8e>
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	e000      	b.n	800076c <buf_pop+0x90>
 800076a:	2200      	movs	r2, #0
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	buf->isEmpty = (buf->begin == buf->end);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000784:	429a      	cmp	r2, r3
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	return true;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <transmit>:
struct Buffer receiveBuffer = {0};
struct Buffer transmitBuffer = {0};

uint8_t char_buf[1] = {'\0'};

void transmit(uint8_t* data, size_t size) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	if (HAL_UART_Transmit_IT(&huart6, data, size) == HAL_BUSY) {
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <transmit+0x30>)
 80007b4:	f001 fdd1 	bl	800235a <HAL_UART_Transmit_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d104      	bne.n	80007c8 <transmit+0x28>
		buf_push(&transmitBuffer, data, size);
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <transmit+0x34>)
 80007c4:	f7ff ff39 	bl	800063a <buf_push>
	}
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	200008d8 	.word	0x200008d8

080007d8 <transmitc>:

void transmitc(char* data) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	transmit((uint8_t*) data, strlen(data));
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fd05 	bl	80001f0 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4619      	mov	r1, r3
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffd8 	bl	80007a0 <transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <receive>:

void receive() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, char_buf, sizeof(char_buf));
 80007fc:	2201      	movs	r2, #1
 80007fe:	4903      	ldr	r1, [pc, #12]	; (800080c <receive+0x14>)
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <receive+0x18>)
 8000802:	f001 fdef 	bl	80023e4 <HAL_UART_Receive_IT>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200010e0 	.word	0x200010e0
 8000810:	2000008c 	.word	0x2000008c

08000814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	buf_push(&receiveBuffer, char_buf, sizeof(char_buf));
 800081c:	2201      	movs	r2, #1
 800081e:	4906      	ldr	r1, [pc, #24]	; (8000838 <HAL_UART_RxCpltCallback+0x24>)
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <HAL_UART_RxCpltCallback+0x28>)
 8000822:	f7ff ff0a 	bl	800063a <buf_push>
	transmit(char_buf, sizeof(char_buf));
 8000826:	2101      	movs	r1, #1
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <HAL_UART_RxCpltCallback+0x24>)
 800082a:	f7ff ffb9 	bl	80007a0 <transmit>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200010e0 	.word	0x200010e0
 800083c:	200000d0 	.word	0x200000d0

08000840 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000840:	b580      	push	{r7, lr}
 8000842:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000846:	af00      	add	r7, sp, #0
 8000848:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800084c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000850:	6018      	str	r0, [r3, #0]
  uint8_t buf[1024];
  if (buf_pop(&transmitBuffer, buf, sizeof(buf))) {
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <HAL_UART_TxCpltCallback+0x4c>)
 800085e:	f7ff ff3d 	bl	80006dc <buf_pop>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00c      	beq.n	8000882 <HAL_UART_TxCpltCallback+0x42>
	  HAL_UART_Transmit_IT(&huart6, buf, strlen((char*) buf));
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fcbf 	bl	80001f0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <HAL_UART_TxCpltCallback+0x50>)
 800087e:	f001 fd6c 	bl	800235a <HAL_UART_Transmit_IT>
  }
}
 8000882:	bf00      	nop
 8000884:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200008d8 	.word	0x200008d8
 8000890:	2000008c 	.word	0x2000008c

08000894 <leds_str.1>:

  size_t edit_mode = 0;
  uint16_t edit_mode_led = 0;
  uint16_t edit_mode_brightness = 0;

  char leds_str(uint16_t leds) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
 800089e:	f8c7 c000 	str.w	ip, [r7]
	  if (leds == 0x1) return 'G';
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d101      	bne.n	80008ac <leds_str.1+0x18>
 80008a8:	2347      	movs	r3, #71	; 0x47
 80008aa:	e00a      	b.n	80008c2 <leds_str.1+0x2e>
	  if (leds == 0x2) return 'Y';
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d101      	bne.n	80008b6 <leds_str.1+0x22>
 80008b2:	2359      	movs	r3, #89	; 0x59
 80008b4:	e005      	b.n	80008c2 <leds_str.1+0x2e>
	  if (leds == 0x4) return 'R';
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d101      	bne.n	80008c0 <leds_str.1+0x2c>
 80008bc:	2352      	movs	r3, #82	; 0x52
 80008be:	e000      	b.n	80008c2 <leds_str.1+0x2e>
	  return '?';
 80008c0:	233f      	movs	r3, #63	; 0x3f
  }
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <main>:
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b090      	sub	sp, #64	; 0x40
 80008d4:	af00      	add	r7, sp, #0
int main(void)
 80008d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_Init();
 80008dc:	f000 fcbc 	bl	8001258 <HAL_Init>
  buf_init(&receiveBuffer);
 80008e0:	482e      	ldr	r0, [pc, #184]	; (800099c <main+0xcc>)
 80008e2:	f7ff fe5f 	bl	80005a4 <buf_init>
  buf_init(&transmitBuffer);
 80008e6:	482e      	ldr	r0, [pc, #184]	; (80009a0 <main+0xd0>)
 80008e8:	f7ff fe5c 	bl	80005a4 <buf_init>
  SystemClock_Config();
 80008ec:	f000 fa96 	bl	8000e1c <SystemClock_Config>
  MX_GPIO_Init();
 80008f0:	f000 fb1e 	bl	8000f30 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80008f4:	f000 faf2 	bl	8000edc <MX_USART6_UART_Init>
  uint16_t mode_leds[9] = {0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4};
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <main+0xd4>)
 80008fa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80008fe:	461d      	mov	r5, r3
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	8023      	strh	r3, [r4, #0]
  uint16_t mode_brightness[9] = {10, 40, 100, 10, 40, 100, 10, 40, 100};
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <main+0xd8>)
 800090a:	f107 0512 	add.w	r5, r7, #18
 800090e:	461c      	mov	r4, r3
 8000910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000912:	6028      	str	r0, [r5, #0]
 8000914:	6069      	str	r1, [r5, #4]
 8000916:	60aa      	str	r2, [r5, #8]
 8000918:	60eb      	str	r3, [r5, #12]
 800091a:	8823      	ldrh	r3, [r4, #0]
 800091c:	822b      	strh	r3, [r5, #16]
  uint16_t state = ST_MAIN;
 800091e:	2300      	movs	r3, #0
 8000920:	823b      	strh	r3, [r7, #16]
  size_t cur_mode = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  size_t edit_mode = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  uint16_t edit_mode_led = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	81fb      	strh	r3, [r7, #14]
  uint16_t edit_mode_brightness = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	81bb      	strh	r3, [r7, #12]
			  transmitc(buf);
		  }
	  }
  }

  if (!hello_print) {
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <main+0xdc>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f083 0301 	eor.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d009      	beq.n	8000954 <main+0x84>
	  hello_print = true;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <main+0xdc>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
	  transmitc("\r\n\r\nProgramm started\r\n");
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <main+0xe0>)
 8000948:	f7ff ff46 	bl	80007d8 <transmitc>
	  print_mode_message();
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	469c      	mov	ip, r3
 8000950:	f000 f834 	bl	80009bc <print_mode_message.0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receive();
 8000954:	f7ff ff50 	bl	80007f8 <receive>

	  uint8_t read[2] = {0};
 8000958:	2300      	movs	r3, #0
 800095a:	803b      	strh	r3, [r7, #0]
	  if (buf_pop(&receiveBuffer, read, sizeof(read))) {
 800095c:	463b      	mov	r3, r7
 800095e:	2202      	movs	r2, #2
 8000960:	4619      	mov	r1, r3
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <main+0xcc>)
 8000964:	f7ff feba 	bl	80006dc <buf_pop>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f2      	beq.n	8000954 <main+0x84>
		  char c = (char) read[0];
 800096e:	783b      	ldrb	r3, [r7, #0]
 8000970:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if (c == '\r') {
 8000974:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000978:	2b0d      	cmp	r3, #13
 800097a:	d103      	bne.n	8000984 <main+0xb4>
			  transmitc("\n");
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <main+0xe4>)
 800097e:	f7ff ff2b 	bl	80007d8 <transmitc>
 8000982:	e002      	b.n	800098a <main+0xba>
		  } else {
			  transmitc("\r\n");
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <main+0xe8>)
 8000986:	f7ff ff27 	bl	80007d8 <transmitc>
		  }
		  handle_command(c);
 800098a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800098e:	1d3a      	adds	r2, r7, #4
 8000990:	4694      	mov	ip, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f8c4 	bl	8000b20 <handle_command.2>
  {
 8000998:	e7dc      	b.n	8000954 <main+0x84>
 800099a:	bf00      	nop
 800099c:	200000d0 	.word	0x200000d0
 80009a0:	200008d8 	.word	0x200008d8
 80009a4:	08003bc4 	.word	0x08003bc4
 80009a8:	08003bd8 	.word	0x08003bd8
 80009ac:	200010e1 	.word	0x200010e1
 80009b0:	08003ba4 	.word	0x08003ba4
 80009b4:	08003bbc 	.word	0x08003bbc
 80009b8:	08003bc0 	.word	0x08003bc0

080009bc <print_mode_message.0>:
  void print_mode_message() {
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	b0e7      	sub	sp, #412	; 0x19c
 80009c0:	af12      	add	r7, sp, #72	; 0x48
 80009c2:	4664      	mov	r4, ip
 80009c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80009c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80009cc:	f8c3 c000 	str.w	ip, [r3]
	  char mode_leds_str[9] = {0};
 80009d0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80009d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	3304      	adds	r3, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80009ea:	e018      	b.n	8000a1e <print_mode_message.0+0x62>
		  mode_leds_str[i] = leds_str(mode_leds[i]);
 80009ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80009f0:	3310      	adds	r3, #16
 80009f2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80009f6:	46a4      	mov	ip, r4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff4b 	bl	8000894 <leds_str.1>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4619      	mov	r1, r3
 8000a02:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a06:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8000a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000a0e:	4413      	add	r3, r2
 8000a10:	460a      	mov	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < sizeof(mode_leds_str); i++) {
 8000a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000a18:	3301      	adds	r3, #1
 8000a1a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d9e2      	bls.n	80009ec <print_mode_message.0+0x30>
	  char *format = "\
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <print_mode_message.0+0x160>)
 8000a28:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a2c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a34:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), format,
 8000a36:	469c      	mov	ip, r3
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a38:	89e3      	ldrh	r3, [r4, #14]
	  snprintf(buf, sizeof(buf), format,
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a3c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a44:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), format,
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a48:	8a23      	ldrh	r3, [r4, #16]
	  snprintf(buf, sizeof(buf), format,
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a4c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a54:	789b      	ldrb	r3, [r3, #2]
	  snprintf(buf, sizeof(buf), format,
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
			  mode_leds_str[0], mode_brightness[0], mode_leds_str[1], mode_brightness[1], mode_leds_str[2], mode_brightness[2],
 8000a58:	8a63      	ldrh	r3, [r4, #18]
	  snprintf(buf, sizeof(buf), format,
 8000a5a:	623b      	str	r3, [r7, #32]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a5c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a64:	78db      	ldrb	r3, [r3, #3]
	  snprintf(buf, sizeof(buf), format,
 8000a66:	61fb      	str	r3, [r7, #28]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a68:	8aa3      	ldrh	r3, [r4, #20]
	  snprintf(buf, sizeof(buf), format,
 8000a6a:	61bb      	str	r3, [r7, #24]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a6c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a74:	791b      	ldrb	r3, [r3, #4]
	  snprintf(buf, sizeof(buf), format,
 8000a76:	617b      	str	r3, [r7, #20]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a78:	8ae3      	ldrh	r3, [r4, #22]
	  snprintf(buf, sizeof(buf), format,
 8000a7a:	613b      	str	r3, [r7, #16]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a84:	795b      	ldrb	r3, [r3, #5]
	  snprintf(buf, sizeof(buf), format,
 8000a86:	60fb      	str	r3, [r7, #12]
			  mode_leds_str[3], mode_brightness[3], mode_leds_str[4], mode_brightness[4], mode_leds_str[5], mode_brightness[5],
 8000a88:	8b23      	ldrh	r3, [r4, #24]
	  snprintf(buf, sizeof(buf), format,
 8000a8a:	60bb      	str	r3, [r7, #8]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000a8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a94:	799b      	ldrb	r3, [r3, #6]
	  snprintf(buf, sizeof(buf), format,
 8000a96:	607b      	str	r3, [r7, #4]
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000a98:	8b63      	ldrh	r3, [r4, #26]
	  snprintf(buf, sizeof(buf), format,
 8000a9a:	461e      	mov	r6, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000a9c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000aa0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000aa4:	79db      	ldrb	r3, [r3, #7]
	  snprintf(buf, sizeof(buf), format,
 8000aa6:	461d      	mov	r5, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000aa8:	8ba3      	ldrh	r3, [r4, #28]
	  snprintf(buf, sizeof(buf), format,
 8000aaa:	4619      	mov	r1, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000aac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ab0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ab4:	7a1b      	ldrb	r3, [r3, #8]
	  snprintf(buf, sizeof(buf), format,
 8000ab6:	461a      	mov	r2, r3
			  mode_leds_str[6], mode_brightness[6], mode_leds_str[7], mode_brightness[7], mode_leds_str[8], mode_brightness[8]);
 8000ab8:	8be3      	ldrh	r3, [r4, #30]
	  snprintf(buf, sizeof(buf), format,
 8000aba:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000abe:	9310      	str	r3, [sp, #64]	; 0x40
 8000ac0:	920f      	str	r2, [sp, #60]	; 0x3c
 8000ac2:	910e      	str	r1, [sp, #56]	; 0x38
 8000ac4:	950d      	str	r5, [sp, #52]	; 0x34
 8000ac6:	960c      	str	r6, [sp, #48]	; 0x30
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	920b      	str	r2, [sp, #44]	; 0x2c
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	920a      	str	r2, [sp, #40]	; 0x28
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	9208      	str	r2, [sp, #32]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	9207      	str	r2, [sp, #28]
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	9206      	str	r2, [sp, #24]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	9205      	str	r2, [sp, #20]
 8000ae4:	6a3a      	ldr	r2, [r7, #32]
 8000ae6:	9204      	str	r2, [sp, #16]
 8000ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aea:	9203      	str	r2, [sp, #12]
 8000aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aee:	9202      	str	r2, [sp, #8]
 8000af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000af2:	9201      	str	r2, [sp, #4]
 8000af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	4663      	mov	r3, ip
 8000afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	f002 fbc1 	bl	8003288 <sniprintf>
	  transmitc(buf);
 8000b06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe64 	bl	80007d8 <transmitc>
  }
 8000b10:	bf00      	nop
 8000b12:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08003bec 	.word	0x08003bec

08000b20 <handle_command.2>:
  void handle_command(char cmd) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b0a5      	sub	sp, #148	; 0x94
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	f8c7 c000 	str.w	ip, [r7]
	  if (state == ST_MAIN) {
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d12f      	bne.n	8000b96 <handle_command.2+0x76>
		  if (cmd >= '1' && cmd <= '9') {
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b30      	cmp	r3, #48	; 0x30
 8000b3a:	d912      	bls.n	8000b62 <handle_command.2+0x42>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b39      	cmp	r3, #57	; 0x39
 8000b40:	d80f      	bhi.n	8000b62 <handle_command.2+0x42>
			  cur_mode = (cmd - '1');
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	3b31      	subs	r3, #49	; 0x31
 8000b46:	6063      	str	r3, [r4, #4]
			  snprintf(buf, sizeof(buf), "Mode %c selected\n\r> ", cmd);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f107 000c 	add.w	r0, r7, #12
 8000b4e:	4a9c      	ldr	r2, [pc, #624]	; (8000dc0 <handle_command.2+0x2a0>)
 8000b50:	2120      	movs	r1, #32
 8000b52:	f002 fb99 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fe3c 	bl	80007d8 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000b60:	e12a      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '0') {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b30      	cmp	r3, #48	; 0x30
 8000b66:	d106      	bne.n	8000b76 <handle_command.2+0x56>
			  cur_mode = -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6c:	6063      	str	r3, [r4, #4]
			  transmitc("All LEDs off\n\r> ");
 8000b6e:	4895      	ldr	r0, [pc, #596]	; (8000dc4 <handle_command.2+0x2a4>)
 8000b70:	f7ff fe32 	bl	80007d8 <transmitc>
  }
 8000b74:	e120      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '\r') {
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d108      	bne.n	8000b8e <handle_command.2+0x6e>
			  state = ST_EDIT_WAIT_MODE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	81a3      	strh	r3, [r4, #12]
			  edit_mode = -1;
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b84:	6023      	str	r3, [r4, #0]
			  transmitc("Enter edit mode\r\nChoose mode to edit [1-9]: ");
 8000b86:	4890      	ldr	r0, [pc, #576]	; (8000dc8 <handle_command.2+0x2a8>)
 8000b88:	f7ff fe26 	bl	80007d8 <transmitc>
  }
 8000b8c:	e114      	b.n	8000db8 <handle_command.2+0x298>
			  transmitc("Unknown command (available: 1-9,0,Enter)\n\r> ");
 8000b8e:	488f      	ldr	r0, [pc, #572]	; (8000dcc <handle_command.2+0x2ac>)
 8000b90:	f7ff fe22 	bl	80007d8 <transmitc>
  }
 8000b94:	e110      	b.n	8000db8 <handle_command.2+0x298>
	  } else if (state == ST_EDIT_WAIT_MODE) {
 8000b96:	89a3      	ldrh	r3, [r4, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d13d      	bne.n	8000c18 <handle_command.2+0xf8>
		  if (cmd >= '1' && cmd <= '9') {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b30      	cmp	r3, #48	; 0x30
 8000ba0:	d912      	bls.n	8000bc8 <handle_command.2+0xa8>
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b39      	cmp	r3, #57	; 0x39
 8000ba6:	d80f      	bhi.n	8000bc8 <handle_command.2+0xa8>
			  edit_mode = (cmd - '1');
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3b31      	subs	r3, #49	; 0x31
 8000bac:	6023      	str	r3, [r4, #0]
			  snprintf(buf, sizeof(buf), "Selected mode %c. Enter to continue or choose another mode [1-9]: ", cmd);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f107 000c 	add.w	r0, r7, #12
 8000bb4:	4a86      	ldr	r2, [pc, #536]	; (8000dd0 <handle_command.2+0x2b0>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	f002 fb66 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe09 	bl	80007d8 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000bc6:	e0f7      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '\r') {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b0d      	cmp	r3, #13
 8000bcc:	d10f      	bne.n	8000bee <handle_command.2+0xce>
			  if (edit_mode == -1) {
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd4:	d103      	bne.n	8000bde <handle_command.2+0xbe>
				  transmitc("No mode selected. Choose mode to edit [1-9]: ");
 8000bd6:	487f      	ldr	r0, [pc, #508]	; (8000dd4 <handle_command.2+0x2b4>)
 8000bd8:	f7ff fdfe 	bl	80007d8 <transmitc>
  }
 8000bdc:	e0ec      	b.n	8000db8 <handle_command.2+0x298>
				  state = ST_EDIT_WAIT_LED;
 8000bde:	2302      	movs	r3, #2
 8000be0:	81a3      	strh	r3, [r4, #12]
				  edit_mode_led = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	8163      	strh	r3, [r4, #10]
				  transmitc("Choose led for mode [g,y,r]: ");
 8000be6:	487c      	ldr	r0, [pc, #496]	; (8000dd8 <handle_command.2+0x2b8>)
 8000be8:	f7ff fdf6 	bl	80007d8 <transmitc>
  }
 8000bec:	e0e4      	b.n	8000db8 <handle_command.2+0x298>
			  if (edit_mode == -1) {
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf4:	d103      	bne.n	8000bfe <handle_command.2+0xde>
				  transmitc("Unknown command. Choose mode to edit [1-9]: ");
 8000bf6:	4879      	ldr	r0, [pc, #484]	; (8000ddc <handle_command.2+0x2bc>)
 8000bf8:	f7ff fdee 	bl	80007d8 <transmitc>
  }
 8000bfc:	e0dc      	b.n	8000db8 <handle_command.2+0x298>
				  snprintf(buf, sizeof(buf), "Unknown command. Selected mode %c. Enter to continue or choose another mode [1-9]: ", cmd);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f107 000c 	add.w	r0, r7, #12
 8000c04:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <handle_command.2+0x2c0>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	f002 fb3e 	bl	8003288 <sniprintf>
				  transmitc(buf);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fde1 	bl	80007d8 <transmitc>
  }
 8000c16:	e0cf      	b.n	8000db8 <handle_command.2+0x298>
	  } else if (state == ST_EDIT_WAIT_LED) {
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d14e      	bne.n	8000cbc <handle_command.2+0x19c>
		  if (cmd == 'g') {
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b67      	cmp	r3, #103	; 0x67
 8000c22:	d105      	bne.n	8000c30 <handle_command.2+0x110>
			  edit_mode_led = 0x1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	8163      	strh	r3, [r4, #10]
			  transmitc("Green led selected. Enter to continue or choose another led [g,y,r]: ");
 8000c28:	486e      	ldr	r0, [pc, #440]	; (8000de4 <handle_command.2+0x2c4>)
 8000c2a:	f7ff fdd5 	bl	80007d8 <transmitc>
  }
 8000c2e:	e0c3      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == 'y') {
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b79      	cmp	r3, #121	; 0x79
 8000c34:	d105      	bne.n	8000c42 <handle_command.2+0x122>
			  edit_mode_led = 0x2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	8163      	strh	r3, [r4, #10]
			  transmitc("Yellow led selected. Enter to continue or choose another led [g,y,r]: ");
 8000c3a:	486b      	ldr	r0, [pc, #428]	; (8000de8 <handle_command.2+0x2c8>)
 8000c3c:	f7ff fdcc 	bl	80007d8 <transmitc>
  }
 8000c40:	e0ba      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == 'r') {
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b72      	cmp	r3, #114	; 0x72
 8000c46:	d105      	bne.n	8000c54 <handle_command.2+0x134>
			  edit_mode_led = 0x4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	8163      	strh	r3, [r4, #10]
			  transmitc("Red led selected. Enter to continue or choose another led [g,y,r]: ");
 8000c4c:	4867      	ldr	r0, [pc, #412]	; (8000dec <handle_command.2+0x2cc>)
 8000c4e:	f7ff fdc3 	bl	80007d8 <transmitc>
  }
 8000c52:	e0b1      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '\r') {
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b0d      	cmp	r3, #13
 8000c58:	d10e      	bne.n	8000c78 <handle_command.2+0x158>
			  if (edit_mode_led == 0) {
 8000c5a:	8963      	ldrh	r3, [r4, #10]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <handle_command.2+0x148>
				  transmitc("No led selected. Choose led for mode [g,y,r]: ");
 8000c60:	4863      	ldr	r0, [pc, #396]	; (8000df0 <handle_command.2+0x2d0>)
 8000c62:	f7ff fdb9 	bl	80007d8 <transmitc>
  }
 8000c66:	e0a7      	b.n	8000db8 <handle_command.2+0x298>
				  state = ST_EDIT_WAIT_BRIGHT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	81a3      	strh	r3, [r4, #12]
				  edit_mode_brightness = 40;
 8000c6c:	2328      	movs	r3, #40	; 0x28
 8000c6e:	8123      	strh	r3, [r4, #8]
				  transmitc("Default led brightness 40%. Enter to continue or choose another brightness [1-9,0,+|-]: ");
 8000c70:	4860      	ldr	r0, [pc, #384]	; (8000df4 <handle_command.2+0x2d4>)
 8000c72:	f7ff fdb1 	bl	80007d8 <transmitc>
  }
 8000c76:	e09f      	b.n	8000db8 <handle_command.2+0x298>
			  if (edit_mode_led == 0) {
 8000c78:	8963      	ldrh	r3, [r4, #10]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <handle_command.2+0x166>
				  transmitc("Unknown command. Choose led for mode [g,y,r]: ");
 8000c7e:	485e      	ldr	r0, [pc, #376]	; (8000df8 <handle_command.2+0x2d8>)
 8000c80:	f7ff fdaa 	bl	80007d8 <transmitc>
  }
 8000c84:	e098      	b.n	8000db8 <handle_command.2+0x298>
				  char *led = (edit_mode_led == 0x1 ? "Green" : edit_mode_led == 0x2 ? "Yellow" : "Red");
 8000c86:	8963      	ldrh	r3, [r4, #10]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d006      	beq.n	8000c9a <handle_command.2+0x17a>
 8000c8c:	8963      	ldrh	r3, [r4, #10]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d101      	bne.n	8000c96 <handle_command.2+0x176>
 8000c92:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <handle_command.2+0x2dc>)
 8000c94:	e002      	b.n	8000c9c <handle_command.2+0x17c>
 8000c96:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <handle_command.2+0x2e0>)
 8000c98:	e000      	b.n	8000c9c <handle_command.2+0x17c>
 8000c9a:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <handle_command.2+0x2e4>)
 8000c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  snprintf(buf, sizeof(buf), "Unknown command. %s led selected. Enter to continue or choose another led [g,y,r]: ", led);
 8000ca0:	f107 000c 	add.w	r0, r7, #12
 8000ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ca8:	4a57      	ldr	r2, [pc, #348]	; (8000e08 <handle_command.2+0x2e8>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	f002 faec 	bl	8003288 <sniprintf>
				  transmitc(buf);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd8f 	bl	80007d8 <transmitc>
  }
 8000cba:	e07d      	b.n	8000db8 <handle_command.2+0x298>
	  } else if (state == ST_EDIT_WAIT_BRIGHT) {
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d17a      	bne.n	8000db8 <handle_command.2+0x298>
		  if (cmd >= '1' && cmd <= '9') {
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b30      	cmp	r3, #48	; 0x30
 8000cc6:	d918      	bls.n	8000cfa <handle_command.2+0x1da>
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b39      	cmp	r3, #57	; 0x39
 8000ccc:	d815      	bhi.n	8000cfa <handle_command.2+0x1da>
			  edit_mode_brightness = (cmd - '0') * 10;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	3b30      	subs	r3, #48	; 0x30
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	8123      	strh	r3, [r4, #8]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000ce0:	8923      	ldrh	r3, [r4, #8]
 8000ce2:	f107 000c 	add.w	r0, r7, #12
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <handle_command.2+0x2ec>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	f002 facd 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fd70 	bl	80007d8 <transmitc>
		  if (cmd >= '1' && cmd <= '9') {
 8000cf8:	e05e      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '0') {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b30      	cmp	r3, #48	; 0x30
 8000cfe:	d105      	bne.n	8000d0c <handle_command.2+0x1ec>
			  edit_mode_brightness = 100;
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	8123      	strh	r3, [r4, #8]
			  transmitc("Led brightness 100%. Enter to continue or choose another brightness [1-9,0,+|-]: ");
 8000d04:	4842      	ldr	r0, [pc, #264]	; (8000e10 <handle_command.2+0x2f0>)
 8000d06:	f7ff fd67 	bl	80007d8 <transmitc>
  }
 8000d0a:	e055      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '+') {
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b2b      	cmp	r3, #43	; 0x2b
 8000d10:	d115      	bne.n	8000d3e <handle_command.2+0x21e>
			  edit_mode_brightness += 10;
 8000d12:	8923      	ldrh	r3, [r4, #8]
 8000d14:	330a      	adds	r3, #10
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	8123      	strh	r3, [r4, #8]
			  if (edit_mode_brightness > 100) edit_mode_brightness = 100;
 8000d1a:	8923      	ldrh	r3, [r4, #8]
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d901      	bls.n	8000d24 <handle_command.2+0x204>
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	8123      	strh	r3, [r4, #8]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000d24:	8923      	ldrh	r3, [r4, #8]
 8000d26:	f107 000c 	add.w	r0, r7, #12
 8000d2a:	4a38      	ldr	r2, [pc, #224]	; (8000e0c <handle_command.2+0x2ec>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	f002 faab 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fd4e 	bl	80007d8 <transmitc>
  }
 8000d3c:	e03c      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '-') {
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b2d      	cmp	r3, #45	; 0x2d
 8000d42:	d115      	bne.n	8000d70 <handle_command.2+0x250>
			  edit_mode_brightness -= 10;
 8000d44:	8923      	ldrh	r3, [r4, #8]
 8000d46:	3b0a      	subs	r3, #10
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8123      	strh	r3, [r4, #8]
			  if (edit_mode_brightness < 10) edit_mode_brightness = 10;
 8000d4c:	8923      	ldrh	r3, [r4, #8]
 8000d4e:	2b09      	cmp	r3, #9
 8000d50:	d801      	bhi.n	8000d56 <handle_command.2+0x236>
 8000d52:	230a      	movs	r3, #10
 8000d54:	8123      	strh	r3, [r4, #8]
			  snprintf(buf, sizeof(buf), "Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000d56:	8923      	ldrh	r3, [r4, #8]
 8000d58:	f107 000c 	add.w	r0, r7, #12
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <handle_command.2+0x2ec>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	f002 fa92 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd35 	bl	80007d8 <transmitc>
  }
 8000d6e:	e023      	b.n	8000db8 <handle_command.2+0x298>
		  } else if (cmd == '\r') {
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b0d      	cmp	r3, #13
 8000d74:	d113      	bne.n	8000d9e <handle_command.2+0x27e>
			  state = ST_MAIN;
 8000d76:	2300      	movs	r3, #0
 8000d78:	81a3      	strh	r3, [r4, #12]
			  mode_leds[edit_mode] = edit_mode_led;
 8000d7a:	8962      	ldrh	r2, [r4, #10]
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	3310      	adds	r3, #16
 8000d80:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
			  mode_brightness[edit_mode] = edit_mode_brightness;
 8000d84:	8922      	ldrh	r2, [r4, #8]
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4423      	add	r3, r4
 8000d8e:	80da      	strh	r2, [r3, #6]
			  transmitc("Exit edit mode");
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <handle_command.2+0x2f4>)
 8000d92:	f7ff fd21 	bl	80007d8 <transmitc>
			  print_mode_message();
 8000d96:	46a4      	mov	ip, r4
 8000d98:	f7ff fe10 	bl	80009bc <print_mode_message.0>
  }
 8000d9c:	e00c      	b.n	8000db8 <handle_command.2+0x298>
			  snprintf(buf, sizeof(buf), "Unknown command. Led brightness %d%%. Enter to continue or choose another brightness [1-9,0,+|-]: ", edit_mode_brightness);
 8000d9e:	8923      	ldrh	r3, [r4, #8]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <handle_command.2+0x2f8>)
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	f002 fa6e 	bl	8003288 <sniprintf>
			  transmitc(buf);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd11 	bl	80007d8 <transmitc>
  }
 8000db6:	e7ff      	b.n	8000db8 <handle_command.2+0x298>
 8000db8:	bf00      	nop
 8000dba:	3794      	adds	r7, #148	; 0x94
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	08003ca4 	.word	0x08003ca4
 8000dc4:	08003cbc 	.word	0x08003cbc
 8000dc8:	08003cd0 	.word	0x08003cd0
 8000dcc:	08003d00 	.word	0x08003d00
 8000dd0:	08003d30 	.word	0x08003d30
 8000dd4:	08003d74 	.word	0x08003d74
 8000dd8:	08003da4 	.word	0x08003da4
 8000ddc:	08003dc4 	.word	0x08003dc4
 8000de0:	08003df4 	.word	0x08003df4
 8000de4:	08003e48 	.word	0x08003e48
 8000de8:	08003e90 	.word	0x08003e90
 8000dec:	08003ed8 	.word	0x08003ed8
 8000df0:	08003f1c 	.word	0x08003f1c
 8000df4:	08003f4c 	.word	0x08003f4c
 8000df8:	08003fa8 	.word	0x08003fa8
 8000dfc:	08003fd8 	.word	0x08003fd8
 8000e00:	08003fe0 	.word	0x08003fe0
 8000e04:	08003fe4 	.word	0x08003fe4
 8000e08:	08003fec 	.word	0x08003fec
 8000e0c:	08004040 	.word	0x08004040
 8000e10:	08004094 	.word	0x08004094
 8000e14:	080040e8 	.word	0x080040e8
 8000e18:	080040f8 	.word	0x080040f8

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	; 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2230      	movs	r2, #48	; 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fa24 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <SystemClock_Config+0xb8>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <SystemClock_Config+0xb8>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <SystemClock_Config+0xb8>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <SystemClock_Config+0xbc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <SystemClock_Config+0xbc>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <SystemClock_Config+0xbc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fdbd 	bl	8001a10 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e9c:	f000 f8b8 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 f820 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ec6:	f000 f8a3 	bl	8001010 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	; 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_USART6_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f14:	f001 f9d4 	bl	80022c0 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f877 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	40011400 	.word	0x40011400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <MX_GPIO_Init+0xd8>)
 8000fbe:	f000 fd0d 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_GPIO_Init+0xdc>)
 8000fd8:	f000 fb54 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_GPIO_Init+0xd8>)
 8000ff6:	f000 fb45 	bl	8001684 <HAL_GPIO_Init>

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40020800 	.word	0x40020800

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	e7fe      	b.n	8001018 <Error_Handler+0x8>
	...

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <HAL_MspInit+0x4c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_UART_MspInit+0x94>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d133      	bne.n	80010f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_UART_MspInit+0x98>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_UART_MspInit+0x98>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_UART_MspInit+0x98>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0x98>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_UART_MspInit+0x98>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_UART_MspInit+0x98>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c6:	23c0      	movs	r3, #192	; 0xc0
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010d6:	2308      	movs	r3, #8
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_UART_MspInit+0x9c>)
 80010e2:	f000 facf 	bl	8001684 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2047      	movs	r0, #71	; 0x47
 80010ec:	f000 fa01 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010f0:	2047      	movs	r0, #71	; 0x47
 80010f2:	f000 fa1a 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40011400 	.word	0x40011400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f8d0 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <USART6_IRQHandler+0x10>)
 8001166:	f001 f96d 	bl	8002444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000008c 	.word	0x2000008c

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f002 f83e 	bl	8003224 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20030000 	.word	0x20030000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	200010e4 	.word	0x200010e4
 80011dc:	20001100 	.word	0x20001100

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120a:	490e      	ldr	r1, [pc, #56]	; (8001244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001220:	4c0b      	ldr	r4, [pc, #44]	; (8001250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122e:	f7ff ffd7 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f001 fffd 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff fb4b 	bl	80008d0 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001248:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 800124c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001250:	200010fc 	.word	0x200010fc

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f92b 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fec6 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f943 	bl	8001546 <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f000 f90b 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	200010e8 	.word	0x200010e8

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200010e8 	.word	0x200010e8

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff feda 	bl	8001324 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e052      	b.n	8001636 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0216 	bic.w	r2, r2, #22
 800159e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <HAL_DMA_Abort+0x62>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e0:	e013      	b.n	800160a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015e2:	f7ff fe9f 	bl	8001324 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d90c      	bls.n	800160a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e015      	b.n	8001636 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e4      	bne.n	80015e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	223f      	movs	r2, #63	; 0x3f
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d004      	beq.n	800165c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e00c      	b.n	8001676 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2205      	movs	r2, #5
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	e177      	b.n	8001990 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f040 8166 	bne.w	800198a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d005      	beq.n	80016d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d130      	bne.n	8001738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 0201 	and.w	r2, r3, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b03      	cmp	r3, #3
 8001742:	d017      	beq.n	8001774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	69b9      	ldr	r1, [r7, #24]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80c0 	beq.w	800198a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_GPIO_Init+0x324>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001826:	4a61      	ldr	r2, [pc, #388]	; (80019ac <HAL_GPIO_Init+0x328>)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_GPIO_Init+0x32c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d037      	beq.n	80018c2 <HAL_GPIO_Init+0x23e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a57      	ldr	r2, [pc, #348]	; (80019b4 <HAL_GPIO_Init+0x330>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_GPIO_Init+0x23a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x334>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02b      	beq.n	80018ba <HAL_GPIO_Init+0x236>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_GPIO_Init+0x338>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x232>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <HAL_GPIO_Init+0x33c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x22e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <HAL_GPIO_Init+0x340>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x22a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_GPIO_Init+0x344>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x226>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a51      	ldr	r2, [pc, #324]	; (80019cc <HAL_GPIO_Init+0x348>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x222>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <HAL_GPIO_Init+0x34c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x21e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x350>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x21a>
 800189a:	2309      	movs	r3, #9
 800189c:	e012      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 800189e:	230a      	movs	r3, #10
 80018a0:	e010      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018a2:	2308      	movs	r3, #8
 80018a4:	e00e      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x240>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x328>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_GPIO_Init+0x354>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_GPIO_Init+0x354>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_GPIO_Init+0x354>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <HAL_GPIO_Init+0x354>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_GPIO_Init+0x354>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_GPIO_Init+0x354>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_GPIO_Init+0x354>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_GPIO_Init+0x354>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae84 	bls.w	80016a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40021c00 	.word	0x40021c00
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40022400 	.word	0x40022400
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e267      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d075      	beq.n	8001b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d00c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d157      	bne.n	8001b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e242      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x74>
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x98>
 8001a8e:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6f      	ldr	r2, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b6d      	ldr	r3, [pc, #436]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6c      	ldr	r2, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc2c 	bl	8001324 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc28 	bl	8001324 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e207      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xc0>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc18 	bl	8001324 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fc14 	bl	8001324 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1f3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0xe8>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d11c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1c7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4937      	ldr	r1, [pc, #220]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fbcd 	bl	8001324 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fbc9 	bl	8001324 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1a8      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4925      	ldr	r1, [pc, #148]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fbac 	bl	8001324 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fba8 	bl	8001324 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e187      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d036      	beq.n	8001c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fb8c 	bl	8001324 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fb88 	bl	8001324 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e167      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x200>
 8001c2e:	e01b      	b.n	8001c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb75 	bl	8001324 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	e00e      	b.n	8001c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fb71 	bl	8001324 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d907      	bls.n	8001c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e150      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	42470000 	.word	0x42470000
 8001c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ea      	bne.n	8001c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8097 	beq.w	8001da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b74      	ldr	r3, [pc, #464]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a73      	ldr	r2, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fb31 	bl	8001324 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff fb2d 	bl	8001324 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e10c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2ea>
 8001cec:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x30c>
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5e      	ldr	r2, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a5b      	ldr	r2, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d015      	beq.n	8001d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff faf2 	bl	8001324 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f7ff faee 	bl	8001324 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e0cb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ee      	beq.n	8001d44 <HAL_RCC_OscConfig+0x334>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fadc 	bl	8001324 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fad8 	bl	8001324 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0b5      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ee      	bne.n	8001d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a1 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d05c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d141      	bne.n	8001e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff faac 	bl	8001324 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff faa8 	bl	8001324 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e087      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	3b01      	subs	r3, #1
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fa81 	bl	8001324 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fa7d 	bl	8001324 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e05c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x416>
 8001e44:	e054      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fa6a 	bl	8001324 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff fa66 	bl	8001324 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e045      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x444>
 8001e72:	e03d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e038      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x4ec>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d028      	beq.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d121      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11a      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0cc      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d90c      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d044      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e067      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4934      	ldr	r1, [pc, #208]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f998 	bl	8001324 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff f994 	bl	8001324 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20c      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f8f8 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	0800415c 	.word	0x0800415c
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b090      	sub	sp, #64	; 0x40
 80020d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d00d      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	f200 80a1 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x16c>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fe:	e09b      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_GetSysClockFreq+0x184>)
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002104:	e09b      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210a:	e098      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d028      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	2200      	movs	r2, #0
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	627a      	str	r2, [r7, #36]	; 0x24
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002134:	2100      	movs	r1, #0
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002138:	fb03 f201 	mul.w	r2, r3, r1
 800213c:	2300      	movs	r3, #0
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	4413      	add	r3, r2
 8002144:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002146:	fba0 1202 	umull	r1, r2, r0, r2
 800214a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800214c:	460a      	mov	r2, r1
 800214e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002152:	4413      	add	r3, r2
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	2200      	movs	r2, #0
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	61fa      	str	r2, [r7, #28]
 800215e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002166:	f7fe f89b 	bl	80002a0 <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4613      	mov	r3, r2
 8002170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002172:	e053      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	2200      	movs	r2, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	617a      	str	r2, [r7, #20]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002186:	f04f 0b00 	mov.w	fp, #0
 800218a:	4652      	mov	r2, sl
 800218c:	465b      	mov	r3, fp
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	ebb2 080a 	subs.w	r8, r2, sl
 80021a6:	eb63 090b 	sbc.w	r9, r3, fp
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021be:	ebb2 0408 	subs.w	r4, r2, r8
 80021c2:	eb63 0509 	sbc.w	r5, r3, r9
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	00eb      	lsls	r3, r5, #3
 80021d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d4:	00e2      	lsls	r2, r4, #3
 80021d6:	4614      	mov	r4, r2
 80021d8:	461d      	mov	r5, r3
 80021da:	eb14 030a 	adds.w	r3, r4, sl
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	eb45 030b 	adc.w	r3, r5, fp
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021f2:	4629      	mov	r1, r5
 80021f4:	028b      	lsls	r3, r1, #10
 80021f6:	4621      	mov	r1, r4
 80021f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021fc:	4621      	mov	r1, r4
 80021fe:	028a      	lsls	r2, r1, #10
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	2200      	movs	r2, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002210:	f7fe f846 	bl	80002a0 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800222c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetSysClockFreq+0x184>)
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002240:	4618      	mov	r0, r3
 8002242:	3740      	adds	r7, #64	; 0x40
 8002244:	46bd      	mov	sp, r7
 8002246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	00f42400 	.word	0x00f42400
 8002254:	017d7840 	.word	0x017d7840

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	0800416c 	.word	0x0800416c

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffdc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0b5b      	lsrs	r3, r3, #13
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	0800416c 	.word	0x0800416c

080022c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03f      	b.n	8002352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fec0 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fd19 	bl	8002d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	4613      	mov	r3, r2
 8002366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	d130      	bne.n	80023d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_UART_Transmit_IT+0x26>
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e029      	b.n	80023d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_UART_Transmit_IT+0x38>
 800238e:	2302      	movs	r3, #2
 8002390:	e022      	b.n	80023d8 <HAL_UART_Transmit_IT+0x7e>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2221      	movs	r2, #33	; 0x21
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d11d      	bne.n	800243a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_UART_Receive_IT+0x26>
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e016      	b.n	800243c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_UART_Receive_IT+0x38>
 8002418:	2302      	movs	r3, #2
 800241a:	e00f      	b.n	800243c <HAL_UART_Receive_IT+0x58>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	461a      	mov	r2, r3
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 faab 	bl	800298c <UART_Start_Receive_IT>
 8002436:	4603      	mov	r3, r0
 8002438:	e000      	b.n	800243c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0ba      	sub	sp, #232	; 0xe8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_UART_IRQHandler+0x66>
 8002496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fb8f 	bl	8002bc6 <UART_Receive_IT>
      return;
 80024a8:	e256      	b.n	8002958 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80de 	beq.w	8002670 <HAL_UART_IRQHandler+0x22c>
 80024b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80d1 	beq.w	8002670 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_UART_IRQHandler+0xae>
 80024da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_UART_IRQHandler+0xd2>
 80024fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0202 	orr.w	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_UART_IRQHandler+0xf6>
 8002522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f043 0204 	orr.w	r2, r3, #4
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d011      	beq.n	800256a <HAL_UART_IRQHandler+0x126>
 8002546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0208 	orr.w	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 81ed 	beq.w	800294e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_UART_IRQHandler+0x14e>
 8002580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb1a 	bl	8002bc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <HAL_UART_IRQHandler+0x17a>
 80025b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d04f      	beq.n	800265e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa22 	bl	8002a08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d141      	bne.n	8002656 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3314      	adds	r3, #20
 80025d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e0:	e853 3f00 	ldrex	r3, [r3]
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800260a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800260e:	e841 2300 	strex	r3, r2, [r1]
 8002612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1d9      	bne.n	80025d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	d013      	beq.n	800264e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4a7d      	ldr	r2, [pc, #500]	; (8002820 <HAL_UART_IRQHandler+0x3dc>)
 800262c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f803 	bl	800163e <HAL_DMA_Abort_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002648:	4610      	mov	r0, r2
 800264a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	e00e      	b.n	800266c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f986 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	e00a      	b.n	800266c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f982 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	e006      	b.n	800266c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f97e 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800266a:	e170      	b.n	800294e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	bf00      	nop
    return;
 800266e:	e16e      	b.n	800294e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 814a 	bne.w	800290e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8143 	beq.w	800290e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 813c 	beq.w	800290e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b40      	cmp	r3, #64	; 0x40
 80026b8:	f040 80b4 	bne.w	8002824 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8140 	beq.w	8002952 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026da:	429a      	cmp	r2, r3
 80026dc:	f080 8139 	bcs.w	8002952 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	f000 8088 	beq.w	8002806 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800270c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800272e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1d9      	bne.n	80026f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3314      	adds	r3, #20
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800276a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800276e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002772:	e841 2300 	strex	r3, r2, [r1]
 8002776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e1      	bne.n	8002742 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3314      	adds	r3, #20
 800279e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e3      	bne.n	800277e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	f023 0310 	bic.w	r3, r3, #16
 80027da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e3      	bne.n	80027c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe feac 	bl	800155e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280e:	b29b      	uxth	r3, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8ac 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800281c:	e099      	b.n	8002952 <HAL_UART_IRQHandler+0x50e>
 800281e:	bf00      	nop
 8002820:	08002acf 	.word	0x08002acf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808b 	beq.w	8002956 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8086 	beq.w	8002956 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800286e:	647a      	str	r2, [r7, #68]	; 0x44
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800287c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e3      	bne.n	800284a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	623b      	str	r3, [r7, #32]
   return(result);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028a6:	633a      	str	r2, [r7, #48]	; 0x30
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e3      	bne.n	8002882 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028ec:	61fa      	str	r2, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	69b9      	ldr	r1, [r7, #24]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	617b      	str	r3, [r7, #20]
   return(result);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e3      	bne.n	80028c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f834 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800290c:	e023      	b.n	8002956 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_UART_IRQHandler+0x4ea>
 800291a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8e5 	bl	8002af6 <UART_Transmit_IT>
    return;
 800292c:	e014      	b.n	8002958 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00e      	beq.n	8002958 <HAL_UART_IRQHandler+0x514>
 800293a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f925 	bl	8002b96 <UART_EndTransmit_IT>
    return;
 800294c:	e004      	b.n	8002958 <HAL_UART_IRQHandler+0x514>
    return;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <HAL_UART_IRQHandler+0x514>
      return;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_UART_IRQHandler+0x514>
      return;
 8002956:	bf00      	nop
  }
}
 8002958:	37e8      	adds	r7, #232	; 0xe8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop

08002960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2222      	movs	r2, #34	; 0x22
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b095      	sub	sp, #84	; 0x54
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a30:	643a      	str	r2, [r7, #64]	; 0x40
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3314      	adds	r3, #20
 8002a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d119      	bne.n	8002ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa0:	61ba      	str	r2, [r7, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6979      	ldr	r1, [r7, #20]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	613b      	str	r3, [r7, #16]
   return(result);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e5      	bne.n	8002a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ac2:	bf00      	nop
 8002ac4:	3754      	adds	r7, #84	; 0x54
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff39 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b21      	cmp	r3, #33	; 0x21
 8002b08:	d13e      	bne.n	8002b88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d114      	bne.n	8002b3e <UART_Transmit_IT+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]
 8002b3c:	e008      	b.n	8002b50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6211      	str	r1, [r2, #32]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10f      	bne.n	8002b84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fe42 	bl	8000840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08c      	sub	sp, #48	; 0x30
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b22      	cmp	r3, #34	; 0x22
 8002bd8:	f040 80ab 	bne.w	8002d32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	d117      	bne.n	8002c16 <UART_Receive_IT+0x50>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e026      	b.n	8002c64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c28:	d007      	beq.n	8002c3a <UART_Receive_IT+0x74>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <UART_Receive_IT+0x82>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e008      	b.n	8002c5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d15a      	bne.n	8002d2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0220 	bic.w	r2, r2, #32
 8002c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d135      	bne.n	8002d24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f023 0310 	bic.w	r3, r3, #16
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cde:	623a      	str	r2, [r7, #32]
 8002ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e5      	bne.n	8002cbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d10a      	bne.n	8002d16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fe29 	bl	8002974 <HAL_UARTEx_RxEventCallback>
 8002d22:	e002      	b.n	8002d2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd fd75 	bl	8000814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e002      	b.n	8002d34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3730      	adds	r7, #48	; 0x30
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b0c0      	sub	sp, #256	; 0x100
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	ea40 0301 	orr.w	r3, r0, r1
 8002d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d94:	f021 010c 	bic.w	r1, r1, #12
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002da2:	430b      	orrs	r3, r1
 8002da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db6:	6999      	ldr	r1, [r3, #24]
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	ea40 0301 	orr.w	r3, r0, r1
 8002dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b8f      	ldr	r3, [pc, #572]	; (8003008 <UART_SetConfig+0x2cc>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d005      	beq.n	8002ddc <UART_SetConfig+0xa0>
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <UART_SetConfig+0x2d0>)
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d104      	bne.n	8002de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ddc:	f7ff fa5c 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8002de0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002de4:	e003      	b.n	8002dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de6:	f7ff fa43 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002dea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df8:	f040 810c 	bne.w	8003014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e0e:	4622      	mov	r2, r4
 8002e10:	462b      	mov	r3, r5
 8002e12:	1891      	adds	r1, r2, r2
 8002e14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e16:	415b      	adcs	r3, r3
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e1e:	4621      	mov	r1, r4
 8002e20:	eb12 0801 	adds.w	r8, r2, r1
 8002e24:	4629      	mov	r1, r5
 8002e26:	eb43 0901 	adc.w	r9, r3, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3e:	4690      	mov	r8, r2
 8002e40:	4699      	mov	r9, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	eb18 0303 	adds.w	r3, r8, r3
 8002e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	eb49 0303 	adc.w	r3, r9, r3
 8002e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	18db      	adds	r3, r3, r3
 8002e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e70:	4613      	mov	r3, r2
 8002e72:	eb42 0303 	adc.w	r3, r2, r3
 8002e76:	657b      	str	r3, [r7, #84]	; 0x54
 8002e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e80:	f7fd fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4b61      	ldr	r3, [pc, #388]	; (8003010 <UART_SetConfig+0x2d4>)
 8002e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	011c      	lsls	r4, r3, #4
 8002e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	1891      	adds	r1, r2, r2
 8002eaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eac:	415b      	adcs	r3, r3
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eba:	4649      	mov	r1, r9
 8002ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed4:	4692      	mov	sl, r2
 8002ed6:	469b      	mov	fp, r3
 8002ed8:	4643      	mov	r3, r8
 8002eda:	eb1a 0303 	adds.w	r3, sl, r3
 8002ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f00:	460b      	mov	r3, r1
 8002f02:	18db      	adds	r3, r3, r3
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
 8002f06:	4613      	mov	r3, r2
 8002f08:	eb42 0303 	adc.w	r3, r2, r3
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f16:	f7fd f9c3 	bl	80002a0 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <UART_SetConfig+0x2d4>)
 8002f22:	fba3 2301 	umull	r2, r3, r3, r1
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2264      	movs	r2, #100	; 0x64
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	1acb      	subs	r3, r1, r3
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <UART_SetConfig+0x2d4>)
 8002f38:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f44:	441c      	add	r4, r3
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	1891      	adds	r1, r2, r2
 8002f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f60:	415b      	adcs	r3, r3
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f68:	4641      	mov	r1, r8
 8002f6a:	1851      	adds	r1, r2, r1
 8002f6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f6e:	4649      	mov	r1, r9
 8002f70:	414b      	adcs	r3, r1
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f80:	4659      	mov	r1, fp
 8002f82:	00cb      	lsls	r3, r1, #3
 8002f84:	4651      	mov	r1, sl
 8002f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	00ca      	lsls	r2, r1, #3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	4642      	mov	r2, r8
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	eb42 0303 	adc.w	r3, r2, r3
 8002fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	18db      	adds	r3, r3, r3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fd2:	f7fd f965 	bl	80002a0 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <UART_SetConfig+0x2d4>)
 8002fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <UART_SetConfig+0x2d4>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	f003 0207 	and.w	r2, r3, #7
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4422      	add	r2, r4
 8003002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003004:	e105      	b.n	8003212 <UART_SetConfig+0x4d6>
 8003006:	bf00      	nop
 8003008:	40011000 	.word	0x40011000
 800300c:	40011400 	.word	0x40011400
 8003010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003018:	2200      	movs	r2, #0
 800301a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800301e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003026:	4642      	mov	r2, r8
 8003028:	464b      	mov	r3, r9
 800302a:	1891      	adds	r1, r2, r2
 800302c:	6239      	str	r1, [r7, #32]
 800302e:	415b      	adcs	r3, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003036:	4641      	mov	r1, r8
 8003038:	1854      	adds	r4, r2, r1
 800303a:	4649      	mov	r1, r9
 800303c:	eb43 0501 	adc.w	r5, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800305c:	464b      	mov	r3, r9
 800305e:	eb45 0303 	adc.w	r3, r5, r3
 8003062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003082:	4629      	mov	r1, r5
 8003084:	008b      	lsls	r3, r1, #2
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308c:	4621      	mov	r1, r4
 800308e:	008a      	lsls	r2, r1, #2
 8003090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003094:	f7fd f904 	bl	80002a0 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4b60      	ldr	r3, [pc, #384]	; (8003220 <UART_SetConfig+0x4e4>)
 800309e:	fba3 2302 	umull	r2, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	011c      	lsls	r4, r3, #4
 80030a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	1891      	adds	r1, r2, r2
 80030be:	61b9      	str	r1, [r7, #24]
 80030c0:	415b      	adcs	r3, r3
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c8:	4641      	mov	r1, r8
 80030ca:	1851      	adds	r1, r2, r1
 80030cc:	6139      	str	r1, [r7, #16]
 80030ce:	4649      	mov	r1, r9
 80030d0:	414b      	adcs	r3, r1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e0:	4659      	mov	r1, fp
 80030e2:	00cb      	lsls	r3, r1, #3
 80030e4:	4651      	mov	r1, sl
 80030e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ea:	4651      	mov	r1, sl
 80030ec:	00ca      	lsls	r2, r1, #3
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	4642      	mov	r2, r8
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030fc:	464b      	mov	r3, r9
 80030fe:	460a      	mov	r2, r1
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	67bb      	str	r3, [r7, #120]	; 0x78
 8003112:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003120:	4649      	mov	r1, r9
 8003122:	008b      	lsls	r3, r1, #2
 8003124:	4641      	mov	r1, r8
 8003126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312a:	4641      	mov	r1, r8
 800312c:	008a      	lsls	r2, r1, #2
 800312e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003132:	f7fd f8b5 	bl	80002a0 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <UART_SetConfig+0x4e4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	; 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	; 0x32
 800314e:	4a34      	ldr	r2, [pc, #208]	; (8003220 <UART_SetConfig+0x4e4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315a:	441c      	add	r4, r3
 800315c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003160:	2200      	movs	r2, #0
 8003162:	673b      	str	r3, [r7, #112]	; 0x70
 8003164:	677a      	str	r2, [r7, #116]	; 0x74
 8003166:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800316a:	4642      	mov	r2, r8
 800316c:	464b      	mov	r3, r9
 800316e:	1891      	adds	r1, r2, r2
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	415b      	adcs	r3, r3
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317a:	4641      	mov	r1, r8
 800317c:	1851      	adds	r1, r2, r1
 800317e:	6039      	str	r1, [r7, #0]
 8003180:	4649      	mov	r1, r9
 8003182:	414b      	adcs	r3, r1
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003192:	4659      	mov	r1, fp
 8003194:	00cb      	lsls	r3, r1, #3
 8003196:	4651      	mov	r1, sl
 8003198:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319c:	4651      	mov	r1, sl
 800319e:	00ca      	lsls	r2, r1, #3
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	4603      	mov	r3, r0
 80031a6:	4642      	mov	r2, r8
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ac:	464b      	mov	r3, r9
 80031ae:	460a      	mov	r2, r1
 80031b0:	eb42 0303 	adc.w	r3, r2, r3
 80031b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	663b      	str	r3, [r7, #96]	; 0x60
 80031c0:	667a      	str	r2, [r7, #100]	; 0x64
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031ce:	4649      	mov	r1, r9
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	4641      	mov	r1, r8
 80031d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d8:	4641      	mov	r1, r8
 80031da:	008a      	lsls	r2, r1, #2
 80031dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031e0:	f7fd f85e 	bl	80002a0 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <UART_SetConfig+0x4e4>)
 80031ea:	fba3 1302 	umull	r1, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2164      	movs	r1, #100	; 0x64
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	3332      	adds	r3, #50	; 0x32
 80031fc:	4a08      	ldr	r2, [pc, #32]	; (8003220 <UART_SetConfig+0x4e4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	f003 020f 	and.w	r2, r3, #15
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4422      	add	r2, r4
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	51eb851f 	.word	0x51eb851f

08003224 <__errno>:
 8003224:	4b01      	ldr	r3, [pc, #4]	; (800322c <__errno+0x8>)
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	2000000c 	.word	0x2000000c

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4d0d      	ldr	r5, [pc, #52]	; (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2600      	movs	r6, #0
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4d0b      	ldr	r5, [pc, #44]	; (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	; (8003274 <__libc_init_array+0x44>)
 8003244:	f000 fca2 	bl	8003b8c <_init>
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2600      	movs	r6, #0
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	080041b0 	.word	0x080041b0
 800326c:	080041b0 	.word	0x080041b0
 8003270:	080041b0 	.word	0x080041b0
 8003274:	080041b4 	.word	0x080041b4

08003278 <memset>:
 8003278:	4402      	add	r2, r0
 800327a:	4603      	mov	r3, r0
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	f803 1b01 	strb.w	r1, [r3], #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <sniprintf>:
 8003288:	b40c      	push	{r2, r3}
 800328a:	b530      	push	{r4, r5, lr}
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <sniprintf+0x64>)
 800328e:	1e0c      	subs	r4, r1, #0
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	b09d      	sub	sp, #116	; 0x74
 8003294:	da08      	bge.n	80032a8 <sniprintf+0x20>
 8003296:	238b      	movs	r3, #139	; 0x8b
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800329e:	b01d      	add	sp, #116	; 0x74
 80032a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032a4:	b002      	add	sp, #8
 80032a6:	4770      	bx	lr
 80032a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80032ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032b0:	bf14      	ite	ne
 80032b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80032b6:	4623      	moveq	r3, r4
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c0:	9002      	str	r0, [sp, #8]
 80032c2:	9006      	str	r0, [sp, #24]
 80032c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032ca:	ab21      	add	r3, sp, #132	; 0x84
 80032cc:	a902      	add	r1, sp, #8
 80032ce:	4628      	mov	r0, r5
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	f000 f869 	bl	80033a8 <_svfiprintf_r>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	bfbc      	itt	lt
 80032da:	238b      	movlt	r3, #139	; 0x8b
 80032dc:	602b      	strlt	r3, [r5, #0]
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d0dd      	beq.n	800329e <sniprintf+0x16>
 80032e2:	9b02      	ldr	r3, [sp, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e7d9      	b.n	800329e <sniprintf+0x16>
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <__ssputs_r>:
 80032f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f4:	688e      	ldr	r6, [r1, #8]
 80032f6:	429e      	cmp	r6, r3
 80032f8:	4682      	mov	sl, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4690      	mov	r8, r2
 80032fe:	461f      	mov	r7, r3
 8003300:	d838      	bhi.n	8003374 <__ssputs_r+0x84>
 8003302:	898a      	ldrh	r2, [r1, #12]
 8003304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003308:	d032      	beq.n	8003370 <__ssputs_r+0x80>
 800330a:	6825      	ldr	r5, [r4, #0]
 800330c:	6909      	ldr	r1, [r1, #16]
 800330e:	eba5 0901 	sub.w	r9, r5, r1
 8003312:	6965      	ldr	r5, [r4, #20]
 8003314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800331c:	3301      	adds	r3, #1
 800331e:	444b      	add	r3, r9
 8003320:	106d      	asrs	r5, r5, #1
 8003322:	429d      	cmp	r5, r3
 8003324:	bf38      	it	cc
 8003326:	461d      	movcc	r5, r3
 8003328:	0553      	lsls	r3, r2, #21
 800332a:	d531      	bpl.n	8003390 <__ssputs_r+0xa0>
 800332c:	4629      	mov	r1, r5
 800332e:	f000 fb63 	bl	80039f8 <_malloc_r>
 8003332:	4606      	mov	r6, r0
 8003334:	b950      	cbnz	r0, 800334c <__ssputs_r+0x5c>
 8003336:	230c      	movs	r3, #12
 8003338:	f8ca 3000 	str.w	r3, [sl]
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003342:	81a3      	strh	r3, [r4, #12]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	6921      	ldr	r1, [r4, #16]
 800334e:	464a      	mov	r2, r9
 8003350:	f000 fabe 	bl	80038d0 <memcpy>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	81a3      	strh	r3, [r4, #12]
 8003360:	6126      	str	r6, [r4, #16]
 8003362:	6165      	str	r5, [r4, #20]
 8003364:	444e      	add	r6, r9
 8003366:	eba5 0509 	sub.w	r5, r5, r9
 800336a:	6026      	str	r6, [r4, #0]
 800336c:	60a5      	str	r5, [r4, #8]
 800336e:	463e      	mov	r6, r7
 8003370:	42be      	cmp	r6, r7
 8003372:	d900      	bls.n	8003376 <__ssputs_r+0x86>
 8003374:	463e      	mov	r6, r7
 8003376:	6820      	ldr	r0, [r4, #0]
 8003378:	4632      	mov	r2, r6
 800337a:	4641      	mov	r1, r8
 800337c:	f000 fab6 	bl	80038ec <memmove>
 8003380:	68a3      	ldr	r3, [r4, #8]
 8003382:	1b9b      	subs	r3, r3, r6
 8003384:	60a3      	str	r3, [r4, #8]
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	4433      	add	r3, r6
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	2000      	movs	r0, #0
 800338e:	e7db      	b.n	8003348 <__ssputs_r+0x58>
 8003390:	462a      	mov	r2, r5
 8003392:	f000 fba5 	bl	8003ae0 <_realloc_r>
 8003396:	4606      	mov	r6, r0
 8003398:	2800      	cmp	r0, #0
 800339a:	d1e1      	bne.n	8003360 <__ssputs_r+0x70>
 800339c:	6921      	ldr	r1, [r4, #16]
 800339e:	4650      	mov	r0, sl
 80033a0:	f000 fabe 	bl	8003920 <_free_r>
 80033a4:	e7c7      	b.n	8003336 <__ssputs_r+0x46>
	...

080033a8 <_svfiprintf_r>:
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	4698      	mov	r8, r3
 80033ae:	898b      	ldrh	r3, [r1, #12]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	b09d      	sub	sp, #116	; 0x74
 80033b4:	4607      	mov	r7, r0
 80033b6:	460d      	mov	r5, r1
 80033b8:	4614      	mov	r4, r2
 80033ba:	d50e      	bpl.n	80033da <_svfiprintf_r+0x32>
 80033bc:	690b      	ldr	r3, [r1, #16]
 80033be:	b963      	cbnz	r3, 80033da <_svfiprintf_r+0x32>
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	f000 fb19 	bl	80039f8 <_malloc_r>
 80033c6:	6028      	str	r0, [r5, #0]
 80033c8:	6128      	str	r0, [r5, #16]
 80033ca:	b920      	cbnz	r0, 80033d6 <_svfiprintf_r+0x2e>
 80033cc:	230c      	movs	r3, #12
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033d4:	e0d1      	b.n	800357a <_svfiprintf_r+0x1d2>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	616b      	str	r3, [r5, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	9309      	str	r3, [sp, #36]	; 0x24
 80033de:	2320      	movs	r3, #32
 80033e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80033e8:	2330      	movs	r3, #48	; 0x30
 80033ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003594 <_svfiprintf_r+0x1ec>
 80033ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033f2:	f04f 0901 	mov.w	r9, #1
 80033f6:	4623      	mov	r3, r4
 80033f8:	469a      	mov	sl, r3
 80033fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033fe:	b10a      	cbz	r2, 8003404 <_svfiprintf_r+0x5c>
 8003400:	2a25      	cmp	r2, #37	; 0x25
 8003402:	d1f9      	bne.n	80033f8 <_svfiprintf_r+0x50>
 8003404:	ebba 0b04 	subs.w	fp, sl, r4
 8003408:	d00b      	beq.n	8003422 <_svfiprintf_r+0x7a>
 800340a:	465b      	mov	r3, fp
 800340c:	4622      	mov	r2, r4
 800340e:	4629      	mov	r1, r5
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ff6d 	bl	80032f0 <__ssputs_r>
 8003416:	3001      	adds	r0, #1
 8003418:	f000 80aa 	beq.w	8003570 <_svfiprintf_r+0x1c8>
 800341c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800341e:	445a      	add	r2, fp
 8003420:	9209      	str	r2, [sp, #36]	; 0x24
 8003422:	f89a 3000 	ldrb.w	r3, [sl]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a2 	beq.w	8003570 <_svfiprintf_r+0x1c8>
 800342c:	2300      	movs	r3, #0
 800342e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003436:	f10a 0a01 	add.w	sl, sl, #1
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	9307      	str	r3, [sp, #28]
 800343e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003442:	931a      	str	r3, [sp, #104]	; 0x68
 8003444:	4654      	mov	r4, sl
 8003446:	2205      	movs	r2, #5
 8003448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344c:	4851      	ldr	r0, [pc, #324]	; (8003594 <_svfiprintf_r+0x1ec>)
 800344e:	f7fc fed7 	bl	8000200 <memchr>
 8003452:	9a04      	ldr	r2, [sp, #16]
 8003454:	b9d8      	cbnz	r0, 800348e <_svfiprintf_r+0xe6>
 8003456:	06d0      	lsls	r0, r2, #27
 8003458:	bf44      	itt	mi
 800345a:	2320      	movmi	r3, #32
 800345c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003460:	0711      	lsls	r1, r2, #28
 8003462:	bf44      	itt	mi
 8003464:	232b      	movmi	r3, #43	; 0x2b
 8003466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800346a:	f89a 3000 	ldrb.w	r3, [sl]
 800346e:	2b2a      	cmp	r3, #42	; 0x2a
 8003470:	d015      	beq.n	800349e <_svfiprintf_r+0xf6>
 8003472:	9a07      	ldr	r2, [sp, #28]
 8003474:	4654      	mov	r4, sl
 8003476:	2000      	movs	r0, #0
 8003478:	f04f 0c0a 	mov.w	ip, #10
 800347c:	4621      	mov	r1, r4
 800347e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003482:	3b30      	subs	r3, #48	; 0x30
 8003484:	2b09      	cmp	r3, #9
 8003486:	d94e      	bls.n	8003526 <_svfiprintf_r+0x17e>
 8003488:	b1b0      	cbz	r0, 80034b8 <_svfiprintf_r+0x110>
 800348a:	9207      	str	r2, [sp, #28]
 800348c:	e014      	b.n	80034b8 <_svfiprintf_r+0x110>
 800348e:	eba0 0308 	sub.w	r3, r0, r8
 8003492:	fa09 f303 	lsl.w	r3, r9, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	46a2      	mov	sl, r4
 800349c:	e7d2      	b.n	8003444 <_svfiprintf_r+0x9c>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	1d19      	adds	r1, r3, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	9103      	str	r1, [sp, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfbb      	ittet	lt
 80034aa:	425b      	neglt	r3, r3
 80034ac:	f042 0202 	orrlt.w	r2, r2, #2
 80034b0:	9307      	strge	r3, [sp, #28]
 80034b2:	9307      	strlt	r3, [sp, #28]
 80034b4:	bfb8      	it	lt
 80034b6:	9204      	strlt	r2, [sp, #16]
 80034b8:	7823      	ldrb	r3, [r4, #0]
 80034ba:	2b2e      	cmp	r3, #46	; 0x2e
 80034bc:	d10c      	bne.n	80034d8 <_svfiprintf_r+0x130>
 80034be:	7863      	ldrb	r3, [r4, #1]
 80034c0:	2b2a      	cmp	r3, #42	; 0x2a
 80034c2:	d135      	bne.n	8003530 <_svfiprintf_r+0x188>
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	1d1a      	adds	r2, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	9203      	str	r2, [sp, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bfb8      	it	lt
 80034d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80034d4:	3402      	adds	r4, #2
 80034d6:	9305      	str	r3, [sp, #20]
 80034d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035a4 <_svfiprintf_r+0x1fc>
 80034dc:	7821      	ldrb	r1, [r4, #0]
 80034de:	2203      	movs	r2, #3
 80034e0:	4650      	mov	r0, sl
 80034e2:	f7fc fe8d 	bl	8000200 <memchr>
 80034e6:	b140      	cbz	r0, 80034fa <_svfiprintf_r+0x152>
 80034e8:	2340      	movs	r3, #64	; 0x40
 80034ea:	eba0 000a 	sub.w	r0, r0, sl
 80034ee:	fa03 f000 	lsl.w	r0, r3, r0
 80034f2:	9b04      	ldr	r3, [sp, #16]
 80034f4:	4303      	orrs	r3, r0
 80034f6:	3401      	adds	r4, #1
 80034f8:	9304      	str	r3, [sp, #16]
 80034fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fe:	4826      	ldr	r0, [pc, #152]	; (8003598 <_svfiprintf_r+0x1f0>)
 8003500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003504:	2206      	movs	r2, #6
 8003506:	f7fc fe7b 	bl	8000200 <memchr>
 800350a:	2800      	cmp	r0, #0
 800350c:	d038      	beq.n	8003580 <_svfiprintf_r+0x1d8>
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <_svfiprintf_r+0x1f4>)
 8003510:	bb1b      	cbnz	r3, 800355a <_svfiprintf_r+0x1b2>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	3307      	adds	r3, #7
 8003516:	f023 0307 	bic.w	r3, r3, #7
 800351a:	3308      	adds	r3, #8
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003520:	4433      	add	r3, r6
 8003522:	9309      	str	r3, [sp, #36]	; 0x24
 8003524:	e767      	b.n	80033f6 <_svfiprintf_r+0x4e>
 8003526:	fb0c 3202 	mla	r2, ip, r2, r3
 800352a:	460c      	mov	r4, r1
 800352c:	2001      	movs	r0, #1
 800352e:	e7a5      	b.n	800347c <_svfiprintf_r+0xd4>
 8003530:	2300      	movs	r3, #0
 8003532:	3401      	adds	r4, #1
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	4619      	mov	r1, r3
 8003538:	f04f 0c0a 	mov.w	ip, #10
 800353c:	4620      	mov	r0, r4
 800353e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003542:	3a30      	subs	r2, #48	; 0x30
 8003544:	2a09      	cmp	r2, #9
 8003546:	d903      	bls.n	8003550 <_svfiprintf_r+0x1a8>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0c5      	beq.n	80034d8 <_svfiprintf_r+0x130>
 800354c:	9105      	str	r1, [sp, #20]
 800354e:	e7c3      	b.n	80034d8 <_svfiprintf_r+0x130>
 8003550:	fb0c 2101 	mla	r1, ip, r1, r2
 8003554:	4604      	mov	r4, r0
 8003556:	2301      	movs	r3, #1
 8003558:	e7f0      	b.n	800353c <_svfiprintf_r+0x194>
 800355a:	ab03      	add	r3, sp, #12
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	462a      	mov	r2, r5
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <_svfiprintf_r+0x1f8>)
 8003562:	a904      	add	r1, sp, #16
 8003564:	4638      	mov	r0, r7
 8003566:	f3af 8000 	nop.w
 800356a:	1c42      	adds	r2, r0, #1
 800356c:	4606      	mov	r6, r0
 800356e:	d1d6      	bne.n	800351e <_svfiprintf_r+0x176>
 8003570:	89ab      	ldrh	r3, [r5, #12]
 8003572:	065b      	lsls	r3, r3, #25
 8003574:	f53f af2c 	bmi.w	80033d0 <_svfiprintf_r+0x28>
 8003578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800357a:	b01d      	add	sp, #116	; 0x74
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003580:	ab03      	add	r3, sp, #12
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	462a      	mov	r2, r5
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <_svfiprintf_r+0x1f8>)
 8003588:	a904      	add	r1, sp, #16
 800358a:	4638      	mov	r0, r7
 800358c:	f000 f87a 	bl	8003684 <_printf_i>
 8003590:	e7eb      	b.n	800356a <_svfiprintf_r+0x1c2>
 8003592:	bf00      	nop
 8003594:	08004174 	.word	0x08004174
 8003598:	0800417e 	.word	0x0800417e
 800359c:	00000000 	.word	0x00000000
 80035a0:	080032f1 	.word	0x080032f1
 80035a4:	0800417a 	.word	0x0800417a

080035a8 <_printf_common>:
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	4616      	mov	r6, r2
 80035ae:	4699      	mov	r9, r3
 80035b0:	688a      	ldr	r2, [r1, #8]
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bfb8      	it	lt
 80035bc:	4613      	movlt	r3, r2
 80035be:	6033      	str	r3, [r6, #0]
 80035c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035c4:	4607      	mov	r7, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	b10a      	cbz	r2, 80035ce <_printf_common+0x26>
 80035ca:	3301      	adds	r3, #1
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	0699      	lsls	r1, r3, #26
 80035d2:	bf42      	ittt	mi
 80035d4:	6833      	ldrmi	r3, [r6, #0]
 80035d6:	3302      	addmi	r3, #2
 80035d8:	6033      	strmi	r3, [r6, #0]
 80035da:	6825      	ldr	r5, [r4, #0]
 80035dc:	f015 0506 	ands.w	r5, r5, #6
 80035e0:	d106      	bne.n	80035f0 <_printf_common+0x48>
 80035e2:	f104 0a19 	add.w	sl, r4, #25
 80035e6:	68e3      	ldr	r3, [r4, #12]
 80035e8:	6832      	ldr	r2, [r6, #0]
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	42ab      	cmp	r3, r5
 80035ee:	dc26      	bgt.n	800363e <_printf_common+0x96>
 80035f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f4:	1e13      	subs	r3, r2, #0
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	bf18      	it	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	0692      	lsls	r2, r2, #26
 80035fe:	d42b      	bmi.n	8003658 <_printf_common+0xb0>
 8003600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003604:	4649      	mov	r1, r9
 8003606:	4638      	mov	r0, r7
 8003608:	47c0      	blx	r8
 800360a:	3001      	adds	r0, #1
 800360c:	d01e      	beq.n	800364c <_printf_common+0xa4>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	68e5      	ldr	r5, [r4, #12]
 8003612:	6832      	ldr	r2, [r6, #0]
 8003614:	f003 0306 	and.w	r3, r3, #6
 8003618:	2b04      	cmp	r3, #4
 800361a:	bf08      	it	eq
 800361c:	1aad      	subeq	r5, r5, r2
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	6922      	ldr	r2, [r4, #16]
 8003622:	bf0c      	ite	eq
 8003624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003628:	2500      	movne	r5, #0
 800362a:	4293      	cmp	r3, r2
 800362c:	bfc4      	itt	gt
 800362e:	1a9b      	subgt	r3, r3, r2
 8003630:	18ed      	addgt	r5, r5, r3
 8003632:	2600      	movs	r6, #0
 8003634:	341a      	adds	r4, #26
 8003636:	42b5      	cmp	r5, r6
 8003638:	d11a      	bne.n	8003670 <_printf_common+0xc8>
 800363a:	2000      	movs	r0, #0
 800363c:	e008      	b.n	8003650 <_printf_common+0xa8>
 800363e:	2301      	movs	r3, #1
 8003640:	4652      	mov	r2, sl
 8003642:	4649      	mov	r1, r9
 8003644:	4638      	mov	r0, r7
 8003646:	47c0      	blx	r8
 8003648:	3001      	adds	r0, #1
 800364a:	d103      	bne.n	8003654 <_printf_common+0xac>
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003654:	3501      	adds	r5, #1
 8003656:	e7c6      	b.n	80035e6 <_printf_common+0x3e>
 8003658:	18e1      	adds	r1, r4, r3
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	2030      	movs	r0, #48	; 0x30
 800365e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003662:	4422      	add	r2, r4
 8003664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800366c:	3302      	adds	r3, #2
 800366e:	e7c7      	b.n	8003600 <_printf_common+0x58>
 8003670:	2301      	movs	r3, #1
 8003672:	4622      	mov	r2, r4
 8003674:	4649      	mov	r1, r9
 8003676:	4638      	mov	r0, r7
 8003678:	47c0      	blx	r8
 800367a:	3001      	adds	r0, #1
 800367c:	d0e6      	beq.n	800364c <_printf_common+0xa4>
 800367e:	3601      	adds	r6, #1
 8003680:	e7d9      	b.n	8003636 <_printf_common+0x8e>
	...

08003684 <_printf_i>:
 8003684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	7e0f      	ldrb	r7, [r1, #24]
 800368a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800368c:	2f78      	cmp	r7, #120	; 0x78
 800368e:	4691      	mov	r9, r2
 8003690:	4680      	mov	r8, r0
 8003692:	460c      	mov	r4, r1
 8003694:	469a      	mov	sl, r3
 8003696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800369a:	d807      	bhi.n	80036ac <_printf_i+0x28>
 800369c:	2f62      	cmp	r7, #98	; 0x62
 800369e:	d80a      	bhi.n	80036b6 <_printf_i+0x32>
 80036a0:	2f00      	cmp	r7, #0
 80036a2:	f000 80d8 	beq.w	8003856 <_printf_i+0x1d2>
 80036a6:	2f58      	cmp	r7, #88	; 0x58
 80036a8:	f000 80a3 	beq.w	80037f2 <_printf_i+0x16e>
 80036ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b4:	e03a      	b.n	800372c <_printf_i+0xa8>
 80036b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ba:	2b15      	cmp	r3, #21
 80036bc:	d8f6      	bhi.n	80036ac <_printf_i+0x28>
 80036be:	a101      	add	r1, pc, #4	; (adr r1, 80036c4 <_printf_i+0x40>)
 80036c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c4:	0800371d 	.word	0x0800371d
 80036c8:	08003731 	.word	0x08003731
 80036cc:	080036ad 	.word	0x080036ad
 80036d0:	080036ad 	.word	0x080036ad
 80036d4:	080036ad 	.word	0x080036ad
 80036d8:	080036ad 	.word	0x080036ad
 80036dc:	08003731 	.word	0x08003731
 80036e0:	080036ad 	.word	0x080036ad
 80036e4:	080036ad 	.word	0x080036ad
 80036e8:	080036ad 	.word	0x080036ad
 80036ec:	080036ad 	.word	0x080036ad
 80036f0:	0800383d 	.word	0x0800383d
 80036f4:	08003761 	.word	0x08003761
 80036f8:	0800381f 	.word	0x0800381f
 80036fc:	080036ad 	.word	0x080036ad
 8003700:	080036ad 	.word	0x080036ad
 8003704:	0800385f 	.word	0x0800385f
 8003708:	080036ad 	.word	0x080036ad
 800370c:	08003761 	.word	0x08003761
 8003710:	080036ad 	.word	0x080036ad
 8003714:	080036ad 	.word	0x080036ad
 8003718:	08003827 	.word	0x08003827
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	602a      	str	r2, [r5, #0]
 8003724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800372c:	2301      	movs	r3, #1
 800372e:	e0a3      	b.n	8003878 <_printf_i+0x1f4>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	6829      	ldr	r1, [r5, #0]
 8003734:	0606      	lsls	r6, r0, #24
 8003736:	f101 0304 	add.w	r3, r1, #4
 800373a:	d50a      	bpl.n	8003752 <_printf_i+0xce>
 800373c:	680e      	ldr	r6, [r1, #0]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	2e00      	cmp	r6, #0
 8003742:	da03      	bge.n	800374c <_printf_i+0xc8>
 8003744:	232d      	movs	r3, #45	; 0x2d
 8003746:	4276      	negs	r6, r6
 8003748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374c:	485e      	ldr	r0, [pc, #376]	; (80038c8 <_printf_i+0x244>)
 800374e:	230a      	movs	r3, #10
 8003750:	e019      	b.n	8003786 <_printf_i+0x102>
 8003752:	680e      	ldr	r6, [r1, #0]
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800375a:	bf18      	it	ne
 800375c:	b236      	sxthne	r6, r6
 800375e:	e7ef      	b.n	8003740 <_printf_i+0xbc>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	6820      	ldr	r0, [r4, #0]
 8003764:	1d19      	adds	r1, r3, #4
 8003766:	6029      	str	r1, [r5, #0]
 8003768:	0601      	lsls	r1, r0, #24
 800376a:	d501      	bpl.n	8003770 <_printf_i+0xec>
 800376c:	681e      	ldr	r6, [r3, #0]
 800376e:	e002      	b.n	8003776 <_printf_i+0xf2>
 8003770:	0646      	lsls	r6, r0, #25
 8003772:	d5fb      	bpl.n	800376c <_printf_i+0xe8>
 8003774:	881e      	ldrh	r6, [r3, #0]
 8003776:	4854      	ldr	r0, [pc, #336]	; (80038c8 <_printf_i+0x244>)
 8003778:	2f6f      	cmp	r7, #111	; 0x6f
 800377a:	bf0c      	ite	eq
 800377c:	2308      	moveq	r3, #8
 800377e:	230a      	movne	r3, #10
 8003780:	2100      	movs	r1, #0
 8003782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003786:	6865      	ldr	r5, [r4, #4]
 8003788:	60a5      	str	r5, [r4, #8]
 800378a:	2d00      	cmp	r5, #0
 800378c:	bfa2      	ittt	ge
 800378e:	6821      	ldrge	r1, [r4, #0]
 8003790:	f021 0104 	bicge.w	r1, r1, #4
 8003794:	6021      	strge	r1, [r4, #0]
 8003796:	b90e      	cbnz	r6, 800379c <_printf_i+0x118>
 8003798:	2d00      	cmp	r5, #0
 800379a:	d04d      	beq.n	8003838 <_printf_i+0x1b4>
 800379c:	4615      	mov	r5, r2
 800379e:	fbb6 f1f3 	udiv	r1, r6, r3
 80037a2:	fb03 6711 	mls	r7, r3, r1, r6
 80037a6:	5dc7      	ldrb	r7, [r0, r7]
 80037a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037ac:	4637      	mov	r7, r6
 80037ae:	42bb      	cmp	r3, r7
 80037b0:	460e      	mov	r6, r1
 80037b2:	d9f4      	bls.n	800379e <_printf_i+0x11a>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d10b      	bne.n	80037d0 <_printf_i+0x14c>
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	07de      	lsls	r6, r3, #31
 80037bc:	d508      	bpl.n	80037d0 <_printf_i+0x14c>
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	6861      	ldr	r1, [r4, #4]
 80037c2:	4299      	cmp	r1, r3
 80037c4:	bfde      	ittt	le
 80037c6:	2330      	movle	r3, #48	; 0x30
 80037c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037d0:	1b52      	subs	r2, r2, r5
 80037d2:	6122      	str	r2, [r4, #16]
 80037d4:	f8cd a000 	str.w	sl, [sp]
 80037d8:	464b      	mov	r3, r9
 80037da:	aa03      	add	r2, sp, #12
 80037dc:	4621      	mov	r1, r4
 80037de:	4640      	mov	r0, r8
 80037e0:	f7ff fee2 	bl	80035a8 <_printf_common>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d14c      	bne.n	8003882 <_printf_i+0x1fe>
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037ec:	b004      	add	sp, #16
 80037ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f2:	4835      	ldr	r0, [pc, #212]	; (80038c8 <_printf_i+0x244>)
 80037f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037f8:	6829      	ldr	r1, [r5, #0]
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003800:	6029      	str	r1, [r5, #0]
 8003802:	061d      	lsls	r5, r3, #24
 8003804:	d514      	bpl.n	8003830 <_printf_i+0x1ac>
 8003806:	07df      	lsls	r7, r3, #31
 8003808:	bf44      	itt	mi
 800380a:	f043 0320 	orrmi.w	r3, r3, #32
 800380e:	6023      	strmi	r3, [r4, #0]
 8003810:	b91e      	cbnz	r6, 800381a <_printf_i+0x196>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	f023 0320 	bic.w	r3, r3, #32
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	2310      	movs	r3, #16
 800381c:	e7b0      	b.n	8003780 <_printf_i+0xfc>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	f043 0320 	orr.w	r3, r3, #32
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	2378      	movs	r3, #120	; 0x78
 8003828:	4828      	ldr	r0, [pc, #160]	; (80038cc <_printf_i+0x248>)
 800382a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800382e:	e7e3      	b.n	80037f8 <_printf_i+0x174>
 8003830:	0659      	lsls	r1, r3, #25
 8003832:	bf48      	it	mi
 8003834:	b2b6      	uxthmi	r6, r6
 8003836:	e7e6      	b.n	8003806 <_printf_i+0x182>
 8003838:	4615      	mov	r5, r2
 800383a:	e7bb      	b.n	80037b4 <_printf_i+0x130>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	6826      	ldr	r6, [r4, #0]
 8003840:	6961      	ldr	r1, [r4, #20]
 8003842:	1d18      	adds	r0, r3, #4
 8003844:	6028      	str	r0, [r5, #0]
 8003846:	0635      	lsls	r5, r6, #24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	d501      	bpl.n	8003850 <_printf_i+0x1cc>
 800384c:	6019      	str	r1, [r3, #0]
 800384e:	e002      	b.n	8003856 <_printf_i+0x1d2>
 8003850:	0670      	lsls	r0, r6, #25
 8003852:	d5fb      	bpl.n	800384c <_printf_i+0x1c8>
 8003854:	8019      	strh	r1, [r3, #0]
 8003856:	2300      	movs	r3, #0
 8003858:	6123      	str	r3, [r4, #16]
 800385a:	4615      	mov	r5, r2
 800385c:	e7ba      	b.n	80037d4 <_printf_i+0x150>
 800385e:	682b      	ldr	r3, [r5, #0]
 8003860:	1d1a      	adds	r2, r3, #4
 8003862:	602a      	str	r2, [r5, #0]
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	2100      	movs	r1, #0
 800386a:	4628      	mov	r0, r5
 800386c:	f7fc fcc8 	bl	8000200 <memchr>
 8003870:	b108      	cbz	r0, 8003876 <_printf_i+0x1f2>
 8003872:	1b40      	subs	r0, r0, r5
 8003874:	6060      	str	r0, [r4, #4]
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	2300      	movs	r3, #0
 800387c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003880:	e7a8      	b.n	80037d4 <_printf_i+0x150>
 8003882:	6923      	ldr	r3, [r4, #16]
 8003884:	462a      	mov	r2, r5
 8003886:	4649      	mov	r1, r9
 8003888:	4640      	mov	r0, r8
 800388a:	47d0      	blx	sl
 800388c:	3001      	adds	r0, #1
 800388e:	d0ab      	beq.n	80037e8 <_printf_i+0x164>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	079b      	lsls	r3, r3, #30
 8003894:	d413      	bmi.n	80038be <_printf_i+0x23a>
 8003896:	68e0      	ldr	r0, [r4, #12]
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	4298      	cmp	r0, r3
 800389c:	bfb8      	it	lt
 800389e:	4618      	movlt	r0, r3
 80038a0:	e7a4      	b.n	80037ec <_printf_i+0x168>
 80038a2:	2301      	movs	r3, #1
 80038a4:	4632      	mov	r2, r6
 80038a6:	4649      	mov	r1, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	47d0      	blx	sl
 80038ac:	3001      	adds	r0, #1
 80038ae:	d09b      	beq.n	80037e8 <_printf_i+0x164>
 80038b0:	3501      	adds	r5, #1
 80038b2:	68e3      	ldr	r3, [r4, #12]
 80038b4:	9903      	ldr	r1, [sp, #12]
 80038b6:	1a5b      	subs	r3, r3, r1
 80038b8:	42ab      	cmp	r3, r5
 80038ba:	dcf2      	bgt.n	80038a2 <_printf_i+0x21e>
 80038bc:	e7eb      	b.n	8003896 <_printf_i+0x212>
 80038be:	2500      	movs	r5, #0
 80038c0:	f104 0619 	add.w	r6, r4, #25
 80038c4:	e7f5      	b.n	80038b2 <_printf_i+0x22e>
 80038c6:	bf00      	nop
 80038c8:	08004185 	.word	0x08004185
 80038cc:	08004196 	.word	0x08004196

080038d0 <memcpy>:
 80038d0:	440a      	add	r2, r1
 80038d2:	4291      	cmp	r1, r2
 80038d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80038d8:	d100      	bne.n	80038dc <memcpy+0xc>
 80038da:	4770      	bx	lr
 80038dc:	b510      	push	{r4, lr}
 80038de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038e6:	4291      	cmp	r1, r2
 80038e8:	d1f9      	bne.n	80038de <memcpy+0xe>
 80038ea:	bd10      	pop	{r4, pc}

080038ec <memmove>:
 80038ec:	4288      	cmp	r0, r1
 80038ee:	b510      	push	{r4, lr}
 80038f0:	eb01 0402 	add.w	r4, r1, r2
 80038f4:	d902      	bls.n	80038fc <memmove+0x10>
 80038f6:	4284      	cmp	r4, r0
 80038f8:	4623      	mov	r3, r4
 80038fa:	d807      	bhi.n	800390c <memmove+0x20>
 80038fc:	1e43      	subs	r3, r0, #1
 80038fe:	42a1      	cmp	r1, r4
 8003900:	d008      	beq.n	8003914 <memmove+0x28>
 8003902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800390a:	e7f8      	b.n	80038fe <memmove+0x12>
 800390c:	4402      	add	r2, r0
 800390e:	4601      	mov	r1, r0
 8003910:	428a      	cmp	r2, r1
 8003912:	d100      	bne.n	8003916 <memmove+0x2a>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800391a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800391e:	e7f7      	b.n	8003910 <memmove+0x24>

08003920 <_free_r>:
 8003920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003922:	2900      	cmp	r1, #0
 8003924:	d044      	beq.n	80039b0 <_free_r+0x90>
 8003926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800392a:	9001      	str	r0, [sp, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f1a1 0404 	sub.w	r4, r1, #4
 8003932:	bfb8      	it	lt
 8003934:	18e4      	addlt	r4, r4, r3
 8003936:	f000 f913 	bl	8003b60 <__malloc_lock>
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <_free_r+0x94>)
 800393c:	9801      	ldr	r0, [sp, #4]
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	b933      	cbnz	r3, 8003950 <_free_r+0x30>
 8003942:	6063      	str	r3, [r4, #4]
 8003944:	6014      	str	r4, [r2, #0]
 8003946:	b003      	add	sp, #12
 8003948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800394c:	f000 b90e 	b.w	8003b6c <__malloc_unlock>
 8003950:	42a3      	cmp	r3, r4
 8003952:	d908      	bls.n	8003966 <_free_r+0x46>
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1961      	adds	r1, r4, r5
 8003958:	428b      	cmp	r3, r1
 800395a:	bf01      	itttt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	1949      	addeq	r1, r1, r5
 8003962:	6021      	streq	r1, [r4, #0]
 8003964:	e7ed      	b.n	8003942 <_free_r+0x22>
 8003966:	461a      	mov	r2, r3
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	b10b      	cbz	r3, 8003970 <_free_r+0x50>
 800396c:	42a3      	cmp	r3, r4
 800396e:	d9fa      	bls.n	8003966 <_free_r+0x46>
 8003970:	6811      	ldr	r1, [r2, #0]
 8003972:	1855      	adds	r5, r2, r1
 8003974:	42a5      	cmp	r5, r4
 8003976:	d10b      	bne.n	8003990 <_free_r+0x70>
 8003978:	6824      	ldr	r4, [r4, #0]
 800397a:	4421      	add	r1, r4
 800397c:	1854      	adds	r4, r2, r1
 800397e:	42a3      	cmp	r3, r4
 8003980:	6011      	str	r1, [r2, #0]
 8003982:	d1e0      	bne.n	8003946 <_free_r+0x26>
 8003984:	681c      	ldr	r4, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6053      	str	r3, [r2, #4]
 800398a:	4421      	add	r1, r4
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	e7da      	b.n	8003946 <_free_r+0x26>
 8003990:	d902      	bls.n	8003998 <_free_r+0x78>
 8003992:	230c      	movs	r3, #12
 8003994:	6003      	str	r3, [r0, #0]
 8003996:	e7d6      	b.n	8003946 <_free_r+0x26>
 8003998:	6825      	ldr	r5, [r4, #0]
 800399a:	1961      	adds	r1, r4, r5
 800399c:	428b      	cmp	r3, r1
 800399e:	bf04      	itt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	bf04      	itt	eq
 80039a8:	1949      	addeq	r1, r1, r5
 80039aa:	6021      	streq	r1, [r4, #0]
 80039ac:	6054      	str	r4, [r2, #4]
 80039ae:	e7ca      	b.n	8003946 <_free_r+0x26>
 80039b0:	b003      	add	sp, #12
 80039b2:	bd30      	pop	{r4, r5, pc}
 80039b4:	200010ec 	.word	0x200010ec

080039b8 <sbrk_aligned>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	4e0e      	ldr	r6, [pc, #56]	; (80039f4 <sbrk_aligned+0x3c>)
 80039bc:	460c      	mov	r4, r1
 80039be:	6831      	ldr	r1, [r6, #0]
 80039c0:	4605      	mov	r5, r0
 80039c2:	b911      	cbnz	r1, 80039ca <sbrk_aligned+0x12>
 80039c4:	f000 f8bc 	bl	8003b40 <_sbrk_r>
 80039c8:	6030      	str	r0, [r6, #0]
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f000 f8b7 	bl	8003b40 <_sbrk_r>
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	d00a      	beq.n	80039ec <sbrk_aligned+0x34>
 80039d6:	1cc4      	adds	r4, r0, #3
 80039d8:	f024 0403 	bic.w	r4, r4, #3
 80039dc:	42a0      	cmp	r0, r4
 80039de:	d007      	beq.n	80039f0 <sbrk_aligned+0x38>
 80039e0:	1a21      	subs	r1, r4, r0
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 f8ac 	bl	8003b40 <_sbrk_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d101      	bne.n	80039f0 <sbrk_aligned+0x38>
 80039ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039f0:	4620      	mov	r0, r4
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	200010f0 	.word	0x200010f0

080039f8 <_malloc_r>:
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	1ccd      	adds	r5, r1, #3
 80039fe:	f025 0503 	bic.w	r5, r5, #3
 8003a02:	3508      	adds	r5, #8
 8003a04:	2d0c      	cmp	r5, #12
 8003a06:	bf38      	it	cc
 8003a08:	250c      	movcc	r5, #12
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	db01      	blt.n	8003a14 <_malloc_r+0x1c>
 8003a10:	42a9      	cmp	r1, r5
 8003a12:	d905      	bls.n	8003a20 <_malloc_r+0x28>
 8003a14:	230c      	movs	r3, #12
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	2600      	movs	r6, #0
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a20:	4e2e      	ldr	r6, [pc, #184]	; (8003adc <_malloc_r+0xe4>)
 8003a22:	f000 f89d 	bl	8003b60 <__malloc_lock>
 8003a26:	6833      	ldr	r3, [r6, #0]
 8003a28:	461c      	mov	r4, r3
 8003a2a:	bb34      	cbnz	r4, 8003a7a <_malloc_r+0x82>
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f7ff ffc2 	bl	80039b8 <sbrk_aligned>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	4604      	mov	r4, r0
 8003a38:	d14d      	bne.n	8003ad6 <_malloc_r+0xde>
 8003a3a:	6834      	ldr	r4, [r6, #0]
 8003a3c:	4626      	mov	r6, r4
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	d140      	bne.n	8003ac4 <_malloc_r+0xcc>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	4631      	mov	r1, r6
 8003a46:	4638      	mov	r0, r7
 8003a48:	eb04 0803 	add.w	r8, r4, r3
 8003a4c:	f000 f878 	bl	8003b40 <_sbrk_r>
 8003a50:	4580      	cmp	r8, r0
 8003a52:	d13a      	bne.n	8003aca <_malloc_r+0xd2>
 8003a54:	6821      	ldr	r1, [r4, #0]
 8003a56:	3503      	adds	r5, #3
 8003a58:	1a6d      	subs	r5, r5, r1
 8003a5a:	f025 0503 	bic.w	r5, r5, #3
 8003a5e:	3508      	adds	r5, #8
 8003a60:	2d0c      	cmp	r5, #12
 8003a62:	bf38      	it	cc
 8003a64:	250c      	movcc	r5, #12
 8003a66:	4629      	mov	r1, r5
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7ff ffa5 	bl	80039b8 <sbrk_aligned>
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d02b      	beq.n	8003aca <_malloc_r+0xd2>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	442b      	add	r3, r5
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	e00e      	b.n	8003a98 <_malloc_r+0xa0>
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	1b52      	subs	r2, r2, r5
 8003a7e:	d41e      	bmi.n	8003abe <_malloc_r+0xc6>
 8003a80:	2a0b      	cmp	r2, #11
 8003a82:	d916      	bls.n	8003ab2 <_malloc_r+0xba>
 8003a84:	1961      	adds	r1, r4, r5
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	6025      	str	r5, [r4, #0]
 8003a8a:	bf18      	it	ne
 8003a8c:	6059      	strne	r1, [r3, #4]
 8003a8e:	6863      	ldr	r3, [r4, #4]
 8003a90:	bf08      	it	eq
 8003a92:	6031      	streq	r1, [r6, #0]
 8003a94:	5162      	str	r2, [r4, r5]
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f104 060b 	add.w	r6, r4, #11
 8003a9e:	f000 f865 	bl	8003b6c <__malloc_unlock>
 8003aa2:	f026 0607 	bic.w	r6, r6, #7
 8003aa6:	1d23      	adds	r3, r4, #4
 8003aa8:	1af2      	subs	r2, r6, r3
 8003aaa:	d0b6      	beq.n	8003a1a <_malloc_r+0x22>
 8003aac:	1b9b      	subs	r3, r3, r6
 8003aae:	50a3      	str	r3, [r4, r2]
 8003ab0:	e7b3      	b.n	8003a1a <_malloc_r+0x22>
 8003ab2:	6862      	ldr	r2, [r4, #4]
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	bf0c      	ite	eq
 8003ab8:	6032      	streq	r2, [r6, #0]
 8003aba:	605a      	strne	r2, [r3, #4]
 8003abc:	e7ec      	b.n	8003a98 <_malloc_r+0xa0>
 8003abe:	4623      	mov	r3, r4
 8003ac0:	6864      	ldr	r4, [r4, #4]
 8003ac2:	e7b2      	b.n	8003a2a <_malloc_r+0x32>
 8003ac4:	4634      	mov	r4, r6
 8003ac6:	6876      	ldr	r6, [r6, #4]
 8003ac8:	e7b9      	b.n	8003a3e <_malloc_r+0x46>
 8003aca:	230c      	movs	r3, #12
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f000 f84c 	bl	8003b6c <__malloc_unlock>
 8003ad4:	e7a1      	b.n	8003a1a <_malloc_r+0x22>
 8003ad6:	6025      	str	r5, [r4, #0]
 8003ad8:	e7de      	b.n	8003a98 <_malloc_r+0xa0>
 8003ada:	bf00      	nop
 8003adc:	200010ec 	.word	0x200010ec

08003ae0 <_realloc_r>:
 8003ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	4614      	mov	r4, r2
 8003ae8:	460e      	mov	r6, r1
 8003aea:	b921      	cbnz	r1, 8003af6 <_realloc_r+0x16>
 8003aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af0:	4611      	mov	r1, r2
 8003af2:	f7ff bf81 	b.w	80039f8 <_malloc_r>
 8003af6:	b92a      	cbnz	r2, 8003b04 <_realloc_r+0x24>
 8003af8:	f7ff ff12 	bl	8003920 <_free_r>
 8003afc:	4625      	mov	r5, r4
 8003afe:	4628      	mov	r0, r5
 8003b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b04:	f000 f838 	bl	8003b78 <_malloc_usable_size_r>
 8003b08:	4284      	cmp	r4, r0
 8003b0a:	4607      	mov	r7, r0
 8003b0c:	d802      	bhi.n	8003b14 <_realloc_r+0x34>
 8003b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b12:	d812      	bhi.n	8003b3a <_realloc_r+0x5a>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4640      	mov	r0, r8
 8003b18:	f7ff ff6e 	bl	80039f8 <_malloc_r>
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0ed      	beq.n	8003afe <_realloc_r+0x1e>
 8003b22:	42bc      	cmp	r4, r7
 8003b24:	4622      	mov	r2, r4
 8003b26:	4631      	mov	r1, r6
 8003b28:	bf28      	it	cs
 8003b2a:	463a      	movcs	r2, r7
 8003b2c:	f7ff fed0 	bl	80038d0 <memcpy>
 8003b30:	4631      	mov	r1, r6
 8003b32:	4640      	mov	r0, r8
 8003b34:	f7ff fef4 	bl	8003920 <_free_r>
 8003b38:	e7e1      	b.n	8003afe <_realloc_r+0x1e>
 8003b3a:	4635      	mov	r5, r6
 8003b3c:	e7df      	b.n	8003afe <_realloc_r+0x1e>
	...

08003b40 <_sbrk_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4d06      	ldr	r5, [pc, #24]	; (8003b5c <_sbrk_r+0x1c>)
 8003b44:	2300      	movs	r3, #0
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fd fb12 	bl	8001174 <_sbrk>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_sbrk_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_sbrk_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	200010f4 	.word	0x200010f4

08003b60 <__malloc_lock>:
 8003b60:	4801      	ldr	r0, [pc, #4]	; (8003b68 <__malloc_lock+0x8>)
 8003b62:	f000 b811 	b.w	8003b88 <__retarget_lock_acquire_recursive>
 8003b66:	bf00      	nop
 8003b68:	200010f8 	.word	0x200010f8

08003b6c <__malloc_unlock>:
 8003b6c:	4801      	ldr	r0, [pc, #4]	; (8003b74 <__malloc_unlock+0x8>)
 8003b6e:	f000 b80c 	b.w	8003b8a <__retarget_lock_release_recursive>
 8003b72:	bf00      	nop
 8003b74:	200010f8 	.word	0x200010f8

08003b78 <_malloc_usable_size_r>:
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f18      	subs	r0, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfbc      	itt	lt
 8003b82:	580b      	ldrlt	r3, [r1, r0]
 8003b84:	18c0      	addlt	r0, r0, r3
 8003b86:	4770      	bx	lr

08003b88 <__retarget_lock_acquire_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_release_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <_init>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr

08003b98 <_fini>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr
